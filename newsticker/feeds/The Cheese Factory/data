;; -*- coding: utf-8 -*-
(("The Cheese Factory's Blog (English)" "Update Trend and Technology with Original Content written by The Cheese Factory team!" "http://inthecheesefactory.com/blog/en" (22432 40570 854895 0) feed 0 nil nil ((title nil "The Cheese Factory's Blog (English)") (description nil "
					Update Trend and Technology with Original Content written by The Cheese Factory team!
				") (link nil "http://inthecheesefactory.com/blog/en") (lastBuildDate nil "Thu, 14 Jul 2016 02:28:17 +0000") (generator nil "inthecheesefactory.com feed generator") (copyright nil "inthecheesefactory.com") (item nil (title nil "
				Bring back your childhood memories in 360Â° photos experience !			") (description nil "
				<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/360/cover.jpg\" /></p> 
<p>360&deg; photo is among the top grossing trends in internet world these days. What's about to bring&nbsp;you&nbsp;back your childhood memories in this 2016 trend?</p>
<p>No need to imagine how it is. Let us show you. Here we go !</p>
<p style=\"text-align: center;\">[360]http://inthecheesefactory.com/uploads/source/360/Mario.jpg[/360]</p>
<p style=\"text-align: center;\">[360]http://inthecheesefactory.com/uploads/source/360/Contra.jpg[/360]</p>
<p style=\"text-align: center;\">[360]http://inthecheesefactory.com/uploads/source/360/Rockman.jpg[/360]</p>
<p style=\"text-align: center;\">[360]http://inthecheesefactory.com/uploads/source/360/Circus.jpg[/360]</p>
<p style=\"text-align: center;\">[360]http://inthecheesefactory.com/uploads/source/360/Pokemon.jpg[/360]</p>
<p>Or if you wanna view these photos on Facebook, you can check them out in this <a href=\"https://www.facebook.com/nuuneoi/media_set?set=a.10209214853464575.1073741850.1118131684&amp;type=3\" target=\"_blank\">Childhood memories in 360 photos experience</a> album !</p>
<p>Time flies really fast, huh?</p>			") (link nil "http://inthecheesefactory.com/blog/retro-childhood-in-360-photos-experience/en") (pubDate nil "
				Wed, 13 Jul 2016 15:12:00 +0000			") (guid nil "http://inthecheesefactory.com/blog/retro-childhood-in-360-photos-experience/en")) (item nil (title nil "
				Google's Awareness API in action. Make your application be User's Context-Aware.			") (description nil "
				<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/awareness/cover4.jpg\" /></p> 
<p>In the passed Google I/O 2016, the biggest annual developer conference organized by Google, very promising&nbsp;API named Awareness API was announced. Here is the 35 mins recorded session in the event.</p>
<p style=\"text-align: center;\">[youtube]37ia7S4Lsv4[/youtube]</p>
<p>Good news ! API has just been publicly released&nbsp;few days ago. After playing around in many possible ways, I must say that&nbsp;Awareness API is very interesting and give you a chance to enable rich feature to your application with just few lines of code. This blog will give you information about this amazing API in details. Here we go !</p>
<h2 class=\"section-heading\">What is&nbsp;Awareness API?</h2>
<p>Here is the definition of&nbsp;Awareness API&nbsp;given by Google</p>
<blockquote><span style=\"font-size: 18pt;\">A unified sensing platform enabling applications to be aware of multiple aspects of a users context, while managing battery and memory health.</span></blockquote>
<p>Sounds confusing? Yup, may be. Anyway, actually this API is pretty easy and straightforward. It was made to bring you a capability to <strong>work with data related to user's current context</strong>, for example,</p>
<p style=\"padding-left: 30px;\">- Local time of user's current&nbsp;location</p>
<p style=\"padding-left: 30px;\">- Weather information&nbsp;of place where user currently is</p>
<p style=\"padding-left: 30px;\">- User activity: Walking, biking, running, etc.</p>
<p style=\"padding-left: 30px;\">- Do something when user moves close to&nbsp;the specific&nbsp;coordinate</p>
<p style=\"padding-left: 30px;\">-&nbsp;Check if headphones are&nbsp;plugged in or not</p>
<p>It is true that some task could be done with currently-available set of API, for example, you could pull weather information&nbsp;of current location&nbsp;by passing user's coordinate to Weather API, and since you can get user's coordinate periodically so you could calculate user's velocity to guess user activity as well.</p>
<p>Although it is possible to do so but I must say that&nbsp;it is&nbsp;not an easy job and an implementation easily causes an error in practical. But with Awareness API you can gain these advantages:</p>
<p style=\"padding-left: 30px;\">- You can do those amazing things with just few lines of code.</p>
<p style=\"padding-left: 30px;\">- Data got from this API is more accurate since it is already processed in the proper way.</p>
<p style=\"padding-left: 30px;\">- No more worries about battery consumption since Awareness API is already optimized. It will manage all of those for you.</p>
<p>In conclusion, Awareness API allows you to get data based on user's context&nbsp;easier, more accurate with better performance.</p>
<h2 class=\"section-heading\">Context Types</h2>
<p>There are 7&nbsp;kinds of context that we can work with in Awareness API such as</p>
<p style=\"padding-left: 30px;\"><strong>Time</strong> -&nbsp;Local time at current user's&nbsp;location</p>
<p style=\"padding-left: 30px;\"><strong>Location</strong> -&nbsp;Latitude/Longitude</p>
<p style=\"padding-left: 30px;\"><strong>Place</strong> -&nbsp;Places around user</p>
<p style=\"padding-left: 30px;\"><strong>Activity</strong> - Detected user activity (biking, walking, running, etc.)</p>
<p style=\"padding-left: 30px;\"><strong>Beacons</strong> -&nbsp;Check nearby beacon(s)</p>
<p style=\"padding-left: 30px;\"><strong>Headphones</strong> -&nbsp;Are headphones plugged in?</p>
<p style=\"padding-left: 30px;\"><strong>Weather</strong> -&nbsp;Current weather conditions</p>
<p>Although these sets of information cover&nbsp;most of the use case&nbsp;in general already but I believe that more will come in the near future.</p>
<h2 class=\"section-heading\">Two set of APIs in&nbsp;Awareness API</h2>
<p>There are two sets of API available in Awareness API&nbsp;such as</p>
<p style=\"padding-left: 30px;\"><strong>Snapshot API</strong> - Allows you to&nbsp;<strong>\"<span style=\"text-decoration: underline;\">request&nbsp;an information based on user's context</span>\"</strong>&nbsp;as listed above.</p>
<p style=\"padding-left: 30px;\"><strong>Fence API</strong> - Allows you to <strong>\"<span style=\"text-decoration: underline;\">receive a signal when user's context has changed and reaches the condition</span>\"</strong>&nbsp;through callback function, for example, if user moves closed to the specific coordinate with headphones plugged in, Fench API will call the registered BroadcastReceiver and let you do your job.</p>
<p>Actually those two sets of API work&nbsp;with the exact same set of data. Google just seperates it into two to make it easier to communicate. Snapshot to get data, Fence to detect change. That's all.</p>
<h2 class=\"section-heading\">Get Started</h2>
<p>Awareness API is part of&nbsp;Google Play Services 9.2. To use it, you need to&nbsp;set up your project to enable GMS. First of all, a project in&nbsp;<strong>Google Developer Console</strong>&nbsp;is needed.</p>
<p>1) Create a project in&nbsp;<a href=\"https://console.developers.google.com\">https://console.developers.google.com</a>&nbsp;(or in case you already have one, you can use it instead)</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/awareness/createproject.png\" alt=\"\" width=\"560\" height=\"500\" /></p>
<p>2) And then&nbsp;browse to&nbsp;<a href=\"https://console.developers.google.com/apis/library\" target=\"_blank\">API Manager</a>&nbsp;page and search for&nbsp;<strong>Awareness&nbsp;</strong>and click at&nbsp;<strong>Awareness API</strong></p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/awareness/apimanager.png\" alt=\"\" width=\"800\" height=\"400\" /></p>
<p>3) Click&nbsp;<strong>Enable </strong>and wait until it finishes enabling</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/awareness/enable.png\" alt=\"\" width=\"800\" height=\"400\" /></p>
<p>4) Go to&nbsp;<a href=\"https://console.developers.google.com/apis/credentials\" target=\"_blank\">Credentials</a>&nbsp;tab and click at <strong>Create credentials -&gt; API key -&gt; Android key</strong>. Enter the name you project, for example, Android key&nbsp;and click&nbsp;<strong>Create</strong>&nbsp;(or if you have already created&nbsp;Android key previously, you could skip this step and use the existed one)</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/awareness/createandroidkey.png\" alt=\"\" width=\"950\" height=\"540\" /></p>
<p>5) <strong>API key</strong>&nbsp;will be generated&nbsp;with format like this:&nbsp;<code>AIzaSyBdVl-cTICSwYKrZ95LoVuw7dbMuDt1KG0</code>. <span style=\"text-decoration: underline;\">Copy it</span> somewhere. We need it in the further step.</p>
<p>6) Launch&nbsp;<strong>Android SDK Manager</strong>&nbsp;and update <strong>Google Play Services</strong>&nbsp;and&nbsp;<strong>Google Repository</strong>&nbsp;to the latest version.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/awareness/gms.png\" alt=\"\" width=\"552\" height=\"321\" /></p>
<p>7) Launch <strong>Android Studio</strong>, create a new project and then open application module's&nbsp;<code>build.gradle</code>&nbsp;and add dependency for Awareness API like below.</p>
<pre class=\"brush:groovy;auto-links:false;toolbar:false\" contenteditable=\"false\">dependencies {
    compile 'com.google.android.gms:play-services-contextmanager:9.2.0'
}</pre>
<p>Sync Gradle&nbsp;once done.</p>
<p>7) Open&nbsp;<code>AndroidManifest.xml</code>&nbsp;file&nbsp;and add meta-data&nbsp;to&nbsp;<code>&lt;application&gt;</code> tag like this:</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">        &lt;meta-data
            android:name=\"com.google.android.awareness.API_KEY\"
            android:value=\"YOUR_KEY\" /&gt;
        &lt;meta-data
            android:name=\"com.google.android.geo.API_KEY\"
            android:value=\"YOUR_KEY\" /&gt;
        &lt;meta-data
            android:name=\"com.google.android.nearby.messages.API_KEY\"
            android:value=\"YOUR_KEY\" /&gt;</pre>
<p>Don't forget to replace&nbsp;<strong>YOUR_KEY</strong>&nbsp;with <strong>API key</strong>&nbsp;acquired by the step above.</p>
<p>Please note that the first meta-data is mandatory but the rest are optional. The second one (geo) is needed if you want to access Place while the last one (nearby) is needed&nbsp;if you want to work with Beacon. If you have no plan to access those APIs, please feel free to remove the&nbsp;related meta-data anytime.</p>
<p>8) Add 2 permissions&nbsp;in the same&nbsp;<code>AndroidManifest.xml</code>&nbsp;file inside&nbsp;<code>&lt;manifest&gt;</code> tag.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">    &lt;uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" /&gt;
    &lt;uses-permission android:name=\"com.google.android.gms.permission.ACTIVITY_RECOGNITION\" /&gt;</pre>
<p>The first one is used to access information related to GPS location (Beacon, Location, Place and Weather) while the latter is used to detect user's activity (Activity). Headphone and Time don't&nbsp;need any extra permission.</p>
<p>9) Open&nbsp;<code>MainActivity.java</code>&nbsp;file and let's initialize GoogleApiClient inside&nbsp;<code>onCreate</code>&nbsp;to enable&nbsp;Awareness API&nbsp;in your application.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">public class MainActivity extends AppCompatActivity {

    private GoogleApiClient mGoogleApiClient;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        mGoogleApiClient = new GoogleApiClient.Builder(MainActivity.this)
                .addApi(Awareness.API)
                .build();
        mGoogleApiClient.connect();
    }
}</pre>
<p>That's all. Your project is now set up and API is now ready to be called. After this I will give you a demo on how to access the data&nbsp;in Awareness API one by one. Please note that to testing device is needed to have Google Play Services 9.2 installed. Please update it to the latest or application may not be able to run on your device.</p>
<h2 class=\"section-heading\">Snapshot API</h2>
<p>Let's start with something easy like <strong>\"requesting an information\"</strong>, so let's start with Snapshot API.&nbsp;Here is the code structure I use in this demo.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    private static final String TAG = \"Awareness\";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        ...

        initSnapshots();
    }

    private void initSnapshots() {

    }
</pre>
<p>All codes below will be put inside <code>initSnapshots()</code> so it will be called immediately when the Activity is created.</p>
<p>First thing to know here is Snapshot API is accessible through&nbsp;<code>Awareness.SnapshotApi</code>. That's all.&nbsp;Let's go for the first one.</p>
<h2 class=\"subsection-heading\"><span style=\"color: #2980b9;\">Activity</span></h2>
<p>Detect user's activity. Here is the code snippet.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">        Awareness.SnapshotApi.getDetectedActivity(mGoogleApiClient)
                .setResultCallback(new ResultCallback&lt;DetectedActivityResult&gt;() {
                    @Override
                    public void onResult(@NonNull DetectedActivityResult detectedActivityResult) {
                        if (!detectedActivityResult.getStatus().isSuccess()) {
                            Log.e(TAG, \"Could not get the current activity.\");
                            return;
                        }
                        ActivityRecognitionResult ar = detectedActivityResult.getActivityRecognitionResult();
                        DetectedActivity probableActivity = ar.getMostProbableActivity();
                        Log.i(TAG, probableActivity.toString());
                    }
                });</pre>
<p>Code is quite straightforward. You could simply call <code>getDetectedActivity</code>&nbsp;and result will be sent through associated callback. Here is the&nbsp;example result from&nbsp;<code>Log.i</code>&nbsp;line:</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">I/Awareness: DetectedActivity [type=STILL, confidence=100]</pre>
<p>You will notice that we are&nbsp;able to detect user's current activity type (\"STILL\" in this case). You can get this information by calling&nbsp;<code>probableActivity.getType()</code>&nbsp;which will return as an&nbsp;integer listed below.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    public static final int IN_VEHICLE = 0;
    public static final int ON_BICYCLE = 1;
    public static final int ON_FOOT = 2;
    public static final int STILL = 3;
    public static final int UNKNOWN = 4;
    public static final int TILTING = 5;
    public static final int WALKING = 7;
    public static final int RUNNING = 8;</pre>
<p>You will also be able to check the confidence of activity type by calling&nbsp;<code>probableActivity.getConfidence()</code>&nbsp;which will return an integer with value between 0-100.</p>
<p>Easy, huh? Another API in Snapshot API will also be called in the same way like this one.</p>
<h2 class=\"subsection-heading\"><span style=\"color: #2980b9;\">Headphones</span></h2>
<p>Check headphones plugged in state.&nbsp;Here is the code snippet.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">        Awareness.SnapshotApi.getHeadphoneState(mGoogleApiClient)
                .setResultCallback(new ResultCallback&lt;HeadphoneStateResult&gt;() {
                    @Override
                    public void onResult(@NonNull HeadphoneStateResult headphoneStateResult) {
                        if (!headphoneStateResult.getStatus().isSuccess()) {
                            Log.e(TAG, \"Could not get headphone state.\");
                            return;
                        }
                        HeadphoneState headphoneState = headphoneStateResult.getHeadphoneState();
                        if (headphoneState.getState() == HeadphoneState.PLUGGED_IN) {
                            Log.i(TAG, \"Headphones are plugged in.\\n\");
                        } else {
                            Log.i(TAG, \"Headphones are NOT plugged in.\\n\");
                        }
                    }
                });</pre>
<p>You will see that it is exactly the same way like we did to acquire user's activity. To get headphone's state, you could simply call&nbsp;<code>headphoneState.getState()</code>&nbsp;which will return two possible results:&nbsp;<code>HeadphoneState.PLUGGED_IN</code>&nbsp;or&nbsp;<code>HeadphoneState.UNPLUGGED</code>.</p>
<h2 class=\"subsection-heading\"><span style=\"color: #2980b9;\">Location</span></h2>
<p>Get device's lat/long coordinate.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">            Awareness.SnapshotApi.getLocation(mGoogleApiClient)
                    .setResultCallback(new ResultCallback&lt;LocationResult&gt;() {
                        @Override
                        public void onResult(@NonNull LocationResult locationResult) {
                            if (!locationResult.getStatus().isSuccess()) {
                                Log.e(TAG, \"Could not get location.\");
                                return;
                            }
                            Location location = locationResult.getLocation();
                            Log.i(TAG, \"Lat: \" + location.getLatitude() + \", Lon: \" + location.getLongitude());
                        }
                    });</pre>
<p>To get latitude and longitude, just simply call&nbsp;<code>location.getLatitude()</code>&nbsp;and&nbsp;<code>location.getLongitude()</code>&nbsp;respectively. There are also some another&nbsp;value that you can get, for example, altitude. You could read the related document,&nbsp;<a href=\"https://developer.android.com/reference/android/location/Location.html\" target=\"_blank\">Location</a>&nbsp;class, for more information.</p>
<p><strong><span style=\"color: #c0392b;\">* To make code above works on Android M and higher, you need to implement Runtime Permission to let user grants access to&nbsp;ACCESS_FINE_LOCATION permission or SecurityException will be raised. This part of code will look like this.</span></strong></p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">        if (ContextCompat.checkSelfPermission(
                MainActivity.this,
                android.Manifest.permission.ACCESS_FINE_LOCATION) !=
                PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(
                    MainActivity.this,
                    new String[]{android.Manifest.permission.ACCESS_FINE_LOCATION},
                    12345
            );
        }</pre>
<p><strong><span style=\"color: #c0392b;\">I will not write about Runtime Permission&nbsp;in details here. If you want to learn more about this, you could read my previous blog,&nbsp;<a href=\"../../../blog/things-you-need-to-know-about-android-m-permission-developer-edition/en\" target=\"_blank\">Everything every Android Developer must know about new Android's Runtime Permission</a></span></strong></p>
<h2 class=\"subsection-heading\"><span style=\"color: #2980b9;\">Places</span></h2>
<p>This function will return you places around user's location. To make this works, you need to enable&nbsp;<a href=\"https://console.developers.google.com/apis/api/placesandroid/overview\" target=\"_blank\">Google Places for Android</a>&nbsp;in&nbsp;<strong>Google Developer Console</strong>&nbsp;first. Code snippet below will list you 5 top possible&nbsp;places.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">            Awareness.SnapshotApi.getPlaces(mGoogleApiClient)
                    .setResultCallback(new ResultCallback&lt;PlacesResult&gt;() {
                        @Override
                        public void onResult(@NonNull PlacesResult placesResult) {
                            if (!placesResult.getStatus().isSuccess()) {
                                Log.e(TAG, \"Could not get places.\");
                                return;
                            }
                            List&lt;PlaceLikelihood&gt; placeLikelihoodList = placesResult.getPlaceLikelihoods();
                            // Show the top 5 possible location results.
                            if (placeLikelihoodList != null) {
                                for (int i = 0; i &lt; 5 &amp;&amp; i &lt; placeLikelihoodList.size(); i++) {
                                    PlaceLikelihood p = placeLikelihoodList.get(i);
                                    Log.i(TAG, p.getPlace().getName().toString() + \", likelihood: \" + p.getLikelihood());
                                }
                            } else {
                                Log.e(TAG, \"Place is null.\");
                            }
                        }
                    });</pre>
<p>Place details could be acquired from&nbsp;<code>p.getPlace()</code>&nbsp;which contains many useful information like&nbsp;<code>getAddress()</code>, <code>getPhoneNumber()</code>&nbsp;or <code>getPlaceTypes()</code>. You could find&nbsp;more about these functions at related document,&nbsp;<a href=\"https://developers.google.com/android/reference/com/google/android/gms/location/places/Place\" target=\"_blank\">Place</a>.</p>
<p><span style=\"color: #c0392b;\"><strong>* Runtime Permission is also needed to implement to make Places works on Android M and higher.</strong></span></p>
<h2 class=\"subsection-heading\"><span style=\"color: #2980b9;\">Weather</span></h2>
<p>Code snippet below allows you to&nbsp;get the weather conditions.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">            Awareness.SnapshotApi.getWeather(mGoogleApiClient)
                    .setResultCallback(new ResultCallback&lt;WeatherResult&gt;() {
                        @Override
                        public void onResult(@NonNull WeatherResult weatherResult) {
                            if (!weatherResult.getStatus().isSuccess()) {
                                Log.e(TAG, \"Could not get weather.\");
                                return;
                            }
                            Weather weather = weatherResult.getWeather();
                            Log.i(TAG, \"Weather: \" + weather);
                        }
                    });</pre>
<p>There are so many useful information you can retrieve, for example,</p>
<p style=\"padding-left: 30px;\"><code>getTemperature()</code>&nbsp;-&nbsp;Current temperature at the device's current location.</p>
<p style=\"padding-left: 30px;\"><code>getFeelsLikeTemperature()</code>&nbsp;-&nbsp;What temperature a person would feel is at the device's current location.</p>
<p style=\"padding-left: 30px;\"><code>getHumidity()</code>&nbsp;- Humidity level at the device's current location</p>
<p style=\"padding-left: 30px;\"><code>getDewPoint()</code>&nbsp;-&nbsp;Dew point at the device's current location</p>
<p style=\"padding-left: 30px;\"><code>getConditions()</code>&nbsp;-&nbsp;Current weather conditions as an array of values that best describe the current conditions&nbsp;(something like&nbsp;Clear, Cloudy, Foggy, etc.)</p>
<p>You can find more about these functions at related document,&nbsp;<a href=\"https://developers.google.com/android/reference/com/google/android/gms/awareness/state/Weather\" target=\"_blank\">Weather</a>.</p>
<p><span style=\"color: #c0392b;\"><strong>* Runtime Permission is also needed to implement to make Weather&nbsp;works on Android M and higher.</strong></span></p>
<h2 class=\"subsection-heading\"><span style=\"color: #2980b9;\">Beacon</span></h2>
<p>Detect the state of nearby beacon devices. To make Beacon works, you need to&nbsp;enable <a href=\"https://console.developers.google.com/apis/api/copresence/overview\" target=\"_blank\">Nearby Messages API</a>&nbsp;in&nbsp;<strong>Google Developer Console</strong>&nbsp;first. Please make sure that&nbsp;your&nbsp;beacon has already been registerd to your Google API project and attachment is already added to that beacon. In case you don't know how to do so, <a href=\"https://play.google.com/store/apps/details?id=com.google.android.apps.location.beacon.beacontools&amp;hl=en\" target=\"_blank\">Beacon Tools</a> app developed by Google is being quite a useful tools.</p>
<p>After things have already set up.&nbsp;Declare all the possible attachment's namespaces and types in the code below.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">            List BEACON_TYPE_FILTERS = Arrays.asList(
                    BeaconState.TypeFilter.with(
                            \"my.beacon.namespace\",
                            \"my-attachment-type\"),
                    BeaconState.TypeFilter.with(
                            \"my.other.namespace\",
                            \"my-attachment-type\"));</pre>
<p>If your beacon's attachment&nbsp;<strong>namespaceType</strong> is <code>my-sample-project/mydata</code>&nbsp;, my.beacon.namespace would be <strong>my-sample-project</strong> while my-attachment-type would be <strong>mydata</strong>.</p>
<p>To get the beacon state, call&nbsp;<code>getBeaconState</code></p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">            Awareness.SnapshotApi.getBeaconState(mGoogleApiClient, BEACON_TYPE_FILTERS)
                    .setResultCallback(new ResultCallback&lt;BeaconStateResult&gt;() {
                        @Override
                        public void onResult(@NonNull BeaconStateResult beaconStateResult) {
                            if (!beaconStateResult.getStatus().isSuccess()) {
                                Log.e(TAG, \"Could not get beacon state.\");
                                return;
                            }
                            BeaconState beaconState = beaconStateResult.getBeaconState();
                            // Get info from the BeaconState.
                        }
                    });</pre>
<p>The state result of each beacon device could be retrieved through&nbsp;<code>beaconState.getBeaconInfo()</code>. You could find more information about the result at related document,&nbsp;<a href=\"https://developers.google.com/android/reference/com/google/android/gms/awareness/state/BeaconState.BeaconInfo\" target=\"_blank\">BeaconState.BeaconInfo</a>.</p>
<p><span style=\"color: #c0392b;\"><strong>* Runtime Permission is also needed to implement to make Beacon&nbsp;works on Android M and higher.</strong></span></p>
<h2 class=\"subsection-heading\"><span style=\"color: #2980b9;\">Time</span></h2>
<p>There is no Time function available in Snapshot API since you could simply get the local time with Android's standard API.</p>
<p><br />That's all about Snapshot API. You can see that although it is straightforward and pretty easy to use but it is still very useful. Please give it a try.</p>
<h2 class=\"section-heading\">Fence API</h2>
<p>\"Fence\" here comes from the well-known word \"Geo-fencing\" which means the virtual barrier of&nbsp;real-world geographic area. But for Fence, you could do a lot more besides location detection.&nbsp;You could set the condition related to working context in Awareness API and get the callback when condition is reached.</p>
<p>Let's see what it could do by real code. First of all, let's set the code structure. Basically Fence will collect a <strong>PendingIntent</strong> and whenever the condition is reached, Intent contained inside would&nbsp;be fired. So in this example, I will create a <strong>BroadcastReceiver</strong> to handle that&nbsp;<strong>Intent</strong>. Here is the code.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">public class MainActivity extends AppCompatActivity {

    private static final String FENCE_RECEIVER_ACTION = \"FENCE_RECEIVE\";

    private HeadphoneFenceBroadcastReceiver fenceReceiver;
    private PendingIntent mFencePendingIntent;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        ...

        fenceReceiver = new HeadphoneFenceBroadcastReceiver();
        Intent intent = new Intent(FENCE_RECEIVER_ACTION);
        mFencePendingIntent = PendingIntent.getBroadcast(MainActivity.this,
                10001,
                intent,
                0);
    }

    private void registerFences() {
        // Create a fence.
    }

    private void unregisterFence() {
    }

    @Override
    protected void onStart() {
        super.onStart();
        registerFences();
        registerReceiver(fenceReceiver, new IntentFilter(FENCE_RECEIVER_ACTION));
    }

    @Override
    protected void onStop() {
        super.onStop();
        unregisterFences();
        unregisterReceiver(fenceReceiver);
    }

    class HeadphoneFenceBroadcastReceiver extends BroadcastReceiver {

        @Override
        public void onReceive(Context context, Intent intent) {

        }

    }</pre>
<p>Code that does the Fence registration will be placed inside&nbsp;<code>registerFences()</code>&nbsp;while the unregistration one will be placed inside&nbsp;<code>unregisterFences()</code>.</p>
<h2 class=\"subsection-heading\"><span style=\"color: #2980b9;\">Detect Headphones Plugged-In State Change</span></h2>
<p>The easiest example to demo Fence API would be to detect the change of Headphones plugged-in state. To do so, declare the condition as an <code>AwarenessFence</code> variable which in this case, <code>HeadphoneFence</code> will be used to create the Fence condition. Put code below inside <code>registerFences()</code>.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">        AwarenessFence headphoneFence = HeadphoneFence.during(HeadphoneState.PLUGGED_IN);</pre>
<p>And then call <code>Awareness.FenceApi.updateFences(...)</code>&nbsp;to register the Fence.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">        Awareness.FenceApi.updateFences(
                mGoogleApiClient,
                new FenceUpdateRequest.Builder()
                        .addFence(\"headphoneFenceKey\", headphoneFence, mFencePendingIntent)
                        .build())
                .setResultCallback(new ResultCallback&lt;Status&gt;() {
                    @Override
                    public void onResult(@NonNull Status status) {
                        if (status.isSuccess()) {
                            Log.i(TAG, \"Fence was successfully registered.\");
                        } else {
                            Log.e(TAG, \"Fence could not be registered: \" + status);
                        }
                    }
                });</pre>
<p>The important line is the&nbsp;<code>.addFence()</code>&nbsp;one which asks for the Fence and associated PendingIntent which are <code>headphoneFence</code> and <code>mFencePendingIntent</code> respectively in this example. Whenever condition defined in headphoneFence&nbsp;is reached, an Intent inside mFencePendingIntent would be fired and the registered&nbsp;BroadcastReceiver like&nbsp;<code>fenceReceiver</code> would receive the Intent.</p>
<p>To prevent the memory leak, unregistration is also needed. Put code below inside&nbsp;<code>unregisterFences()</code>&nbsp;to do the job.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    private void unregisterFences() {
        Awareness.FenceApi.updateFences(
                mGoogleApiClient,
                new FenceUpdateRequest.Builder()
                        .removeFence(\"headphoneFenceKey\")
                        .build()).setResultCallback(new ResultCallbacks&lt;Status&gt;() {
            @Override
            public void onSuccess(@NonNull Status status) {
                Log.i(TAG, \"Fence \" + \"headphoneFenceKey\" + \" successfully removed.\");
            }

            @Override
            public void onFailure(@NonNull Status status) {
                Log.i(TAG, \"Fence \" + \"headphoneFenceKey\" + \" could NOT be removed.\");
            }
        });
    }</pre>
<p>Now let's handle the Intent in&nbsp;<code>HeadphoneFenceBroadcastReceiver</code>. Modify&nbsp;<code>onReceive</code>&nbsp;function as code below.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    class HeadphoneFenceBroadcastReceiver extends BroadcastReceiver {

        @Override
        public void onReceive(Context context, Intent intent) {
            FenceState fenceState = FenceState.extract(intent);

            Log.d(TAG, \"Fence Receiver Received\");

            if (TextUtils.equals(fenceState.getFenceKey(), \"headphoneFenceKey\")) {
                switch (fenceState.getCurrentState()) {
                    case FenceState.TRUE:
                        Log.i(TAG, \"Fence &gt; Headphones are plugged in.\");
                        break;
                    case FenceState.FALSE:
                        Log.i(TAG, \"Fence &gt; Headphones are NOT plugged in.\");
                        break;
                    case FenceState.UNKNOWN:
                        Log.i(TAG, \"Fence &gt; The headphone fence is in an unknown state.\");
                        break;
                }
            }
        }
        
    }</pre>
<p>It is pretty straightforward. Once Intent is&nbsp;received, you could extract the FenceState with <code>FenceState.extract(intent)</code>&nbsp;function.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">FenceState fenceState = FenceState.extract(intent);</pre>
<p>And since a single BroadcastReceiver may be set to receive more than one type of Fence, FenceKey is needed to be checked to do anything next.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">if (TextUtils.equals(fenceState.getFenceKey(), \"headphoneFenceKey\")) {</pre>
<p>Please note that FenceKey here is the key that we give it in&nbsp;<code>addFence</code>&nbsp;function above. Don't forget to use constant instead of hardcoding in your production code.</p>
<p>The final step is to check the FenceState if the condition is TRUE&nbsp;of FALSE from <code>fenceState.getFenceState()</code>&nbsp;function and then do whatever you want. It's&nbsp;all done !</p>
<h2 class=\"subsection-heading\"><span style=\"color: #2980b9;\">Test</span></h2>
<p>Code above should now works properly. Please run your application and plug your headphones in. Logcat should show something like this:</p>
<pre class=\"brush:ps;auto-links:false;toolbar:false\" contenteditable=\"false\">D/Awareness: Fence Receiver Received
I/Awareness: Fence &gt; Headphones are plugged in.</pre>
<p>And&nbsp;logs below should be shown when you unplug your headphones.</p>
<pre class=\"brush:ps;auto-links:false;toolbar:false\" contenteditable=\"false\">D/Awareness: Fence Receiver Received
I/Awareness: Fence &gt; Headphones are NOT plugged in.</pre>
<p>As I said before. It is easy but outcome is very awesome !</p>
<h2 class=\"subsection-heading\"><span style=\"color: #2980b9;\">All Possible&nbsp;Fences</span></h2>
<p>5 contexts in Awareness API could be set as a condition by using class listed below:</p>
<p style=\"padding-left: 30px;\"><span style=\"font-family: 'courier new', courier, monospace;\"><strong><a href=\"https://developers.google.com/android/reference/com/google/android/gms/awareness/fence/DetectedActivityFence\" target=\"_blank\">DetectedActivityFence</a> </strong></span>- Detect condition based on user's activity.</p>
<p style=\"padding-left: 30px;\"><span style=\"font-family: 'courier new', courier, monospace;\"><strong><a href=\"https://developers.google.com/android/reference/com/google/android/gms/awareness/fence/HeadphoneFence\" target=\"_blank\">HeadphoneFence</a> </strong></span>- Detect condition based on headphones plugging in state.</p>
<p style=\"padding-left: 30px;\"><strong><span style=\"font-family: 'courier new', courier, monospace;\"><a href=\"https://developers.google.com/android/reference/com/google/android/gms/awareness/fence/TimeFence\" target=\"_blank\">TimeFence</a></span> </strong>- Detect condition based on local time at user's location.</p>
<p style=\"padding-left: 30px;\"><span style=\"font-family: 'courier new', courier, monospace;\"><strong><a href=\"https://developers.google.com/android/reference/com/google/android/gms/awareness/fence/LocationFence\" target=\"_blank\">LocationFence</a> </strong></span>- Detect condition based on user's location.</p>
<p style=\"padding-left: 30px;\"><strong><span style=\"font-family: 'courier new', courier, monospace;\"><a href=\"https://developers.google.com/android/reference/com/google/android/gms/awareness/fence/BeaconFence\" target=\"_blank\">BeaconFence</a></span></strong> - Detect condition based on nearby Beacons' state.</p>
<p>Each Fence has its own way to define the condition. I could not put them all here since there are too many. You could find more information by clicking at the class name. Anyway it supposes not to be a problem since if you understand the concept of HeadphoneFence code above, you would be able to apply and learn how to use another Fence by your own.</p>
<p>Please note that&nbsp;Weather and Places&nbsp;are not available in&nbsp;the&nbsp;Fence API.</p>
<h2 class=\"subsection-heading\"><span style=\"color: #2980b9;\">Detect Multiple Fences Condition</span></h2>
<p>In many cases it is useful to combine multiple conditions as a single&nbsp;Fence with and/or logic, for example,</p>
<p style=\"padding-left: 30px;\">- If user is running and has headphone plugged in.</p>
<p style=\"padding-left: 30px;\">- If user move closed to the specific location in the afternoon.</p>
<p>Don't worry. Fence API would do you a job. You could do it in the fancy way&nbsp;by&nbsp;declaring all the&nbsp;<code>AwarenessFence</code>s, for example,</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">        AwarenessFence headphoneFence = HeadphoneFence.during(HeadphoneState.PLUGGED_IN);
        AwarenessFence detectedActivityFence = DetectedActivityFence.during(DetectedActivityFence.RUNNING);
</pre>
<p>And combine them with <code>AwarenessFence.and</code>&nbsp;like this:</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">        AwarenessFence andFence = AwarenessFence.and(headphoneFence, detectedActivityFence);</pre>
<p>And then pass <code>andFence</code> to&nbsp;<code>addFence(...)</code> command and everything would works like desired.</p>
<p>Besides <span style=\"font-family: 'courier new', courier, monospace;\">and</span>, <span style=\"font-family: 'courier new', courier, monospace;\">or</span> and <span style=\"font-family: 'courier new', courier, monospace;\">not</span> are also be able to be done with&nbsp;<code>AwarenessFence.or</code>&nbsp;and&nbsp;<code>AwarenessFence.not</code>&nbsp;respectively. Please feel free to apply the logic as you want.</p>
<h2 class=\"section-heading\">Use Case</h2>
<p>There are some application that utilize the benifit of Awareness API. Here are two examples.</p>
<p style=\"padding-left: 30px;\"><span style=\"color: #2980b9;\"><strong>Superplayer Music</strong></span>&nbsp;- It could suggests you a song based on weather at user's location. Imagine, sad song in the rainy season ... That's cruel !</p>
<p style=\"padding-left: 30px;\"><span style=\"color: #2980b9;\"><strong>Trulia</strong></span>&nbsp;- Real estate application that could notify user when user is walking near&nbsp;the listed house and the weather is nice.</p>
<p>As you can see from the use cases above. With Awareness API, you could implement quite a lot of amazing rich features like you have never thought it is possible before. Only barrier now is your imagination ! Working with user's context is really awesome and can cause your application get the higher retention and positive feedback.</p>
<h2 class=\"section-heading\">Conclusion</h2>
<p>That's all about Awareness API in details. I found that it is very useful and I must say that I am very impressed with its capability. Anyway please note that Awareness API is a part of Google Play Services so it will work on device with GMS installed only. Always be reminded that your application might not be able to run on those Chinese devices out there.</p>
<p>I hope that you find this blog post&nbsp;useful. Have fun playing with user's context ! =D</p>			") (link nil "http://inthecheesefactory.com/blog/google-awareness-api-in-action/en") (pubDate nil "
				Wed, 29 Jun 2016 16:17:00 +0000			") (guid nil "http://inthecheesefactory.com/blog/google-awareness-api-in-action/en")) (item nil (title nil "
				Say goodbye to findViewById. Say hello to Data Binding Library.			") (description nil "
				<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/databinding/coverfv.jpg\" /></p> 
<p><code>findViewById</code> is one of the most annoying boilerplate code in Android application development. This part of code unnecessarily requires bunch&nbsp;of line of codes and can easily cause an expected behavior unintentionally.</p>
<p>Some library was invented to reduce this part of code's size, for example,&nbsp;the popular&nbsp;<a href=\"http://jakewharton.github.io/butterknife/\" target=\"_blank\">Butter Knife</a>&nbsp;which adopts Annotation processing to help mapping between Java's variable and ID declared inside layout XML file.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">class ExampleActivity extends Activity {
    @BindView(R.id.title) TextView title;
    @BindView(R.id.subtitle) TextView subtitle;
    @BindView(R.id.footer) TextView footer;

    @Override public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.simple_activity);
        ButterKnife.bind(this);
        // TODO Use fields...
    }
}</pre>
<p>Anyway, although it could help reducing a signifant number of line of codes but it still requires some effort and can still cause some mistake since&nbsp;you still have to declare <code>@BindView</code> manually one by one.</p>
<p>Here we go. This blog will introduce you the perfect solution to totally eliminate these annoying codes away using god-level&nbsp;<strong>Data Binding Library</strong>.</p>
<h2 class=\"section-heading\">Tools Preparation</h2>
<p>To use Data Binding Library, you need to use&nbsp;<strong>Android Studio 1.5</strong>&nbsp;or higher version. Anyway I believe that most of you have already upgraded to version 2.0 already so this should not be a problem.</p>
<p>And then open module's&nbsp;<code>build.gradle</code>&nbsp;and add the following line in <code>android</code> block to enable Data Binding.</p>
<pre class=\"brush:groovy;auto-links:false;toolbar:false\" contenteditable=\"false\">android {
    ...
    dataBinding {
        enabled true
    }
}</pre>
<p>Sync Gradle to finish the process and done. Your project has now gained access to Data Binding Library. Easy, huh? =)</p>
<h2 class=\"section-heading\">Inflate Layout in Data Binding's way</h2>
<p>Layout is required some change&nbsp;to let Data Binding be usable.&nbsp;Here is the original one:</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;
&lt;RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"
    xmlns:app=\"http://schemas.android.com/apk/res-auto\"
    xmlns:tools=\"http://schemas.android.com/tools\"
    android:id=\"@+id/activity_main\"
    android:layout_width=\"match_parent\"
    android:layout_height=\"match_parent\"
    tools:context=\"com.inthecheesefactory.lab.databinding.MainActivity\"&gt;

    &lt;TextView
        android:id=\"@+id/tvHello\"
        android:layout_width=\"wrap_content\"
        android:layout_height=\"wrap_content\"
        android:layout_centerInParent=\"true\"
        android:text=\"Hello World!\" /&gt;

&lt;/RelativeLayout&gt;</pre>
<p><code>&lt;layout&gt;...&lt;/layout&gt;</code>&nbsp;tag is required to be&nbsp;a Root Element and then move everything inside it. Here is the modified version:</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;
&lt;layout xmlns:android=\"http://schemas.android.com/apk/res/android\"
    xmlns:app=\"http://schemas.android.com/apk/res-auto\"
    xmlns:tools=\"http://schemas.android.com/tools\"&gt;

    &lt;RelativeLayout
        android:id=\"@+id/activity_main\"
        android:layout_width=\"match_parent\"
        android:layout_height=\"match_parent\"
        tools:context=\"com.inthecheesefactory.lab.databinding.MainActivity\"&gt;

        &lt;TextView
            android:id=\"@+id/tvHello\"
            android:layout_width=\"wrap_content\"
            android:layout_height=\"wrap_content\"
            android:layout_centerInParent=\"true\"
            android:text=\"Hello World!\" /&gt;

    &lt;/RelativeLayout&gt;
&lt;/layout&gt;
</pre>
<p><span style=\"color: #2980b9;\">At this step, please <span style=\"text-decoration: underline;\">build your project</span>&nbsp;to let Data Binding Library auto generating neccessary files for you. You need those for the further steps.</span></p>
<p>After build is done, open your Activity's java file and change&nbsp;<code>setContentView</code>&nbsp;part of code from:</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
    }

}</pre>
<p>into:</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">public class MainActivity extends AppCompatActivity {

    ActivityMainBinding binding;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        binding = DataBindingUtil.setContentView(this, R.layout.activity_main);
    }

}</pre>
<p>You may notice that <code>ActivityMainBinding</code> is used here although you didn't declare it anywhere. There is nothing magical here. <code>ActivityMainBinding.java</code> was previously auto generated by Data Binding Library when you built your app minutes ago. Its class name comes from <code>activity_main.xml</code> file's name which is turned into <strong>Upper CamelCase</strong> before appending with <strong>Binding, </strong><code>ActivityMainBinding</code>. This is the way this library use to turn file's name into class name. You can use this logic in every single case.</p>
<p>And now it's time to access View inside <code>activity_main.xml</code>. Well ... you can simply access it through&nbsp;<code>binding</code> variable using its ID like this !</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">binding.tvHello.setText(\"Hello from Data Binding\");</pre>
<p>Here is the result.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/databinding/screenshot117.jpg\" alt=\"\" width=\"1080\" height=\"672\" /></p>
<p>As you can see, boilerplate <code>findViewById</code> code are all eliminated. Moreover, you have no need to declare even a single variable to access&nbsp;View. The code will still be the same although you add more 100 Views to this layout. Cool, isn't it ?!?</p>
<h2 class=\"section-heading\">Inflating into&nbsp;Custom ViewGroup</h2>
<p>The way to inflate your layout&nbsp;into&nbsp;Activity has already shown above. And how's about inflating into Custom ViewGroup or Layout to create your Custom&nbsp;View. Can we do it? Definitely yes ! And it is as easy as above sample.</p>
<p>First of all, you need to modify your layout XML file by adding&nbsp;<code>&lt;layout&gt;...&lt;/layout&gt;</code>&nbsp;as&nbsp;a Root Element.</p>
<p><span style=\"font-family: 'courier new', courier, monospace;\"><strong>item_bloglist.xml</strong></span></p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;
&lt;layout xmlns:android=\"http://schemas.android.com/apk/res/android\"&gt;

    &lt;LinearLayout
        android:layout_width=\"match_parent\"
        android:layout_height=\"match_parent\"
        android:orientation=\"vertical\"
        android:padding=\"16dp\"&gt;

        &lt;TextView
            android:id=\"@+id/tvTitle\"
            style=\"@style/TextAppearance.AppCompat.Title\"
            android:layout_width=\"wrap_content\"
            android:layout_height=\"wrap_content\"
            android:text=\"Title\" /&gt;

        &lt;TextView
            android:id=\"@+id/tvCaption\"
            style=\"@style/TextAppearance.AppCompat.Caption\"
            android:layout_width=\"wrap_content\"
            android:layout_height=\"wrap_content\"
            android:text=\"Caption\" /&gt;

    &lt;/LinearLayout&gt;

&lt;/layout&gt;</pre>
<p>And then use this line of code to inflate the layout.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">ItemBloglistBinding binding = ItemBloglistBinding.inflate(layoutInflater, root, attachToRoot);</pre>
<p>Code pattern is still be the same as the way we normally do layout inflation. The only change is you need to inflate using the auto-generated Binding class instead, which is <code>ItemBloglistBinding</code> in this example. Again, its name is converted&nbsp;from <code>item_bloglist.xml</code>.</p>
<p>Here is the full code snippet how to inflate <code>item_bloglist.xml</code> into <strong>FrameLayout</strong> and automatically gain access to all Views indie.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">package com.inthecheesefactory.lab.databinding;

import android.annotation.TargetApi;
import android.content.Context;
import android.os.Build;
import android.util.AttributeSet;
import android.view.LayoutInflater;
import android.widget.FrameLayout;

import com.inthecheesefactory.lab.databinding.databinding.ItemBloglistBinding;

/**
 * Created by nuuneoi on 6/28/2016.
 */

public class BlogListItem extends FrameLayout {

    ItemBloglistBinding binding;

    public BlogListItem(Context context) {
        super(context);
        initInflate();
        initInstances();
    }

    public BlogListItem(Context context, AttributeSet attrs) {
        super(context, attrs);
        initInflate();
        initInstances();
    }

    public BlogListItem(Context context, AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
        initInflate();
        initInstances();
    }

    @TargetApi(Build.VERSION_CODES.LOLLIPOP)
    public BlogListItem(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {
        super(context, attrs, defStyleAttr, defStyleRes);
        initInflate();
        initInstances();
    }

    private void initInflate() {
        LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        binding = ItemBloglistBinding.inflate(inflater, this, true);
    }

    private void initInstances() {

    }

}
</pre>
<p>Yah, you now have a Custom ViewGroup containing <code>item_bloglist.xml</code> layout inside.&nbsp;To access any View inside, you could simply do the same fancy way:</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    private void initInstances() {
        binding.tvTitle.setText(\"I am the Title\");
    }
</pre>
<p>Now let's try to place it somewhere in <code>activity_main.xml</code>.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;
&lt;layout
    ...&gt;

    &lt;RelativeLayout
        ...&gt;

        ...

        &lt;com.inthecheesefactory.lab.databinding.BlogListItem
            android:layout_width=\"match_parent\"
            android:layout_height=\"wrap_content\" /&gt;

    &lt;/RelativeLayout&gt;
&lt;/layout&gt;
</pre>
<p>Here is the result.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/databinding/screenshot669.jpg\" alt=\"\" width=\"1080\" height=\"672\" /></p>
<p>I must say that code is pretty short and really nice =)</p>
<h2 class=\"section-heading\">How Data Binding Library convert ID&nbsp;into variable name</h2>
<p>You can notice in the sample above that every single @+id declared in XML file are automatically turned into Java variables as XXXBinding's member variable. We should know more in details on how&nbsp;this library uses to convert the id to variable name to prevent the further problem.</p>
<p>Actually the way this library use to convert id to variable name is as simple as: <strong>\"Turn every&nbsp;id(s)&nbsp;into camelCase\"</strong></p>
<p>for instance,</p>
<p><code>@+id/tvHello</code></p>
<p style=\"padding-left: 30px;\">This is already in camelCase format so the variable name in Java is simply be&nbsp;<code>tvHello</code></p>
<p><code>@+id/tv_hello</code></p>
<p style=\"padding-left: 30px;\">This is in Underscores format. It will be converted&nbsp;into camelCase first to match the rule so it will also be&nbsp;<code>tvHello</code>&nbsp;as above</p>
<p>And what will happen if those two ids are declared into same XML files like this?:</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">        &lt;TextView
            android:id=\"@+id/tvHello\"
            android:layout_width=\"wrap_content\"
            android:layout_height=\"wrap_content\"
            android:layout_centerInParent=\"true\"
            android:text=\"Hello World!\" /&gt;

        &lt;TextView
            android:id=\"@+id/tv_hello\"
            android:layout_width=\"wrap_content\"
            android:layout_height=\"wrap_content\"
            android:layout_centerInParent=\"true\"
            android:text=\"Hello World!\" /&gt;
</pre>
<p>Don't worry that there would be a problem. Data Bind Library is smart enough to seperate those two apart. But since those variable names are just the same so at the final, you will get two variables:&nbsp;<code>tvHello</code> and <code>tvHello1</code> instead to access those two TextView respectively.</p>
<p>Anyway, although it is usable but it may cause some confusion. To prevent this, it is recommended to set id in only a single format, either camelCase or Underscores. Choose just only one and everything will be good.</p>
<h2 class=\"section-heading\">Conclusion</h2>
<p>This is only a&nbsp;small part of Data Binding Library's potential but I must say that it is the killer feature which&nbsp;could improve your code's quality quite a lot. There are still be a lot that this library is really useful for your application. If you have time, I suggest you to study more about this Data Binding Library. It's a game changer =)</p>
<h2 class=\"section-heading\">Bonus: Kotlin Android Extensions</h2>
<p>If you are developing your Android application using Kotlin. There is also the similar thing named&nbsp;<a href=\"https://kotlinlang.org/docs/tutorials/android-plugin.html\" target=\"_blank\">Kotlin Android Extensions</a>&nbsp;available. It is even easier since you have no need to modify the layout even bit. If you are Kotlin's fan, go for it =)</p>			") (link nil "http://inthecheesefactory.com/blog/say-goodbye-to-findviewbyid-with-data-binding-library/en") (pubDate nil "
				Tue, 28 Jun 2016 06:51:00 +0000			") (guid nil "http://inthecheesefactory.com/blog/say-goodbye-to-findviewbyid-with-data-binding-library/en")) (item nil (title nil "
				onActivityResult() inside Nested Fragment is now called on Support Library rev 23.2 and above			") (description nil "
				<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/nestedfragment/cover2.png\" /></p> 
<p>One of the most annoying problem of Nested Fragment (a Fragment that is attached on another Fragment) is although we can call <code>startActivityForResult(...)</code> but <code>onActivityResult(...)</code> will not be called on the way back. You can find the reason behind in this blog post <a href=\"../../../blog/how-to-fix-nested-fragment-onactivityresult-issue/en\" target=\"_blank\">\"How to make onActivityResult get called on Nested Fragment\"</a>.</p>
<p>Previously if you&nbsp;want to make it work, you&nbsp;need to do some workaround, for example, NestedFragment introduced by me last year. Anyway good news is here. No any extra workaround is needed&nbsp;anymore since the problem has already been fixed&nbsp;with Fragment brought in&nbsp;Android Support Library rev 23.2 onwards.&nbsp;<code>onActivityResult</code>&nbsp;is now called in Nested Fragment !</p>
<h2 class=\"section-heading\">Testing</h2>
<p>I did some experiment by creating two types of Fragment: <code>MainFragment</code> and <code>SecondFragment</code>. MainFragment is placed on Activity while SecondFragment is placed on MainFragment like shown in diagram below.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/nestedfragment/fragments.png\" alt=\"\" width=\"960\" height=\"533\" /></p>
<p>SecondFragment is a very simple Fragment contains just a single&nbsp;button named <code>btnGo</code>&nbsp;with simple logic shown in&nbsp;code below.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">// SecondFragment.java

// Calling to SecondActivity
@Override
public View onCreateView(LayoutInflater inflater, ViewGroup container,
                         Bundle savedInstanceState) {
    ...
    btnGo = (Button) rootView.findViewById(R.id.btnGo);
    btnGo.setOnClickListener(new View.OnClickListener() {
        @Override
        public void onClick(View v) {
            Intent intent = new Intent(getContext(), SecondActivity.class);
            startActivityForResult(intent, 12345);
        }
    });
}

// Get Result Back
@Override
public void onActivityResult(int requestCode, int resultCode, Intent data) {
    super.onActivityResult(requestCode, resultCode, data);
    Log.d(\"onActivityResult\", \"requestCode = \" + requestCode);
}</pre>
<p>As you can see in the code shown above. When btnGo is clicked, <code>SecondActivity</code> will be launched by&nbsp;<code>startActivityForResult</code>&nbsp; command. And here is the source code of&nbsp;<code>SecondActivity</code>.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">// SecondActivity.java
public class SecondActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_second);

        Intent intent = new Intent();
        setResult(RESULT_OK, intent);
        finish();
    }
}
</pre>
<p>SecondActivity does nothing but just simply&nbsp;immediately finish itself right after it is launched and result will be delivered back to the caller.</p>
<p><strong>Expectation:</strong>&nbsp;When btnGo is clicked, <code>onActivityResult</code> inside <code>SecondFragment</code> must be called and a line of log must be shown inside logcat window.</p>
<p>And here is the result when tested with <strong>rev 23.1.1</strong> and <strong>rev 23.2.1</strong></p>
<h2 class=\"subsection-heading\">With Android Support Library revision 23.1.1</h2>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">com.inthecheesefactory.lab.nestedfragment I/OpenGLRenderer: Initialized EGL, version 1.4
com.inthecheesefactory.lab.nestedfragment W/EGL_emulation: eglSurfaceAttrib not implemented
com.inthecheesefactory.lab.nestedfragment W/OpenGLRenderer: Failed to set EGL_SWAP_BEHAVIOR on surface 0xaf853600, error=EGL_SUCCESS</pre>
<h2 class=\"subsection-heading\">With Android Support Library revision 23.2.1</h2>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">com.inthecheesefactory.lab.nestedfragment I/OpenGLRenderer: Initialized EGL, version 1.4
com.inthecheesefactory.lab.nestedfragment W/EGL_emulation: eglSurfaceAttrib not implemented
com.inthecheesefactory.lab.nestedfragment W/OpenGLRenderer: Failed to set EGL_SWAP_BEHAVIOR on surface 0xaf853600, error=EGL_SUCCESS
com.inthecheesefactory.lab.nestedfragment D/onActivityResult: requestCode = 12345
</pre>
<p>As you can see, <span style=\"color: #e74c3c;\"><strong>onActivityResult on SecondFragment is not called&nbsp;</strong><strong>on Android Support Library rev 23.1 and below</strong></span>&nbsp;<span style=\"text-decoration: underline; color: #16a085;\"><strong>while it is called perfectly on&nbsp;rev 23.2 and above</strong></span>.</p>
<p>Personally&nbsp;this is a little big change which could change the way we code. Let's start switching to Android Support Library rev 23.2+ now and make your code more clean ! =D</p>			") (link nil "http://inthecheesefactory.com/blog/onactivityresult-nested-fragment-support-library-v23.2/en") (pubDate nil "
				Sat, 26 Mar 2016 12:46:00 +0000			") (guid nil "http://inthecheesefactory.com/blog/onactivityresult-nested-fragment-support-library-v23.2/en")) (item nil (title nil "
				How to setup a Private Maven Repository for in-house Android libraries distribution			") (description nil "
				<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/verify_1.png\" /></p> 
<p>Yesterday I got a question: <span style=\"color: #2980b9;\"><strong>\"In the end, there will be ton of library modules placed&nbsp;inside the android project. What is the best and sustainable way to organize these libraries for both current and future uses?\".</strong></span></p>
<p>Well, I think the question&nbsp;was quite great and I believe that many of you might have the same doubtfulness&nbsp;in mind so I decide to write this blog giving you an instruction how to <span style=\"color: #27ae60;\"><strong>\"setup your own Private Maven Repository\"</strong></span> for the internal use.</p>
<p>Let's get started.</p>
<h2 class=\"section-heading\">Why should we setup a&nbsp;Private&nbsp;Maven Repository?</h2>
<p>It's true that an Android Library module is actually just a bunch of source codes grouped in the same directory. If you want to let other developers&nbsp;use your library, you could simply send them&nbsp;the whole directory and let them include it in&nbsp;their project.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/libmodule.png\" alt=\"\" width=\"1281\" /></p>
<p>Sounds easy but it doesn't mean it is good.&nbsp;The question is&nbsp;<span style=\"color: #2980b9;\"><strong>\"If company starts to grow and amount&nbsp;of project starts to increase continously. Is it good if we still pass the library as source code like this?\"</strong></span></p>
<p>The answer is a very big <strong><span style=\"color: #e74c3c;\">NO</span>.</strong> Don't do that ! Here are some big reasons you need to concern:</p>
<p style=\"padding-left: 30px;\">1) Let's imagine. If you have about 10 projects sharing the same library module. At the final, you will find copies of source code scattering around in those&nbsp;projects which is totally not good for code controlling.</p>
<p style=\"padding-left: 30px;\">2) It's quite not convenient&nbsp;to update library to the newer version. Here is the process:&nbsp;download the source code, copy it, replace the old one with the new one, check if there is something wrong, etc... And you have to do every single step <em>manually</em>.</p>
<p style=\"padding-left: 30px;\">3) And if your day is bad enough, the updated version of library may cause your has-ever-worked-great-before application&nbsp;into the&nbsp;junky state. In that case, you need to roll the library back to the previous version. Wahhhh, that means we need to keep every single version of source code as a backup in case we might meet the jackpot someday.</p>
<p style=\"padding-left: 30px;\">4) In term of usage, we need to distribute the library to let other developers <strong>\"use\"</strong> it. So there is no need to let them see the source code. Just a legible document how to use the library is more than enough.</p>
<p style=\"padding-left: 30px;\">5) Library distributed to other developers should <span style=\"text-decoration: underline;\">not</span> be modifiable. In case there is some problem, issue should be reported to developer involved to let them fix. Letting other developers directly access the source code might cause them accidentally doing a quick fix by themselves&nbsp;which will cause&nbsp;a big problem afterwards.</p>
<p>And that's the reason why we shouldn't ever distribute the library as source code. <span style=\"color: #2980b9;\"><strong>The better way is to distribute the built-version of library instead which is&nbsp;<span style=\"text-decoration: underline;\">.jar</span> or <span style=\"text-decoration: underline;\">.aar</span>&nbsp;file in this case.</strong></span></p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/flow01.png\" alt=\"\" width=\"960\" /></p>
<p>Although it looks better but it's not perfect yet. Most of the&nbsp;problem listed above are solved except one:<span style=\"color: #e74c3c;\"><strong>&nbsp;it's still hard to update and roll back over the&nbsp;version</strong></span>. We still need to download, copy, replace, backup, blah blah blah. Developer's time is valueable and shouldn't be wasted from these things.</p>
<p>Is&nbsp;it better if we could just add a line of code in <code>build.gradle</code>'s dependencies area just like we do to&nbsp;include the 3rd party library, for example,</p>
<pre class=\"brush:groovy;auto-links:false;toolbar:false\" contenteditable=\"false\">compile 'my.company:library:1.1.0'</pre>
<p>If you have any problem with the new version of library, you could just simply change the version number back to the worked one in a second.</p>
<pre class=\"brush:groovy;auto-links:false;toolbar:false\" contenteditable=\"false\">compile 'my.company:library:1.0.0'</pre>
<p>I found this as the perfect choice in every single dimension. It's easy to distribute the library, if you want to use, just add a line of code and done!&nbsp;It's also very&nbsp;easy to update and roll back to whichever version you want. And the source code is also unmodifiable.</p>
<p>So I encourage every company to have a Maven Repository to use internally for this. And since we use it internally then these libraries should be kept private, so Public Repository is not a choice. We must go for a <strong>Private Maven Repository</strong> with full access control system so that there will be nobody except team members gain an&nbsp;access to the library.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/flow02.png\" alt=\"\" width=\"960\" /></p>
<p>To achieve that, we have two choices:</p>
<p style=\"padding-left: 30px;\">1) <strong>To use private repository hosted service</strong>&nbsp;- There are quite a lot service like this out there.&nbsp;The most popular one are&nbsp;<a href=\"https://www.jfrog.com/bintray/bintray-private-repo/\" target=\"_blank\">Bintray&nbsp;Premium</a>&nbsp;and&nbsp;<a href=\"https://jitpack.io/private\" target=\"_blank\">JitPack Private Repositories</a>. Anyway it's quite pricey (at least for&nbsp;me). Moreover you will be charged more&nbsp;by the number of library artifact&nbsp;you need to host there. For me, it's not a good choice for the long term usage which amount of library artifact may increase to&nbsp;10 within a year.</p>
<p style=\"padding-left: 30px;\">2) <strong>Setup your own dedicated server</strong>&nbsp;- There are so many choices of Open Source software providing you the&nbsp;perfect solution, for example, Artifactory and&nbsp;Nexus. You could put as many&nbsp;library artifacts as you want. Only bill you have to pay is the hosting fee which is not a big concern anymore&nbsp;these days. With DigitalOcean, you can pay just $10/month. That's all. Sounds cool, right?</p>
<p>Alright, I will give you an instruction how to set up our own Private Maven Repository as a dedicated server. The open source software I choose is <strong>Artifactory</strong>&nbsp;since it is incredibly&nbsp;easy to install despite its countless&nbsp;promising features and its stability.</p>
<h2 class=\"section-heading\">Artifactory Installation</h2>
<p>I know that you all must have your own favorite operating system in mind but to make it easy, let me control the hosting environment a little bit. In this blog entry,&nbsp;I will guide you how to setup Artifactory on<strong> Ubuntu 14.04 LTS</strong> on DigitalOcean. If you don't want to pay any buck, VM on VirtualBox might be a choice for you as well. Choose one, it's your choice.</p>
<h2 class=\"subsection-heading\">Create&nbsp;Ubuntu 14.04 LTS&nbsp;droplet</h2>
<p>Initially,&nbsp;let's create an droplet&nbsp;on DigitalOcean&nbsp;with these specifications:</p>
<p style=\"padding-left: 30px;\"><strong>OS:</strong> Ubuntu 14.04 LTS</p>
<p style=\"padding-left: 30px;\"><strong>Size:</strong>&nbsp;$10/month</p>
<p style=\"padding-left: 30px;\"><strong>Region:</strong>&nbsp;Any region but I recommend you to choose the server closed to you most.&nbsp;</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/createdroplet.png\" alt=\"\" width=\"699\" /></p>
<p>After droplet is created, please <strong>ssh</strong>&nbsp;into the created server&nbsp;with <code>root</code> user and password sent to your email.</p>
<h2 class=\"subsection-heading\">Install&nbsp;Java 8</h2>
<p>Java 8 doesn't come with Ubuntu 14.04 LTS' default repository. We need to install it through PPA repository. You can do so with these command lines:</p>
<pre class=\"brush:bash;auto-links:false;toolbar:false\" contenteditable=\"false\"># add-apt-repository ppa:webupd8team/java
# apt-get update
# apt-get install oracle-java8-installer</pre>
<p>You could verify the installation by typing this command.</p>
<pre class=\"brush:bash;auto-links:false;toolbar:false\" contenteditable=\"false\"># java -version
java version \"1.8.0_72\"
Java(TM) SE Runtime Environment (build 1.8.0_72-b15)
Java HotSpot(TM) 64-Bit Server VM (build 25.72-b15, mixed mode)</pre>
<p>Done.</p>
<h2 class=\"subsection-heading\">Install Artifactory</h2>
<p>Installation is easy. First, you need to&nbsp;download the&nbsp;debian package&nbsp;of Artifactory&nbsp;from bintray:</p>
<pre class=\"brush:bash;auto-links:false;toolbar:false\" contenteditable=\"false\">$ wget https://bintray.com/artifact/download/jfrog/artifactory-debs/pool/main/j/jfrog-artifactory-oss-deb/jfrog-artifactory-oss-4.5.1.deb</pre>
<p>Version used in this tutorial is 4.5.1 since it is the latest version at the moment I write this blog entry. Feel free to use any other version you prefer. A&nbsp;list of Artifactory version number is available&nbsp;in&nbsp;<a href=\"https://bintray.com/jfrog/artifactory-debs/jfrog-artifactory-oss-deb/view\" target=\"_blank\">Bintray</a>&nbsp;site.</p>
<p>Now it's time to install it with these 4 line of codes. And of course, if you use another version besides 4.5.1, don't forget to change the number of deb package to what you are using.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">$ gpg --keyserver pgpkeys.mit.edu --recv-key 6B219DCCD7639232 
$ gpg -a --export 6B219DCCD7639232 | sudo apt-key add -
$ apt-get update
$ dpkg -i jfrog-artifactory-oss-4.5.1.deb</pre>
<p>Installation will be done in&nbsp;a minute. You could start the service immediately with this command.</p>
<pre class=\"brush:as3;auto-links:false;toolbar:false\" contenteditable=\"false\"># service artifactory start</pre>
<p>Tomcat is already embedded in&nbsp;Artifactory package so you have no need to install anything else. It&nbsp;is now ready to use as a standalone.</p>
<h2 class=\"section-heading\">Configure Artifactory</h2>
<p>Open your preferred browser and browse to this url:&nbsp;<code><a href=\"http://IPADDRESS:8081/artifactory/\">http://IPADDRESS:8081/artifactory/</a></code>&nbsp;(replace IPADDRESS with your server's IP Address). You will see the login screen like this:</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/login.png\" alt=\"\" width=\"960\" /></p>
<p>Login with <strong>Username:</strong> &nbsp;<code>admin</code>&nbsp;and <strong>Password:</strong>&nbsp;<code>password</code>&nbsp;</p>
<p>The first thing I suggest you to do immediately after logged in is <span style=\"text-decoration: underline;\">to change your admin password to prevent furthur security issue</span>. To&nbsp;do so, browse to&nbsp;<span style=\"color: #2980b9;\"><strong>Admin -&gt; Security -&gt; Users -&gt; admin&nbsp;</strong></span>change the password to what your want.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/changepassword.png\" alt=\"\" width=\"960\" /></p>
<p>Anyway we shouldn't work with the library as admin. So we will leave the account like this and create a new one&nbsp;instead.&nbsp;Here is how to do it step-by-step.</p>
<h2 class=\"subsection-heading\">Create a&nbsp;Group</h2>
<p>Browse into&nbsp;<span style=\"color: #2980b9;\"><strong>Admin -&gt; Security -&gt; Groups</strong></span>&nbsp;and click at&nbsp;<strong>+New</strong>&nbsp;at the upper right.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/group01.jpg\" alt=\"\" width=\"960\" /></p>
<p>We are going to&nbsp;create a group of user who gain a capability to upload and download any library to/from the system. So I will name the group as <strong>\"contributors\"</strong> with description <strong>\"A group for library contributors\"</strong>.&nbsp;For the Users pane, leave it untouch.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/group02.jpg\" alt=\"\" width=\"960\" /></p>
<p>Click&nbsp;<strong>Save</strong>&nbsp;to create&nbsp;the group.</p>
<h2 class=\"subsection-heading\">Create a&nbsp;Permission</h2>
<p>Next step is to assign permissions for user in contributors group. Browse into&nbsp;<span style=\"color: #2980b9;\"><strong>Admin -&gt; Security -&gt; Permissions</strong></span>&nbsp;and click&nbsp;<strong>+New</strong>&nbsp;at the upper right.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/permission01.jpg\" alt=\"\" width=\"960\" /></p>
<p>Name the&nbsp;Permission as&nbsp;<strong>Contribute to Anything</strong>&nbsp;and check both&nbsp;<strong>Any Local Repository</strong>&nbsp;and&nbsp;<strong>Any Remote Repository</strong>&nbsp;box to gain an access to any repository in the system to the <em>contributors</em>.&nbsp;Click&nbsp;<strong>Next.</strong></p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/permission03.jpg\" alt=\"\" width=\"960\" /></p>
<p>In&nbsp;Groups tab, add&nbsp;<strong>contributors</strong>&nbsp;to the right area and <strong>assign the permission</strong>&nbsp;like below. Click&nbsp;<strong>Save &amp; Finish.</strong></p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/permission04.jpg\" alt=\"\" width=\"960\" /></p>
<p>Permissions are now&nbsp;assigned to the contributors group.</p>
<h2 class=\"subsection-heading\">Create a new&nbsp;User Account</h2>
<p>The last step is to create a new user account with contributors permission assigned. Click at&nbsp;<strong>+New</strong>&nbsp;at the upper right of&nbsp;<span style=\"color: #2980b9;\"><strong>Admin -&gt; Security -&gt; Users</strong></span> page<span style=\"color: #2980b9;\"><strong>.</strong></span></p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/user01.jpg\" alt=\"\" width=\"960\" /></p>
<p>Enter<strong>&nbsp;Username</strong>, <strong>Password</strong>&nbsp;and&nbsp;<strong>Email Address</strong>. In&nbsp;<strong>Related Groups</strong>&nbsp;area, please add <em>only</em>&nbsp;<strong>contributors</strong>&nbsp;group to the right pane.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/user03.jpg\" alt=\"\" width=\"960\" /></p>
<p>Click&nbsp;Save and ... done ! We now got an account with the proper permission.</p>
<p>If you want to create more user account after this with the same access, you could do it by creating a new user and add it to the contributors group.</p>
<p>But if you want to create a user account with a read-only access. <strong>readers</strong>&nbsp;is the group you need to assign to that account in&nbsp;this case.</p>
<h2 class=\"subsection-heading\">Get an Encrypted Password</h2>
<p>In the next step, password is need to be used in gradle script and it's not good to use the clear text version of password. Fortunately Artifactory provides a way to use an encrypted password instead and to acquire this piece of information, you need to <span style=\"color: #d35400;\"><strong>logout from admin and login with the account created in previous step</strong></span>.</p>
<p>Once logged in, click on your username at the upper right of the page.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/encryptedpassword_01.png\" alt=\"\" width=\"960\" /></p>
<p>Enter your password and click <strong>Unlock.</strong></p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/encryptedpassword_02.png\" alt=\"\" width=\"960\" /></p>
<p>Some data will be revealed.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/encryptedpassword_03.png\" alt=\"\" width=\"960\" /></p>
<p>Copy text inside&nbsp;<strong>Encrypted Password</strong>&nbsp;box and keep it somewhere. We&nbsp;will use it in the near future.</p>
<h2 class=\"section-heading subsection-heading\">Switch&nbsp;Artifactory to&nbsp;Private mode</h2>
<p>In default settings, the repositories hosted in Artifactory are publicly&nbsp;accessible. We need to switch to Private mode and let&nbsp;only allowed user(s) to access the repository.</p>
<p>To turn on Private Mode, just simply uncheck <strong>Allow Anonymous Access</strong> in&nbsp;<span style=\"color: #2980b9;\"><strong>Admin -&gt; Security -&gt; General</strong></span>&nbsp;page.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/private.jpg\" alt=\"\" width=\"960\" /></p>
<p>Server is now configured and ready to use !</p>
<h2 class=\"section-heading\">How to upload Android library to Artifactory from&nbsp;Android Studio</h2>
<p>Now it's time to start working on&nbsp;Android Studio. To upload a library to Artifactory, we need to modify some&nbsp;gradle script. First step is to define <strong>username</strong> and <strong>encrypted&nbsp;password</strong> for the account on Artifactory set up in previous step. Since these information&nbsp;will be&nbsp;visible in the gradle script so we better put them in the file that will not be uploaded to version control. Let's put&nbsp;them into&nbsp; <code>HOME_DIR/.gradle/gradle.properties</code></p>
<p>For those who are not familiar with this file. It is a global gradle script used&nbsp;in every single gradle project's compilation step. So if we declare anything in this file, those datas will be accessible&nbsp;in Android project's gradle script as well.</p>
<p>I believe that you, developers, must know already that what the&nbsp;<strong>HOME_DIR</strong>&nbsp;is for each operating system. For&nbsp;<strong>Mac OS X</strong>&nbsp;and&nbsp;<strong>Linux</strong>, it is&nbsp;<code>~</code>&nbsp;while in&nbsp;<strong>Windows</strong>, it is&nbsp;<code>C:\\Users\\USERNAME</code>&nbsp;for&nbsp;the general case. Try to browse into that folder, you will see <code>.gradle</code> directory there. If there is not, you go to the wrong directory.</p>
<p>Create a&nbsp;<code>gradle.properties</code>&nbsp;file inside&nbsp;<code>HOME_DIR/.gradle/</code>&nbsp;directory if it doesn't exist or modify it if it does.&nbsp;Adding two lines of script like below and replace&nbsp;<strong>YOUR_USERNAME</strong> à¹à¸¥à¸° <strong>YOUR_ENCRYPTED_PASSWORD</strong>&nbsp;with your <span style=\"text-decoration: underline;\">username</span> and <span style=\"text-decoration: underline;\">encrypted password</span>&nbsp;obtaind in previous step.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\"># HOME_DIR/.gradle/gradle.properties

artifactory_username=YOUR_USERNAME
artifactory_password=YOUR_ENCRYPTED_PASSWORD</pre>
<p>Now open&nbsp;<code>build.gradle</code>&nbsp;file placed at the top level in your Android project. Add a line of <code>classpath</code> code like below.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">buildscript {
    dependencies {
        // Add this line
        classpath \"org.jfrog.buildinfo:build-info-extractor-gradle:4.0.1\"
    }
}</pre>
<p>Open <code>build.gradle</code>&nbsp;<span style=\"text-decoration: underline;\">placed&nbsp;inside your&nbsp;Library Module&nbsp;that you need to upload to Artifactory</span>. Insert two lines of code shown below at the very first line of the file.</p>
<pre class=\"brush:groovy;auto-links:false;toolbar:false\" contenteditable=\"false\">apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'</pre>
<p>And add these lines <span style=\"text-decoration: underline;\">at the end</span> of the same working file.</p>
<pre class=\"brush:groovy;auto-links:false;toolbar:false\" contenteditable=\"false\">def libraryGroupId = 'my.group.package'
def libraryArtifactId = 'thelibrary'
def libraryVersion = '1.0.0'</pre>
<p>Code shown above will result the form of dependency as&nbsp;<code>compile 'my.group.package:thelibrary:1.0.0'</code>&nbsp;when it's available on&nbsp;repository. <span style=\"color: #2980b9;\"><strong>Please feel free to change&nbsp;<span style=\"text-decoration: underline;\">libraryGroupId</span>, <span style=\"text-decoration: underline;\">libraryArtifactId</span>&nbsp;and&nbsp;<span style=\"text-decoration: underline;\">libraryVersion</span>&nbsp;to anything you want.</strong></span></p>
<p>In the same working file, add&nbsp;these lines <span style=\"text-decoration: underline;\">at the end</span> of file.</p>
<pre class=\"brush:groovy;auto-links:false;toolbar:false\" contenteditable=\"false\">publishing {
    publications {
        aar(MavenPublication) {
            groupId libraryGroupId
            version libraryVersion
            artifactId libraryArtifactId

            artifact(\"$buildDir/outputs/aar/${artifactId}-release.aar\")
        }
    }
}

artifactory {
    contextUrl = 'http://IPADDRESS:8081/artifactory'
    publish {
        repository {
            repoKey = 'libs-release-local'

            username = artifactory_username
            password = artifactory_password
        }
        defaults {
            publications('aar')
            publishArtifacts = true

            properties = ['qa.level': 'basic', 'q.os': 'android', 'dev.team': 'core']
            publishPom = true
        }
    }
}
</pre>
<p>And don't forget to change <strong>IPADDRESS</strong> to your server's IP address.</p>
<p>Well done. Now scripts are&nbsp;ready !</p>
<h2 class=\"subsection-heading\">Upload the library</h2>
<p>It is incredibly easy to upload the library. Just open <strong>Terminal</strong> inside Android Studio.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/term01.png\" alt=\"\" width=\"951\" /></p>
<p>And type to following command.</p>
<p><span style=\"color: #e67e22;\"><strong>Windows:</strong></span></p>
<pre class=\"brush:bash;auto-links:false;toolbar:false\" contenteditable=\"false\">gradlew.bat assembleRelease artifactoryPublish</pre>
<p><span style=\"color: #e67e22;\"><strong>Mac OS X &amp; Linux:</strong></span></p>
<pre class=\"brush:bash;auto-links:false;toolbar:false\" contenteditable=\"false\">./gradlew assembleRelease artifactoryPublish</pre>
<p>Let it does its job and wait until&nbsp;<span style=\"color: #2980b9;\"><strong>BUILD SUCCESSFUL</strong></span>&nbsp;is shown on the screen.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/term02.png\" alt=\"\" width=\"951\" /></p>
<p>At this step, your library is now successfully uploaded to your private Maven Repository. Congrats !</p>
<h2 class=\"subsection-heading\">Verify the upload binary</h2>
<p>Browse into&nbsp;your Artifactory control panel&nbsp;<code><a href=\"http://IPADDRESS:8081/artifactory\">http://IPADDRESS:8081/artifactory</a></code>&nbsp;and click at&nbsp;<span style=\"color: #2980b9;\"><strong>Artifacts -&gt; libs-release-local</strong></span>. You will see the library uploaded shown inside there&nbsp;with some metadata like deployer's&nbsp;username.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/verify_1.png\" alt=\"\" width=\"960\" /></p>
<p>The repository can be accessed through browser at&nbsp;<code>http://IPADDRESS:8081/artifactory/libs-release-local/</code>. Please feel free to give a check.</p>
<h2 class=\"section-heading\">Library Usage</h2>
<p>Library artifact is now ready to be used. To use it in your project, you need to declare the&nbsp;maven url that points&nbsp;to your repository's address along with the credentials inside <span style=\"text-decoration: underline;\">project level</span>&nbsp;<code>build.gradle</code>.</p>
<p>Add&nbsp;<strong>maven { ... }</strong> part of code like below: (And sure, don't forget to change IPADDRESS to your server's IP address)</p>
<pre class=\"brush:groovy;auto-links:false;toolbar:false\" contenteditable=\"false\">allprojects {
    repositories {
        jcenter()
        // Add these lines
        maven {
            url \"http://IPADDRESS:8081/artifactory/libs-release-local\"
            credentials {
                username = \"${artifactory_username}\"
                password = \"${artifactory_password}\"
            }
        }
    }
}</pre>
<p>Open&nbsp;<code>build.gradle</code>&nbsp;inside module that you want to use the library and simply add a dependency with the very familiar form.</p>
<pre class=\"brush:groovy;auto-links:false;toolbar:false\" contenteditable=\"false\">dependencies {
    compile ''my.group.package:thelibrary:1.0.0\"
}</pre>
<p>Now it's all done. You can now:</p>
<p style=\"padding-left: 30px;\">- Setup your own Maven Repository (either&nbsp;private or&nbsp;public one)</p>
<p style=\"padding-left: 30px;\">- Upload a library to repository with full user access control.</p>
<p style=\"padding-left: 30px;\">- Download a library from repository with full user access control.</p>
<p>Library distribution is now far more systematic than any other distribution method&nbsp;and it now doesn't matter how many libraries or how many version of libraries you have. Things are now well organized. =)</p>
<p>Hope that&nbsp;you will find this blog useful&nbsp;!</p>
<p>Ah ... as a gift. If this blog&nbsp;has your interest, this <a href=\"../../../blog/how-to-upload-library-to-jcenter-maven-central-as-dependency/en\" target=\"_blank\">\"How to distribute your own Android library through jCenter and Maven Central from Android Studio\"</a> might has too. If you want to upload your own library to the public standard Maven Repository like jcenter or Maven Central, that blog will show you how. And again, hope you find it useful =)</p>
<p>Cheers.</p>			") (link nil "http://inthecheesefactory.com/blog/how-to-setup-private-maven-repository/en") (pubDate nil "
				Sat, 20 Feb 2016 14:40:00 +0000			") (guid nil "http://inthecheesefactory.com/blog/how-to-setup-private-maven-repository/en")) (item nil (title nil "
				First Look at Android Emulator 2.0, the biggest and the best update yet in years			") (description nil "
				<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/blog/androidemulator2/cover.jpg\" /></p> 
<p>I believe that all Android developers would agree that the biggest thing announced in Android Dev Summit 2015 was Android Studio 2.0 and <strong>Android Emulator 2.0</strong> which was advertised that it could run and deploy the application incredibly much faster than the first revision.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/androidemulator2/fastapk.jpg\" alt=\"\" width=\"784\" height=\"441\" /></p>
<p>Few hours ago, Android development team just launched this latest emulator to the public. Let us give you a tour to this biggest update yet on Android Emulator you wouldn't wanna miss.</p>
<h2 class=\"section-heading\">Installation</h2>
<p>Let's start with the installation so we could play along with it together.</p>
<p>The first thing to be installed is <strong>Android Studio 2.0 Preview 3b</strong> which is now available on Canary Channel. To switch the update channel to Canary, just click at <strong>Help -&gt; Check for Update...</strong> and change the top-most dropdown menu to <strong>Canary Channel</strong>. After that, check for the update again and Android Studio 2.0 will be installed on your machine.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/androidemulator2/canary.png\" alt=\"\" width=\"439\" height=\"330\" /></p>
<p>Android Emulator 2.0 comes together with Android SDK Tools v25 and newer. So the next thing you have to install is&nbsp;<strong>Android SDK Tools v25 rc1</strong>&nbsp;which could be done through <em>SDK Manager</em>. Or if there is the newer version available while you are reading this blog, update to the latest one would be always the best scenario.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/androidemulator2/asdktools.png\" alt=\"\" width=\"648\" height=\"311\" /></p>
<p>And the reason behind its speed is the latest version of <strong>Intel x86 Emulator Accelerator (HAXM installer).&nbsp;</strong>Just download the latest version available from the Extras section.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/androidemulator2/haxminstaller.png\" alt=\"\" width=\"646\" height=\"288\" /></p>
<p>As mentioned in the name, what that SDK Manager downloads is just an <em>installer.</em>&nbsp;It doesn't install the HAXM for you yet. You need to manually install it yourself by browsing into <strong>Android SDK Folder</strong>&nbsp;and follow with&nbsp;<code>extras/intel/Hardware_Accelerated_Execution_Manager</code>.&nbsp;You will see an installer laying down inside. Just do what you have to do.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/androidemulator2/haxminstaller2.png\" alt=\"\" width=\"767\" height=\"248\" /></p>
<p>The latest one to download is&nbsp;<strong>Android 5.0 - Google APIs Intel x86 Atom System Image rev 10</strong>&nbsp;to use it as an Emulator's ROM image.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/androidemulator2/gapisrev10.png\" alt=\"\" width=\"641\" height=\"291\" /></p>
<p>All done ! It's now ready&nbsp;!</p>
<h2 class=\"section-heading\">Give it a try</h2>
<p>Let me skip the Android Virtual Device creating part since I believe that every single Android developer could do that yourself through AVD Manager available inside Android Studio 2.0</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/androidemulator2/avdmanager.png\" alt=\"\" width=\"784\" height=\"346\" /></p>
<p>Please note that there is a new experimental feature available in this part. You could assign the number of CPU's Core for the emulator unless it will be automatically set to the default value, 1.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/androidemulator2/cpucores.png\" alt=\"\" width=\"571\" height=\"230\" /></p>
<p>Now it's a good time to launch a created AVD.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/androidemulator2/em2.jpg\" alt=\"\" width=\"784\" height=\"469\" /></p>
<p>Woo hooooo, Android Emulator 2.0 ! The change is obvious. You could see the new toolbar on the right side of Emulator screen.</p>
<p>After an hour of playing around, <strong>I found that Emulator started and operated much faster than the&nbsp;previous version</strong>. Anyway, I must say that I&nbsp;<em>feel</em>&nbsp;that it is still a little bit slower than Genymotion. But well, it is acceptable and very satisfiable.</p>
<p>There are quite a ton of new features available. The most obvious one is you could now easily resize the window!</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/androidemulator2/shrink.jpg\" alt=\"\" width=\"784\" height=\"468\" /></p>
<p>For those extra features just like GPS simulation, Fingerprint, Phone Calling, SMS Sending and etc which we have to do through the command line in the previous version is now available in GUI&nbsp;version. 100x easier I must say!</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/androidemulator2/settings.png\" alt=\"\" width=\"784\" height=\"602\" /></p>
<p>These extended controls are one of the most impressive features for me in this new update since it is very convenient and totally complete. And well ... it's FREE.</p>
<p>Now let's test the speed of apk deployment. I found that it could be transferred at the incredible speed, <strong>50MB/s</strong>.</p>
<pre class=\"brush:bash;auto-links:false;toolbar:false\" contenteditable=\"false\">$ adb -s emulator-5554 install app-release.apk
        pkg: /data/local/tmp/app-release.apk
Success
51410 KB/s (6160590 bytes in 0.117s)
</pre>
<p>It's 10x faster than the transfer speed to Samsung Galaxy Note 3 LTE which could make it at 5MB/s. At this speed, it could significantly increase the speed of development as well.</p>
<p>In conclusion, Android Emulator 2.0 is really&nbsp;satisfiable. <span style=\"text-decoration: underline;\">I would consider switching my primary emulator from Genymotion to Android Emulator 2.0 by now since the completeness on its feature&nbsp;and it is also FREE of charge!</span></p>
<p>However, some weakness still persist. <span style=\"color: #e74c3c;\"><strong>It consumes quite a lot of memory.</strong></span></p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/androidemulator2/memoryconsumption.png\" alt=\"\" width=\"646\" height=\"221\" /></p>
<p>But it still works quite fine on 8GB+ RAM machine.</p>
<p>Generally, I am so happy with this large update. Please give it a try and feel free to share your opinion over this new big thing!</p>
<p>Have a nice weekend =)</p>			") (link nil "http://inthecheesefactory.com/blog/first-look-at-android-emulator-2.0/en") (pubDate nil "
				Fri, 11 Dec 2015 14:11:00 +0000			") (guid nil "http://inthecheesefactory.com/blog/first-look-at-android-emulator-2.0/en")) (item nil (title nil "
				Retrofit 2.0: The biggest update yet on the best HTTP Client Library for Android			") (description nil "
				<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/blog/retrofit2/coverretrofit2black.png\" /></p> 
<p>Retrofit is one of the most popular HTTP Client Library for Android as a result of&nbsp;its simplicity and its great&nbsp;performance compare to the others.</p>
<p>Anyway its weakness is there is no any straight way to&nbsp;cancel the ongoing transaction in Retrofit 1.x. If you want to do that you have to call it on Thread and kill it&nbsp;manually which is quite hard to manage.</p>
<p>Square gave a promise years ago that this feature will be available on Retrofit 2.0 but years passed, there is still no updated news on this.</p>
<p>Until last week,&nbsp;Retrofit 2.0 just passed its Release Candidate stage to Beta 1&nbsp;and has&nbsp;been publicly launched to everyone. After giving it a try, I must say that I am quite impressed on its new pattern and its new features. There are a lot of changes in the&nbsp;good way.&nbsp;I will describe those in this article. Let's get started !</p>
<h2 class=\"section-heading\">Same Old Package with New Version</h2>
<p>If you want to import Retrofit 2.0 into your project, add this line to your <code>build.gradle</code> in <code>dependencies</code>&nbsp;section.</p>
<pre class=\"brush:groovy;auto-links:false;toolbar:false\" contenteditable=\"false\">compile 'com.squareup.retrofit2:retrofit:2.0.0-beta4'</pre>
<p>Sync your gradle files and you can now use Retrofit 2.0 =)</p>
<p>And as you see, Retrofit 2 package name is not the same as the previous version. It's now&nbsp;<code>com.squareup.retrofit2</code>.</p>
<h2 class=\"section-heading\">New Service Declaration. No more Synchronous and&nbsp;Asynchronous.</h2>
<p>In regard to service interface declaration in Retrofit 1.9, if you want to declare a synchronous function, you have to declare like this:</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">/* Synchronous in Retrofit 1.9 */

public interface APIService {

    @POST(\"/list\")
    Repo loadRepo();

}</pre>
<p>And you have to declare an asynchronous&nbsp;one like this:</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">/* Asynchronous in Retrofit 1.9 */

public interface APIService {

    @POST(\"/list\")
    void loadRepo(Callback&lt;Repo&gt; cb);

}</pre>
<p>But on <strong>Retrofit 2.0</strong>, it is far more simple since you can declare with only just a single&nbsp;pattern.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">import retrofit.Call;

/* Retrofit 2.0 */

public interface APIService {

    @POST(\"/list\")
    Call&lt;Repo&gt; loadRepo();

}</pre>
<p>The way to call a created service is also changed into the same pattern&nbsp;as <a href=\"http://square.github.io/okhttp/\" target=\"_blank\">OkHttp</a>.&nbsp;To call is as a synchronous request, just call&nbsp;<code>execute</code>&nbsp;or&nbsp;call&nbsp;<code>enqueue</code>&nbsp;to make&nbsp;an asynchronous request.</p>
<p><strong>Synchronous Request</strong></p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">// Synchronous Call in Retrofit 2.0

Call&lt;Repo&gt; call = service.loadRepo();
Repo repo = call.execute();</pre>
<p>The source code above will block the thread so you <em>cannot</em> call it on Main Thread in Android or you will face <code>NetworkOnMainThreadException</code>. If you want to call <code>execute</code> method, you have to do it on background thread.</p>
<p><strong>Asynchronous Request</strong></p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">// Asynchronous Call in Retrofit 2.0

Call&lt;Repo&gt; call = service.loadRepo();
call.enqueue(new Callback&lt;Repo&gt;() {
    @Override
    public void onResponse(Response&lt;Repo&gt; response) {
        // Get result Repo from response.body()
    }

    @Override
    public void onFailure(Throwable t) {

    }
});
</pre>
<p>The above code will make a request in the background thread and retreive a result as an Object which you can extract from response with <code>response.body()</code> method. Please note that those call methods:&nbsp;<code>onResponse</code> and <code>onFailure</code>&nbsp;will be called in <strong>Main Thread</strong>.</p>
<p>I suggest you to use <code>enqueue</code>. It fits Android OS behavior best.</p>
<h2 class=\"section-heading\">Ongoing Transaction Cancellation</h2>
<p>The reason behind the service pattern changing to&nbsp;<code>Call</code>&nbsp;is to make the ongoing transaction be able to be cancelled.&nbsp;To do so, just simply call&nbsp;<code>call.cancel()</code></p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">call.cancel();</pre>
<p>The transaction would be cancelled shortly after that. Easy, huh? =D</p>
<h2 class=\"section-heading\">New Service Creation. Converter is now excluded from Retrofit.</h2>
<p>In Retrofit 1.9, GsonConverter is included in the package and is automatically initiated upon <code>RestAdapter</code> creation. As a result, the json result from server would be automatically parsed to the defined Data Access Object (DAO).</p>
<p>But in Retrofit 2.0, Converter is <em><strong>not</strong></em> included in the package anymore.&nbsp;You need to plug a Converter in yourself or Retrofit will be able to accept only the String result. As a result,&nbsp;Retrofit 2.0 doesn't depend on Gson anymore.</p>
<p>If you want to accept json result and make it parse into DAO, you have to summon Gson Converter as a separate dependency.</p>
<pre class=\"brush:groovy;auto-links:false;toolbar:false\" contenteditable=\"false\">compile 'com.squareup.retrofit:converter-gson:2.0.0-beta2'</pre>
<p>And plug it in through&nbsp;<code>addConverterFactory</code>. Please note that <code>RestAdapter</code> is now also renamed to <code>Retrofit</code>.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">        Retrofit retrofit = new Retrofit.Builder()
                .baseUrl(\"http://api.nuuneoi.com/base/\")
                .addConverterFactory(GsonConverterFactory.create())
                .build();

        service = retrofit.create(APIService.class);
</pre>
<p>Here is the list of official Converter modules provided by Square. Choose one that fits your requirement best.</p>
<p style=\"padding-left: 30px;\"><strong>Gson:</strong> <span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt;\">com.squareup.retrofit:converter-gson</span><br /><strong>Jackson:</strong> <span style=\"font-size: 12pt; font-family: 'courier new', courier, monospace;\">com.squareup.retrofit:converter-jackson</span><br /><strong>Moshi:</strong> <span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt;\">com.squareup.retrofit:converter-moshi</span><br /><strong>Protobuf:</strong> <span style=\"font-size: 12pt; font-family: 'courier new', courier, monospace;\">com.squareup.retrofit:converter-protobuf</span><br /><strong>Wire:</strong> <span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt;\">com.squareup.retrofit:converter-wire</span><br /><strong>Simple XML:</strong> <span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt;\">com.squareup.retrofit:converter-simplexml</span></p>
<p>You also can create a custom converter yourself by implementing a <a href=\"https://github.com/square/retrofit/blob/master/retrofit/src/main/java/retrofit/Converter.java\" target=\"_blank\">Converter.Factory</a> interface.</p>
<p>I support this new pattern. It makes Retrofit more clear what it&nbsp;actually does.</p>
<h2 class=\"section-heading\">Custom Gson Object</h2>
<p>In case you need to adjust some format in json, for example, Date Format. You can do that by creating a Gson object and pass it to&nbsp;<code>GsonConverterFactory.create()</code></p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">        Gson gson = new GsonBuilder()
                .setDateFormat(\"yyyy-MM-dd'T'HH:mm:ssZ\")
                .create();

        Retrofit retrofit = new Retrofit.Builder()
                .baseUrl(\"http://api.nuuneoi.com/base/\")
                .addConverterFactory(GsonConverterFactory.create(gson))
                .build();

        service = retrofit.create(APIService.class);
</pre>
<p>Done.</p>
<h2 class=\"section-heading\">New URL resolving concept. The&nbsp;same way as&nbsp;&lt;a href&gt;</h2>
<p>Retrofit 2.0 comes with new URL&nbsp;resolving concept. Base URL and @Url have&nbsp;not&nbsp;just simply been combined together but have been resolved&nbsp;the same way as what&nbsp;<code>&lt;a href=\"...\"&gt;</code>&nbsp;does instead.&nbsp;Please take a look for the examples&nbsp;below for the&nbsp;clarification.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/retrofit2/apiservice1.png\" alt=\"\" width=\"723\" height=\"222\" /></p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/retrofit2/apiservice2.png\" alt=\"\" width=\"723\" height=\"222\" /></p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/retrofit2/apiservice3.png\" alt=\"\" width=\"723\" height=\"222\" /></p>
<p>Here is my suggestion on the new URL declaration pattern in Retrofit 2.0:</p>
<p style=\"padding-left: 30px;\">- <strong>Base URL</strong>: always ends with&nbsp;/</p>
<p style=\"padding-left: 30px;\">- <strong>@Url</strong>: <span style=\"text-decoration: underline;\">DO NOT</span>&nbsp;start with /</p>
<p>for instance</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">public interface APIService {

    @POST(\"user/list\")
    Call&lt;Users&gt; loadUsers();

}

public void doSomething() {
    Retrofit retrofit = new Retrofit.Builder()
            .baseUrl(\"http://api.nuuneoi.com/base/\")
            .addConverterFactory(GsonConverterFactory.create())
            .build();

    APIService service = retrofit.create(APIService.class);
}</pre>
<p><code>loadUsers</code> from code above will fetch data from&nbsp;<strong><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt;\">http://api.nuuneoi.com/base/user/list</span></strong></p>
<p>Moreover we also can declare a full URL in&nbsp;<code>@Url</code>&nbsp;in Retrofit 2.0:</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">public interface APIService {

    @POST(\"http://api.nuuneoi.com/special/user/list\")
    Call&lt;Users&gt; loadSpecialUsers();

}</pre>
<p>Base URL will be ignored for this case.</p>
<p>You will see that there is a major change on URL resolving. It is totally different from the previous version. If you want to move your code to Retrofit 2.0, don't forget to fix those URLs part of code.</p>
<h2 class=\"section-heading\">OkHttp&nbsp;is now required</h2>
<p>OkHttp is set to&nbsp;optional in Retrofit 1.9. If you want to let Retrofit use OkHttp as HTTP connection interface, you have to manually include <span style=\"font-family: 'courier new', courier, monospace;\">okhttp</span>&nbsp;as a dependency yourself.</p>
<p>But in Retrofit 2.0, OkHttp is now required and is automatically set as a dependency. The code below is snapped from pom file of Retrofit 2.0. You have no need to do anything.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;com.squareup.okhttp&lt;/groupId&gt;
      &lt;artifactId&gt;okhttp&lt;/artifactId&gt;
    &lt;/dependency&gt;

    ...
  &lt;/dependencies&gt;</pre>
<p>OkHttp is automatically used as a HTTP interface in Retrofit 2.0 in purpose to&nbsp;enabling the OkHttp's&nbsp;<code>Call</code>&nbsp;pattern as decribed above.</p>
<h2 class=\"section-heading\">onResponse is still called eventhough there is a problem with the response</h2>
<p>In Retrofit 1.9, if the fetched response couldn't be parsed into the defined Object, <code>failure</code> will be called. But in Retrofit 2.0, whether the response is be able to parse or not, <code>onResponse</code> will be always called. But in the case the result couldn't be parsed into the Object, <code>response.body()</code> will return as null. Don't forget to handle for the case.</p>
<p>If there is any problem&nbsp;on the response, for example, 404 Not Found. <code>onResponse</code> will also be called. You can retrieve&nbsp;the error body&nbsp;from <code>response.errorBody().string()</code>.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/retrofit2/response.jpg\" alt=\"\" width=\"784\" height=\"245\" /></p>
<p>Response/Failure logic is quite different from Retrofit 1.9. Be careful on handling for all the cases if you decide to move to Retrofit 2.0.</p>
<h2 class=\"section-heading\">Missing INTERNET Permission cause&nbsp;SecurityException throwing</h2>
<p>In&nbsp;Retrofit 1.9, if you forget to add INTERNET permission into your <code>AndroidManifest.xml</code> file. Asynchronous request will immediately fall into <code>failure</code> callback method with&nbsp;<strong>PERMISSION DENIED</strong>&nbsp;error message.&nbsp;None of&nbsp;exception is thrown.</p>
<p>But in Retrofit 2.0, when you call&nbsp;<code>call.enqueue</code> or&nbsp;<code>call.execute</code>,&nbsp;<code>SecurityException</code>&nbsp;will be immediately thrown and may cause crashing if you do not handle the case with&nbsp;try-catch.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/retrofit2/sec.png\" alt=\"\" width=\"784\" height=\"347\" /></p>
<p>The behavior is just like the same when you manually call&nbsp;<code>HttpURLConnection</code>. Anyway this issue is not a big deal since when INTERNET permission is added into AndroidManifest.xml, there is nothing to concern anymore.</p>
<h2 class=\"section-heading\">Use an&nbsp;Interceptor from&nbsp;OkHttp</h2>
<p>On Retrofit 1.9 you could use&nbsp;<code>RequestInterceptor</code>&nbsp;to intercept a Request but it is already removed on&nbsp;Retrofit 2.0 since the HTTP connection&nbsp;layer has been moved to OkHttp.</p>
<p>As a result, we have to switch to an&nbsp;<code>Interceptor</code>&nbsp;from&nbsp;<strong>OkHttp</strong>&nbsp;from now on. First you have to create a <code>OkHttpClient</code> object with an Interceptor like this:</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">        OkHttpClient client = new OkHttpClient();
        client.interceptors().add(new Interceptor() {
            @Override
            public Response intercept(Chain chain) throws IOException {
                Response response = chain.proceed(chain.request());

                // Do anything with response here

                return response;
            }
        });
</pre>
<p>And the pass the created <code>client</code> into Retrofit's Builder chain.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">        Retrofit retrofit = new Retrofit.Builder()
                .baseUrl(\"http://api.nuuneoi.com/base/\")
                .addConverterFactory(GsonConverterFactory.create())
                .client(client)
                .build();
</pre>
<p>That's all.</p>
<p>To learn more about what OkHttp Interceptor can do, please&nbsp;browse into&nbsp;<a href=\"https://github.com/square/okhttp/wiki/Interceptors\" target=\"_blank\">OkHttp Interceptors</a>.</p>
<h2 class=\"section-heading\">Certificate Pinning</h2>
<p>As same as an Interceptor, creation of an OkHttp client instance is required if you want to apply a Certificate Pinning with your connection. Here is the example code snippet. First, defines an OkHttp client instance with Certificate Pinning information:</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">OkHttpClient client = new OkHttpClient.Builder()
        .certificatePinner(new CertificatePinner.Builder()
                .add(\"publicobject.com\", \"sha1/DmxUShsZuNiqPQsX2Oi9uv2sCnw=\")
                .add(\"publicobject.com\", \"sha1/SXxoaOSEzPC6BgGmxAt/EAcsajw=\")
                .add(\"publicobject.com\", \"sha1/blhOM3W9V/bVQhsWAcLYwPU6n24=\")
                .add(\"publicobject.com\", \"sha1/T5x9IXmcrQ7YuQxXnxoCmeeQ84c=\")
                .build())
        .build();
</pre>
<p>Assign&nbsp;the OkHttp client created within Retrofit builder chain.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">Retrofit retrofit = new Retrofit.Builder()
        .baseUrl(\"http://api.nuuneoi.com/base/\")
        .addConverterFactory(GsonConverterFactory.create())
        .client(client)
        .build();</pre>
<p>For more information about sha1 hash for Certificate Pinning ... Google would help a lot, just simple search for it how to achieve that piece of data.</p>
<h2 class=\"section-heading\">RxJava Integration with CallAdapter</h2>
<p>Beside declaring interface with <code>Call&lt;T&gt;</code>&nbsp;pattern, we also could declare our own type as well, for example,&nbsp;<code>MyCall&lt;T&gt;</code>. The mechanic is called \"<code>CallAdapter</code>\"&nbsp;which is available on Retrofit 2.0</p>
<p>There is some ready-to-use CallAdapter module available from Retrofit team. One of the most popular module might be CallAdapter for <strong>RxJava</strong> which will return as <code>Observable&lt;T&gt;</code>. To use it, two modules must be included as&nbsp;your project's&nbsp;dependencies.</p>
<pre class=\"brush:groovy;auto-links:false;toolbar:false\" contenteditable=\"false\">    compile 'com.squareup.retrofit:adapter-rxjava:2.0.0-beta2'
    compile 'io.reactivex:rxandroid:1.0.1'
</pre>
<p>Sync Gradle and add&nbsp;<code>addCallAdapterFactory</code>&nbsp;in Retrofit Builder chain like this:</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">        Retrofit retrofit = new Retrofit.Builder()
                .baseUrl(\"http://api.nuuneoi.com/base/\")
                .addConverterFactory(GsonConverterFactory.create())
                .addCallAdapterFactory(RxJavaCallAdapterFactory.create())
                .build();
</pre>
<p>Your Service interface is now able to return&nbsp;as&nbsp;<code>Observable&lt;T&gt;</code>!</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">public interface APIService {

    @POST(\"list\")
    Call&lt;DessertItemCollectionDao&gt; loadDessertList();

    @POST(\"list\")
    Observable&lt;DessertItemCollectionDao&gt; loadDessertListRx();

}
</pre>
<p>You can use it in the exact same RxJava way. In addition, if you want to let code inside subscribe part called on Main Thread, <code>observeOn(AndroidSchedulers.mainThread())</code>&nbsp;is needed to be added to&nbsp;the chain.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">        Observable&lt;DessertItemCollectionDao&gt; observable = service.loadDessertListRx();

        observable.subscribeOn(Schedulers.io())
            .observeOn(AndroidSchedulers.mainThread())
            .unsubscribeOn(Schedulers.io())
            .subscribe(new Subscriber&lt;DessertItemCollectionDao&gt;() {
                @Override
                public void onCompleted() {
                    Toast.makeText(getApplicationContext(),
                            \"Completed\",
                            Toast.LENGTH_SHORT)
                        .show();
                }

                @Override
                public void onError(Throwable e) {
                    Toast.makeText(getApplicationContext(),
                            e.getMessage(),
                            Toast.LENGTH_SHORT)
                        .show();
                }

                @Override
                public void onNext(DessertItemCollectionDao dessertItemCollectionDao) {
                    Toast.makeText(getApplicationContext(),
                            dessertItemCollectionDao.getData().get(0).getName(),
                            Toast.LENGTH_SHORT)
                        .show();
                }
            });</pre>
<p>Done ! I believe that&nbsp;RxJava fan is very satisfying with this change =D</p>
<h2 class=\"section-heading\">Conclusion</h2>
<p>There are also some other changes, you can check for the official <a href=\"https://github.com/square/retrofit/blob/master/CHANGELOG.md\" target=\"_blank\">Change Log</a>&nbsp;for more details. Anyway&nbsp;I believe that I have already covered the main issues in this article.</p>
<p>You may be curious that is it time to move to Retrofit 2.0 yet? Since it is still in the&nbsp;beta stage so you may want to stay with 1.9 first except you are an early adopter like me, Retrofit 2.0 works pretty&nbsp;great and there is no any bug found yet based on&nbsp;my own&nbsp;experiment.</p>
<p>Please note that Retrofit 1.9 official document was already removed from Square github website. I suggest you to start studying for Retrofit 2.0 right now and consider moving to the latest version in very near future.&nbsp;=D</p>			") (link nil "http://inthecheesefactory.com/blog/retrofit-2.0/en") (pubDate nil "
				Sun, 06 Sep 2015 05:33:00 +0000			") (guid nil "http://inthecheesefactory.com/blog/retrofit-2.0/en")) (item nil (title nil "
				Mirror android phone's screen and gain full control on computer with Vysor			") (description nil "
				<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/blog/vysor/vysordone.jpg\" /></p> 
<p>Looking for a tool that could mirror non-rooted android phone's screen and allow user to gain a full control on&nbsp;computer? Here is a good news. A new wonderful just-released application called Vysor could do the job for you! I gave it a try already and I must say that I am quite impressive on what it can do.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/vysor/vysordone.jpg\" alt=\"\" /></p>
<p>First of all, Vysor is a Chrome Application so you need to install&nbsp;<a href=\"http://www.google.com/chrome/\" target=\"_blank\">Google Chrome</a>&nbsp;first before going on.</p>
<p>Next, just&nbsp;simply install&nbsp;<a href=\"https://chrome.google.com/webstore/detail/vysor-beta/gidgenkbbabolejbgbpnhbimgjbffefm\" target=\"_blank\">Vysor Chrome Extensions</a>.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/vysor/vysorextensions_1.jpg\" alt=\"\" width=\"560\" height=\"355\" /></p>
<p>Press Launch App and then&nbsp;Vysor&nbsp;will appear. Please note that its look and its workflow might be different by platform.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/vysor/vysorbeta.jpg\" alt=\"\" width=\"560\" height=\"448\" /></p>
<p>Now pick your phone up and enable <a href=\"http://www.kingoapp.com/root-tutorials/how-to-enable-usb-debugging-mode-on-android.htm\" target=\"_blank\">USB Debugging</a>&nbsp;since phone and computer needs ADB for communication.</p>
<p><strong>Find Devices</strong>&nbsp;and choose one that appear.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/vysor/finddevices.jpg\" alt=\"\" width=\"560\" height=\"498\" /></p>
<p>If your phone pop up a dialog like below. Press OK to allow USB Debugging. If you accidentally press Cancel, just remove and plug a USB cable once again.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/vysor/allow.jpg\" alt=\"\" width=\"600\" height=\"600\" /></p>
<p>If your phone ask you to install an application called Vysor, do it. Wait for some second and your phone screen will appear on&nbsp;Vysor ... Done!</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/vysor/vysordone.jpg\" alt=\"\" width=\"783\" height=\"462\" /></p>
<p>You can control everything through your computer screen with Keyboard and Mouse: <strong>Left Click = Click</strong>, <strong>Right Click = Back</strong> and <strong>Middle Click = Home</strong></p>
<p>From the experiment I found that framerate is not so high,&nbsp;there is still&nbsp;some delay and image&nbsp;will lose the&nbsp;quality if screen's details are&nbsp;changed too much&nbsp;before getting better&nbsp;within few seconds. Although it is not perfect but I must say that it is good enough for real use.</p>
<p>However I found that it is pretty useful. And since it is a Chrome Application so it could be installed on any platform such as Windows, Mac OS X, Linux and also Chromebook. Please give it a try. It worths time spent. =D</p>			") (link nil "http://inthecheesefactory.com/blog/mirror-android-phone-screen-gain-full-control-with-vysor/en") (pubDate nil "
				Thu, 27 Aug 2015 12:12:00 +0000			") (guid nil "http://inthecheesefactory.com/blog/mirror-android-phone-screen-gain-full-control-with-vysor/en")) (item nil (title nil "
				Everything every Android Developer must know about new Android's Runtime Permission			") (description nil "
				<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/blog/mpermission/coverpermission.jpg\" /></p> 
<p>Android M's name was just announced officially days ago. The final version is almost there&nbsp;and would be released not so long.</p>
<p>Although Android is being keep developed&nbsp;but the latest update to Android M is totally different since there is some major change that would change everything like new <strong>Runtime Permission</strong>. Surprisingly it is not much talked about in Android Developer community even though it is extremely important and may cause some&nbsp;big trouble in the near future.</p>
<p>That's the reason why I&nbsp;decide to blog about this topic today. Everything you need&nbsp;to know about this new Runtime Permission including how to implement it in your code. Let's do it before it's too late.</p>
<h2 class=\"section-heading\">The New Runtime Permission</h2>
<p>Android's permission system is one of the biggest security concern all along since those permissions are&nbsp;asked for at install time. Once installed, the application will be able to access all of things granted without any user's acknowledgement what exactly application does with the permission.</p>
<p>No surprise why there are so many bad guys trying to collect user's personal data through this security weakness and use it in the bad way.</p>
<p>Android team also know&nbsp;this concern. 7 year passed, finally permission system is redesigned. <strong><span style=\"color: #c0392b;\">In Android 6.0 Marshmallow, application will not be granted any permission at installation time. Instead, application has to ask user for a permission one-by-one at runtime.</span></strong></p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/mpermission/runtimepermission.jpg\" alt=\"\" width=\"784\" height=\"457\" /></p>
<p>Please note that permission request dialog shown above will <em>not</em>&nbsp;launch automatically. Developer has to call for it manually. In the case that developer&nbsp;try to call some function&nbsp;that requires a permission which&nbsp;user has not granted yet, the function&nbsp;will suddenly throw an Exception which will lead to the application crashing.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/mpermission/runtimepermissioncrash.jpg\" alt=\"\" width=\"784\" height=\"457\" /></p>
<p>Besides, user is also&nbsp;able to revoke the granted permission anytime through phone's Settings application.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/mpermission/permissionsrevoke.jpg\" alt=\"\" width=\"510\" height=\"510\" /></p>
<p>You might already feel like there is some cold wind blowing through your arms ... If you are an Android Developer, you will suddenly know that programming logic is totally changed. You cannot just call a function to do the job like previous but you have to check for the permission for every single feature or your application will just simply crash !</p>
<p>Correct. I would not spoil you that it is easy. Although it is a great thing&nbsp;for user but it is truly nightmare for us developer. We have to take coding to the next level or it will surely have a problem in both short-term and long-term.</p>
<p>Anyway this new Runtime Permission will work like described only when we set the application's <strong>targetSdkVersion to 23</strong> which mean it is declared that application&nbsp;has already been tested on API Level 23. And this feature will work only on Android 6.0 Marshmallow. The same app will run with same old behavior on pre-Marshmallow device.</p>
<h2 class=\"section-heading\">What happened to the application that has already been launched?</h2>
<p>This new permission system may cause you some panic right now. <strong>\"Hey ! What's about my application that launched 3 years ago. If it is installed on Android 6.0 device, does this behavior also applied? Will&nbsp;my application also crash?!?\"</strong></p>
<p>Don't worry. Android team has already thought about it. <strong>If the application's targetSdkVersion is set to less than 23. It will be assumed that application is not tested with new&nbsp;permission system yet and will switch to the same old behavior: user has to accept every single permission at install time and they will be all granted once installed !</strong></p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/mpermission/mpermission22_1.jpg\" alt=\"\" width=\"510\" height=\"510\" /></p>
<p>As a result, application will run perfectly like&nbsp;previous. <strong>Anyway&nbsp;please note that user still can revoke a permission after that !</strong>&nbsp;Although&nbsp;Android 6.0 warn the user&nbsp;when they try to do that but they can revoke anyway.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/mpermission/mpermission22denyperm_1.jpg\" alt=\"\" width=\"510\" height=\"510\" /></p>
<p>Next question in your head right now. So will my application crash?</p>
<p><span style=\"color: #2980b9;\">Such a kindness sent from god delivered through the Android team. When we call a function that requires a permission user revoked on application with&nbsp;targetSdkVersion less than 23, no any&nbsp;Exception will be thrown. Instead it will just simply do nothing. For the function that return value, it will return either <span style=\"text-decoration: underline;\">null</span> or <span style=\"text-decoration: underline;\">0</span>&nbsp;depends on the case.</span></p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/mpermission/targetsdkversion2223.jpg\" alt=\"\" width=\"784\" height=\"417\" /></p>
<p>But don't be too happy. Although application would not be crashed from calling a function. It may still can&nbsp;crash from what&nbsp;that application&nbsp;does next with those returned value.</p>
<p>Good news&nbsp;(at least for now)&nbsp;is these cases may rarely occur since this permission revoking feature is quite new and I believe that just few user will&nbsp;do it. In case they do, they have to accept the result.</p>
<p>But in the long run, I believe that there will be millions of users who&nbsp;turn some permission off. Letting our application not to work&nbsp;perfectly on new device is not acceptable.</p>
<p>To make it work perfectly, you&nbsp;better modify your&nbsp;application to support this new permission system and I suggest you to start&nbsp;doing it right now !</p>
<p>For that&nbsp;application which source code is not successfully modified to support Runtime Permission, DO NOT release it&nbsp;with targetSdkVersion 23 or it will cause you a trouble. Move the targetSdkVersion to 23 only when you pass all the test.</p>
<p><span style=\"color: #d35400;\"><em>Warning: Right now when you create a new project in Android Studio. targetSdkVersion will be automatically set to the latest version, 23. If you are not ready to make your application fully support the Runtime Permission, I suggest you to step down&nbsp;the targetSdkVersion to 22 first.</em></span></p>
<h2 class=\"section-heading\">Automatically granted permissions</h2>
<p>There is some permission that will be automatically granted at install time and will not be able to revoke. We call it <a href=\"https://developer.android.com/preview/features/runtime-permissions.html#normal\" target=\"_blank\">Normal Permission</a> (PROTECTION_NORMAL). Here is the full list of them:</p>
<p style=\"padding-left: 30px;\"><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.ACCESS_LOCATION_EXTRA_COMMANDS</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.ACCESS_NETWORK_STATE</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.ACCESS_NOTIFICATION_POLICY</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.ACCESS_WIFI_STATE</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.ACCESS_WIMAX_STATE</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.BLUETOOTH</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.BLUETOOTH_ADMIN</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.BROADCAST_STICKY</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.CHANGE_NETWORK_STATE</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.CHANGE_WIFI_MULTICAST_STATE</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.CHANGE_WIFI_STATE</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.CHANGE_WIMAX_STATE</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.DISABLE_KEYGUARD</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.EXPAND_STATUS_BAR</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.FLASHLIGHT</span><br /><span style=\"text-decoration: line-through;\"><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085; text-decoration: line-through;\">android.permission.GET_ACCOUNTS</span></span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.GET_PACKAGE_SIZE</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.INTERNET</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.KILL_BACKGROUND_PROCESSES</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.MODIFY_AUDIO_SETTINGS</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.NFC</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.READ_SYNC_SETTINGS</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.READ_SYNC_STATS</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.RECEIVE_BOOT_COMPLETED</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.REORDER_TASKS</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.REQUEST_INSTALL_PACKAGES</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.SET_TIME_ZONE</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.SET_WALLPAPER</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.SET_WALLPAPER_HINTS</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.SUBSCRIBED_FEEDS_READ</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.TRANSMIT_IR</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.USE_FINGERPRINT</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.VIBRATE</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.WAKE_LOCK</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.WRITE_SYNC_SETTINGS</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">com.android.alarm.permission.SET_ALARM</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">com.android.launcher.permission.INSTALL_SHORTCUT</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">com.android.launcher.permission.UNINSTALL_SHORTCUT</span></p>
<p>Just simply declare those permissions in <code>AndroidManifest.xml</code>&nbsp;and it will work just fine. No need to check for the permission listed above since it&nbsp;couldn't be revoked.</p>
<h2 class=\"section-heading\">Make your application&nbsp;support new Runtime Permission</h2>
<p>Now it's time to make our application support new Runtime Permission perfectly. Start with setting <code>compileSdkVersion</code>&nbsp;and&nbsp;<code>targetSdkVersion</code>&nbsp;to 23.</p>
<pre class=\"brush:groovy;auto-links:false;toolbar:false\" contenteditable=\"false\">android {
    compileSdkVersion 23
    ...

    defaultConfig {
        ...
        targetSdkVersion 23
        ...
    }</pre>
<p>In this example, we try to add a contact with a function below.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    private static final String TAG = \"Contacts\";
    private void insertDummyContact() {
        // Two operations are needed to insert a new contact.
        ArrayList&lt;ContentProviderOperation&gt; operations = new ArrayList&lt;ContentProviderOperation&gt;(2);

        // First, set up a new raw contact.
        ContentProviderOperation.Builder op =
                ContentProviderOperation.newInsert(ContactsContract.RawContacts.CONTENT_URI)
                        .withValue(ContactsContract.RawContacts.ACCOUNT_TYPE, null)
                        .withValue(ContactsContract.RawContacts.ACCOUNT_NAME, null);
        operations.add(op.build());

        // Next, set the name for the contact.
        op = ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)
                .withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0)
                .withValue(ContactsContract.Data.MIMETYPE,
                        ContactsContract.CommonDataKinds.StructuredName.CONTENT_ITEM_TYPE)
                .withValue(ContactsContract.CommonDataKinds.StructuredName.DISPLAY_NAME,
                        \"__DUMMY CONTACT from runtime permissions sample\");
        operations.add(op.build());

        // Apply the operations.
        ContentResolver resolver = getContentResolver();
        try {
            resolver.applyBatch(ContactsContract.AUTHORITY, operations);
        } catch (RemoteException e) {
            Log.d(TAG, \"Could not add a new contact: \" + e.getMessage());
        } catch (OperationApplicationException e) {
            Log.d(TAG, \"Could not add a new contact: \" + e.getMessage());
        }
    }</pre>
<p>The above code requires <code>WRITE_CONTACTS</code> permission. If it is called without this permission granted, application will suddenly crash.</p>
<p>Next step is to add a permission into&nbsp;<code>AndroidManifest.xml</code>&nbsp;with same old method.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;uses-permission android:name=\"android.permission.WRITE_CONTACTS\"/&gt;</pre>
<p>Next step is&nbsp;we have to create another function to check that&nbsp;permission is granted or not. If it isn't&nbsp;then&nbsp;call a dialog to ask user for a permission. Otherwise, you can go on the next step, creating a new contact.</p>
<p>Permissions&nbsp;are&nbsp;grouped into <strong>Permission Group</strong> like table below.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/mpermission/permgroup.png\" alt=\"\" width=\"639\" height=\"802\" /></p>
<p>If any permission in a Permission Group is granted. Another permission in the same group will be automatically granted as well. In this case, once <code>WRITE_CONTACTS</code> is granted, application will also grant <code>READ_CONTACTS</code> and <code>GET_ACCOUNTS</code>.</p>
<p>Source code used to check and ask for permission is <strong>Activity's</strong> <code>checkSelfPermission</code> and <code>requestPermissions</code> respectively. These methods are added in API Level 23.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    final private int REQUEST_CODE_ASK_PERMISSIONS = 123;

    private void insertDummyContactWrapper() {
        int hasWriteContactsPermission = checkSelfPermission(Manifest.permission.WRITE_CONTACTS);
        if (hasWriteContactsPermission != PackageManager.PERMISSION_GRANTED) {
            requestPermissions(new String[] {Manifest.permission.WRITE_CONTACTS},
                    REQUEST_CODE_ASK_PERMISSIONS);
            return;
        }
        insertDummyContact();
    }</pre>
<p>If permission has already been granted, <code>insertDummyContact()</code> will be suddenly called. Otherwise, <code>requestPermissions</code> will be called&nbsp;to launch a permission request dialog like below.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/mpermission/requestpermission.jpg\" alt=\"\" width=\"510\" height=\"510\" /></p>
<p>No matter&nbsp;Allow or Deny is chosen, Activity's <code>onRequestPermissionsResult</code> will always be called to inform a result which we can check from&nbsp;the 3rd parameter, <code>grantResults</code>, like this:</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        switch (requestCode) {
            case REQUEST_CODE_ASK_PERMISSIONS:
                if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                    // Permission Granted
                    insertDummyContact();
                } else {
                    // Permission Denied
                    Toast.makeText(MainActivity.this, \"WRITE_CONTACTS Denied\", Toast.LENGTH_SHORT)
                            .show();
                }
                break;
            default:
                super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        }
    }
</pre>
<p>This is how Runtime Permission works. Code is quite complicated but be used to&nbsp;it ... To make you application works perfectly with Runtime Permission, you have to handle all the case with the same method shown above.</p>
<p>If you want to punch some wall, it is a good time now ...</p>
<h2 class=\"section-heading\">Handle \"Never Ask Again\"</h2>
<p>If user denied a permission. In the second launch, user will get a <strong>\"Never ask again\"</strong> option to prevent application from asking this permission in the future.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/mpermission/neveraskagain.jpg\" alt=\"\" width=\"510\" height=\"510\" /></p>
<p>If this option is checked before denying. Next time we call <code>requestPermissions</code>, this dialog will not be appeared for this kind of permission anymore. Instead, it just does nothing.</p>
<p>However it is quite bad in term of UX if user does something but there is nothing interact back. This case has to be handled as well. Before calling <code>requestPermissions</code>, we need to check that&nbsp;should we show a rationale about why application needs the being-requested permission through Activity's&nbsp;<code>shouldShowRequestPermissionRationale</code>&nbsp;method. Source code will now look like this:</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    final private int REQUEST_CODE_ASK_PERMISSIONS = 123;

    private void insertDummyContactWrapper() {
        int hasWriteContactsPermission = checkSelfPermission(Manifest.permission.WRITE_CONTACTS);
        if (hasWriteContactsPermission != PackageManager.PERMISSION_GRANTED) {
                if (!shouldShowRequestPermissionRationale(Manifest.permission.WRITE_CONTACTS)) {
                    showMessageOKCancel(\"You need to allow access to Contacts\",
                            new DialogInterface.OnClickListener() {
                                @Override
                                public void onClick(DialogInterface dialog, int which) {
                                    requestPermissions(new String[] {Manifest.permission.WRITE_CONTACTS},
                                            REQUEST_CODE_ASK_PERMISSIONS);
                                }
                            });
                    return;
                }
            requestPermissions(new String[] {Manifest.permission.WRITE_CONTACTS},
                    REQUEST_CODE_ASK_PERMISSIONS);
            return;
        }
        insertDummyContact();
    }

    private void showMessageOKCancel(String message, DialogInterface.OnClickListener okListener) {
        new AlertDialog.Builder(MainActivity.this)
                .setMessage(message)
                .setPositiveButton(\"OK\", okListener)
                .setNegativeButton(\"Cancel\", null)
                .create()
                .show();
    }</pre>
<p>The result are rational dialog will be shown when <span style=\"text-decoration: underline;\">this permission is requested for the first time</span> and also be shown <span style=\"text-decoration: underline;\">if user has ever marked that permission as Never ask again</span>. For the latter case, <code>onRequestPermissionsResult</code> will be called with <code>PERMISSION_DENIED</code> without any permission grant dialog.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/mpermission/rationaledialog.jpg\" alt=\"\" width=\"510\" height=\"510\" /></p>
<p>Done !</p>
<h2 class=\"section-heading\">Asking for multiple permissions&nbsp;at a time</h2>
<p>There is definitely some feature that requires more than one permission. You could request for multiple permissions at a time with same method as above. Anyway don't forget to check the 'Never ask again' case for every single permission as well.</p>
<p>Here is&nbsp;the revised code.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    final private int REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS = 124;

    private void insertDummyContactWrapper() {
        List&lt;String&gt; permissionsNeeded = new ArrayList&lt;String&gt;();

        final List&lt;String&gt; permissionsList = new ArrayList&lt;String&gt;();
        if (!addPermission(permissionsList, Manifest.permission.ACCESS_FINE_LOCATION))
            permissionsNeeded.add(\"GPS\");
        if (!addPermission(permissionsList, Manifest.permission.READ_CONTACTS))
            permissionsNeeded.add(\"Read Contacts\");
        if (!addPermission(permissionsList, Manifest.permission.WRITE_CONTACTS))
            permissionsNeeded.add(\"Write Contacts\");

        if (permissionsList.size() &gt; 0) {
            if (permissionsNeeded.size() &gt; 0) {
                // Need Rationale
                String message = \"You need to grant access to \" + permissionsNeeded.get(0);
                for (int i = 1; i &lt; permissionsNeeded.size(); i++)
                    message = message + \", \" + permissionsNeeded.get(i);
                showMessageOKCancel(message,
                        new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialog, int which) {
                                requestPermissions(permissionsList.toArray(new String[permissionsList.size()]),
                                        REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS);
                            }
                        });
                return;
            }
            requestPermissions(permissionsList.toArray(new String[permissionsList.size()]),
                    REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS);
            return;
        }

        insertDummyContact();
    }

    private boolean addPermission(List&lt;String&gt; permissionsList, String permission) {
        if (checkSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {
            permissionsList.add(permission);
            // Check for Rationale Option
            if (!shouldShowRequestPermissionRationale(permission))
                return false;
        }
        return true;
    }
</pre>
<p>When every single permission got its grant result, the result will be sent to the same callback method,&nbsp;<code>onRequestPermissionsResult</code>. I use HashMap to make source code&nbsp;looks cleaner and more readable.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        switch (requestCode) {
            case REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS:
                {
                Map&lt;String, Integer&gt; perms = new HashMap&lt;String, Integer&gt;();
                // Initial
                perms.put(Manifest.permission.ACCESS_FINE_LOCATION, PackageManager.PERMISSION_GRANTED);
                perms.put(Manifest.permission.READ_CONTACTS, PackageManager.PERMISSION_GRANTED);
                perms.put(Manifest.permission.WRITE_CONTACTS, PackageManager.PERMISSION_GRANTED);
                // Fill with results
                for (int i = 0; i &lt; permissions.length; i++)
                    perms.put(permissions[i], grantResults[i]);
                // Check for ACCESS_FINE_LOCATION
                if (perms.get(Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED
                        &amp;&amp; perms.get(Manifest.permission.READ_CONTACTS) == PackageManager.PERMISSION_GRANTED
                        &amp;&amp; perms.get(Manifest.permission.WRITE_CONTACTS) == PackageManager.PERMISSION_GRANTED) {
                    // All Permissions Granted
                    insertDummyContact();
                } else {
                    // Permission Denied
                    Toast.makeText(MainActivity.this, \"Some Permission is Denied\", Toast.LENGTH_SHORT)
                            .show();
                }
                }
                break;
            default:
                super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        }
    }
</pre>
<p>The condition is flexible. You have to set it by your own. In some case, if even one permission is not granted, that feature will be just simply disabled. But in some case, it will still work but with limited feature. There is no suggestion from me. It is all by&nbsp;your design.</p>
<h2 class=\"section-heading\">Use Support Library&nbsp;to make code forward-compatible</h2>
<p><span style=\"color: #c0392b;\">Although the code above works perfectly on Android 6.0 Marshmallow. Unfortunate that it will crash on Android pre-Marshmallow since those functions called are added in&nbsp;API Level 23.</span></p>
<p>The straight way is you can check Build Version with code below.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">        if (Build.VERSION.SDK_INT &gt;= 23) {
            // Marshmallow+
        } else {
            // Pre-Marshmallow
        }
</pre>
<p>But code will be even more complicated. So I suggest you to use some help from <span style=\"text-decoration: underline;\"><strong>Support Library v4</strong></span> which is already prepared for this thing. Replace those functions with these:</p>
<p style=\"padding-left: 30px;\"><span style=\"color: #2980b9;\">-&nbsp;<span style=\"font-size: 12pt;\"><strong><span style=\"font-family: 'courier new', courier, monospace;\">ContextCompat.checkSelfPermission()</span></strong></span></span></p>
<p style=\"padding-left: 30px;\">No matter&nbsp;application is run on M or not. This function will correctly return <code>PERMISSION_GRANTED</code> if the permission is granted. Otherwise&nbsp;<code>PERMISSION_DENIED</code> will be returned.</p>
<p style=\"padding-left: 30px;\"><span style=\"color: #2980b9;\">-&nbsp;<span style=\"font-size: 12pt;\"><strong><span style=\"font-family: 'courier new', courier, monospace;\">ActivityCompat.requestPermissions()</span></strong></span></span></p>
<p style=\"padding-left: 30px;\">If this function is called on pre-M, OnRequestPermissionsResultCallback will be suddenly called with correct&nbsp;<code>PERMISSION_GRANTED</code>&nbsp;or&nbsp;<code>PERMISSION_DENIED</code>&nbsp;result.</p>
<p style=\"padding-left: 30px;\"><span style=\"color: #2980b9;\">-<span style=\"font-size: 12pt;\"> <strong><span style=\"font-family: 'courier new', courier, monospace;\">ActivityCompat.shouldShowRequestPermissionRationale()&nbsp;</span></strong></span></span></p>
<p style=\"padding-left: 30px;\">If this function is called on pre-M,&nbsp;it will always return <code>false</code>.</p>
<p><strong><span style=\"text-decoration: underline;\">ALWAYS&nbsp;replace Activity's&nbsp;<code>checkSelfPermission</code>, <code>requestPermissions</code> and&nbsp;<code>shouldShowRequestPermissionRationale</code>&nbsp;with these functions from Support Library v4.</span></strong>&nbsp;And your application will work perfectly find on any Android version with same code logic. Please note that these functions require some additional parameter: Context or Activity. Nothing special to do, just pass what it wants correctly. Here is what source code will look like.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    private void insertDummyContactWrapper() {
        int hasWriteContactsPermission = ContextCompat.checkSelfPermission(MainActivity.this,
                Manifest.permission.WRITE_CONTACTS);
        if (hasWriteContactsPermission != PackageManager.PERMISSION_GRANTED) {
            if (!ActivityCompat.shouldShowRequestPermissionRationale(MainActivity.this,
                    Manifest.permission.WRITE_CONTACTS)) {
                showMessageOKCancel(\"You need to allow access to Contacts\",
                        new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialog, int which) {
                                ActivityCompat.requestPermissions(MainActivity.this,
                                        new String[] {Manifest.permission.WRITE_CONTACTS},
                                        REQUEST_CODE_ASK_PERMISSIONS);
                            }
                        });
                return;
            }
            ActivityCompat.requestPermissions(MainActivity.this,
                    new String[] {Manifest.permission.WRITE_CONTACTS},
                    REQUEST_CODE_ASK_PERMISSIONS);
            return;
        }
        insertDummyContact();
    }
</pre>
<p>These methods are also available in Fragment from Android Support Library v4. So please feel free to move these logics into the Fragment.</p>
<h2 class=\"section-heading\">Shorten source code with 3rd Party Library</h2>
<p>You will notice that code is quite complicated. No surprise, there are quite many of 3rd party libraries out there trying to solve this big thing. I gave a try with quite a lot of them and finally&nbsp;found one that satisfy me. It is hotchemi's&nbsp;<a href=\"http://hotchemi.github.io/PermissionsDispatcher/\" target=\"_blank\">PermissionsDispatcher</a>.</p>
<p>What is does it exactly the same as I described above but just with shorter and cleaner code. Surely with some trade-off with flexibility. Please give it a try and see if it could be applied in&nbsp;your application. If it couldn't, you can go on the direct way which is also my choice right now.</p>
<h2 class=\"section-heading\">What will happen if&nbsp;permission is revoked while application is opened?</h2>
<p>As mentioned above, a permission can be revoked anytime through phone's Settings.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/mpermission/permissionsrevoke.jpg\" alt=\"\" width=\"510\" height=\"510\" /></p>
<p>So what will happen if permission is revoked when application is opened? I have already given it a try and found that <span style=\"text-decoration: underline;\">application's process is suddenly terminated</span>. Everything inside application just simply stopped (since it is already terminated ...). It sounds make sense to me anyway since if OS allows the application to go on its process, it may summon Freddy to my&nbsp;nightmare. I mean even worse&nbsp;nightmare than currently is ...</p>
<h2 class=\"section-heading\">Conclusion and Suggestion</h2>
<p>I believe that you see&nbsp;the big picture of this new permission system quite clear right now. And I believe that you also see how big issue it is.</p>
<p>However you have no choice. Runtime Permission is already used in Android Marshmallow. We are at the point of no return. Only thing we could do right now is to make our application fully support this new permission system.</p>
<p>Good news is there are only few permission that requires Runtime Permission flow. Most of the frequently-used permissions, for example, INTERNET,&nbsp;are in <a href=\"https://developer.android.com/preview/features/runtime-permissions.html#normal\" target=\"_blank\">Normal Permission</a> are automatically granted and you have no need to do anything with them. In conclusion, there are just few part of code that you need to modify.</p>
<p>There are two suggestions to you all:</p>
<p style=\"padding-left: 30px;\">1)&nbsp;Make Runtime Permission support an urgent&nbsp;issue</p>
<p style=\"padding-left: 30px;\">2) Don't set application's targetSdkVersion to 23 if your code is not yet supported Runtime Permission. Especially when you create a new project from Android Studio, don't forget to take a look at build.gradle everytime for targetSdkVersion !</p>
<p>Talk about source code modification, I must admit that it is quite a big thing. If code structure is not designed good enough, you may need some serious reconstruction which will surely take some time. Or at least I believe that source code need to be refactored for every single application. Anyway like I said above, we have no choice ...</p>
<p>In the man time, since permission concept is turned upside down. Right now if some permission is not granted, your application need to still be able to work with limited feature. So I suggest you to list all the feature that related to permission you requested. And write down all the case possible, if permission A is granted but permission B is denied, what will happen. Blah blah blah.</p>
<p>Good luck with your code refactoring. Mark&nbsp;it as urgent in your to-do list and start do it today so it will contains no problem on the day Android M is publicly launched.</p>
<p>Hope you find this article helpful and Happy Coding !</p>
<p>More details are available <a href=\"https://developer.android.com/preview/features/runtime-permissions.html\" target=\"_blank\">here</a>.</p>			") (link nil "http://inthecheesefactory.com/blog/things-you-need-to-know-about-android-m-permission-developer-edition/en") (pubDate nil "
				Tue, 25 Aug 2015 22:16:00 +0000			") (guid nil "http://inthecheesefactory.com/blog/things-you-need-to-know-about-android-m-permission-developer-edition/en")) (item nil (title nil "
				Percent Support Library: Bring dimension in % to RelativeLayout and FrameLayout			") (description nil "
				<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/blog/percent/percentcover.jpg\" /></p> 
<p>Although there are quite a lot of Layout that can be used in Android Application Development world but at last we always end up with just these three: LinearLayout, RelativeLayout and FrameLayout</p>
<p>Anyway there is some problem with those RelativeLayout and FrameLayout since you cannot set Child View's dimension in percentage. Only two ways possible are to put LinearLayout inside and use advantage from its layout_weight LayoutParams and to&nbsp;do it in Java code by overriding onMeasure or so.</p>
<p>For example if I want to place a simple red rectangle on the top-left corner with 5% margin left and 25% width inside RelativeLayout. We have to code like this.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"
    android:layout_width=\"match_parent\"
    android:layout_height=\"match_parent\"&gt;

    &lt;LinearLayout
        android:layout_width=\"match_parent\"
        android:layout_height=\"wrap_content\"
        android:orientation=\"horizontal\"
        android:weightSum=\"20\"&gt;

        &lt;View
            android:layout_width=\"0dp\"
            android:layout_height=\"match_parent\"
            android:layout_weight=\"1\"
            /&gt;

        &lt;View
            android:layout_width=\"0dp\"
            android:layout_height=\"100dp\"
            android:layout_weight=\"5\"
            android:background=\"#ff0000\" /&gt;

    &lt;/LinearLayout&gt;

&lt;/RelativeLayout&gt;</pre>
<p>Here is the result.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/percent/screenshot18.png\" alt=\"\" width=\"784\" height=\"470\" /></p>
<p>You will notice that code is more complicated that it should be. In the mean time, those spaces are also filled with View and LinearLayout which we could treat them&nbsp;as wasted.</p>
<p>It is not a problem anymore since the few days ago on the day Android M is officially announced its name: Marshmallow, Android team launched many Support Library to help developer fighting with fragmentation. One of those is <a href=\"http://developer.android.com/reference/android/support/percent/package-summary.html\" target=\"_blank\">Percent Support Library</a>&nbsp;which add an capbility to set RelativeLayout's and FrameLayout's dimension in&nbsp;% !</p>
<h2 class=\"section-heading\">Hello&nbsp;Percent Support Library</h2>
<p>This library is pretty easy to use since it is just the same RelativeLayout and FrameLayout we are familiar with, just with some additional functionalities.</p>
<p>First of all, since Percent Support Library comes along with Android Support Library 23 so please make sure that you update&nbsp;Android Support Library in <strong>SDK Manager</strong> to the latest version already. And then add a dependency like below in <code>build.gradle</code> file:</p>
<pre class=\"brush:groovy;auto-links:false;toolbar:false\" contenteditable=\"false\">compile 'com.android.support:percent:23.0.0'</pre>
<p>Now instead of using old&nbsp;RelativeLayout and&nbsp;FrameLayout, just simple switch to&nbsp;<code>android.support.percent.PercentRelativeLayout</code>&nbsp;and&nbsp;<code>android.support.percent.PercentFrameLayout</code>&nbsp;respectively. There are 9 Layout Params that can be used:</p>
<p style=\"padding-left: 30px;\"><strong>- <span style=\"font-family: 'courier new', courier, monospace; color: #2980b9;\">layout_widthPercent</span></strong> : Width in&nbsp;%, for example, app:layout_widthPercent=\"25%\"</p>
<p style=\"padding-left: 30px;\"><strong>- <span style=\"font-family: 'courier new', courier, monospace; color: #2980b9;\">layout_heightPercent</span></strong> :&nbsp;Height in %</p>
<p style=\"padding-left: 30px;\"><strong>- <span style=\"font-family: 'courier new', courier, monospace; color: #2980b9;\">layout_marginPercent</span></strong> : Margin in&nbsp;%</p>
<p style=\"padding-left: 30px;\">The rest are margin for&nbsp;each side&nbsp;in %:&nbsp;<span style=\"color: #2980b9;\"><strong><span style=\"font-family: 'courier new', courier, monospace;\">layout_marginLeftPercent</span></strong></span>, <span style=\"color: #2980b9;\"><strong><span style=\"font-family: 'courier new', courier, monospace;\">layout_marginRightPercent</span></strong></span>, <span style=\"color: #2980b9;\"><strong><span style=\"font-family: 'courier new', courier, monospace;\">layout_marginTopPercent</span></strong></span>, <span style=\"color: #2980b9;\"><strong><span style=\"font-family: 'courier new', courier, monospace;\">layout_marginBottomPercent</span></strong></span>, <span style=\"color: #2980b9;\"><strong><span style=\"font-family: 'courier new', courier, monospace;\">layout_marginStartPercent</span></strong></span>, <span style=\"color: #2980b9;\"><strong><span style=\"font-family: 'courier new', courier, monospace;\">layout_marginEndPercent</span></strong></span></p>
<p>With <code>PercentRelativeLayout</code>, the code example&nbsp;above could be rewritten as below:</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;android.support.percent.PercentRelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"
    xmlns:app=\"http://schemas.android.com/apk/res-auto\"
    android:layout_width=\"match_parent\"
    android:layout_height=\"match_parent\"&gt;

    &lt;View
        app:layout_widthPercent=\"25%\"
        android:layout_height=\"100dp\"
        app:layout_marginLeftPercent=\"5%\"
        android:background=\"#ff0000\" /&gt;

&lt;/android.support.percent.PercentRelativeLayout&gt;
</pre>
<p>Here is the result.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/percent/screenshot19.png\" alt=\"\" width=\"784\" height=\"470\" /></p>
<p>You could see that the result is exactly the same but with much shorter and clearer code. Moreover, the space now are not filled with anything anymore which could lead to the better perfomance as well.</p>
<p>Actually this should&nbsp;be a part of Android quite for a while but unfortunate that it didn't. It is too late to add this capability to native Android's RelativeLayout/FrameLayout since user who use the device with old OS version will not be able to use this feature. That's why Android team decided to release this as Support Library and I support the idea.</p>
<p>Please give a try. It&nbsp;helps a lot making your code cleaner and better =)</p>			") (link nil "http://inthecheesefactory.com/blog/know-percent-support-library/en") (pubDate nil "
				Sun, 23 Aug 2015 08:02:00 +0000			") (guid nil "http://inthecheesefactory.com/blog/know-percent-support-library/en")) (item nil (title nil "
				First Look at New Android Gradle Build Tools: The new DSL structure and Gradle 2.5			") (description nil "
				<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/blog/newgradlebuildtools/cover.png\" /></p> 
<p>Android Studio 1.3's stage&nbsp;is closed to the stable release. New&nbsp;features are keep coming including full NDK support. And it seems like some major change is&nbsp;also&nbsp;being waited for its good time to&nbsp;hatch such as a new Gradle Build Tools with the newly designed DSL (gradle script code structure).</p>
<p>I found it is very interesting after an hour of playing. So I decide to write this blog to introduce you guys the&nbsp;upcoming changes of the build tools to let you prepare.</p>
<h2 class=\"section-heading\">What is&nbsp;Android Gradle Build Tools?</h2>
<p>In case you don't know yet. Android Gradle Build Tools is a runtime used for processing&nbsp;module's <code>build.gradle</code> file before passing it forward to Gradle for the furthur step.</p>
<p>Gradle Build Tools' version is declared in project's&nbsp;<code>build.gradle</code>&nbsp;like below:</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">dependencies {
    classpath 'com.android.tools.build:gradle:1.2.3'
}</pre>
<p>Each version of Gradle Build Tools&nbsp;can work&nbsp;with the supported Gradle version listed below.</p>
<table style=\"width: 100%; border: 1px solid black;\" border=\"1px solid black\">
<tbody>
<tr>
<td style=\"width: 50%; border: 1px solid black; padding: 10px; text-align: center;\"><strong>Android Gradle Plugin</strong></td>
<td style=\"border: 1px solid black; text-align: center;\"><strong>Gradle</strong></td>
</tr>
<tr>
<td style=\"border: 1px solid black; text-align: center;\">1.0.0 - 1.1.3</td>
<td style=\"border: 1px solid black; text-align: center;\">2.2.1 - 2.3</td>
</tr>
<tr>
<td style=\"border: 1px solid black; text-align: center;\">1.2+</td>
<td style=\"border: 1px solid black; text-align: center;\">2.2.1+</td>
</tr>
</tbody>
</table>
<p>And the syntax&nbsp;we use these days to write Gradle Script in <code>build.gradle</code> file is defined in&nbsp;Android Gradle Build Tools. We call it&nbsp;<strong>DSL</strong> (Domain-Specific Language).</p>
<h2 class=\"section-heading\">The new Android Gradle Build Tools</h2>
<p>After DSL hasn't been touched since the launch&nbsp;of Gradle Build Tools 1.0, Android Studio team has decided to do the&nbsp;major change with the new Gradle Build Tools which is still in the experimental stage by change its base to Gradle's new component model mechanism allows significant reduction in configuration time. However development teams are working hard trying to remove&nbsp;these current changes to minimize the migration process from the traditional plugin in the future.</p>
<p>Anyway IMHO the new DSL looks pretty good. I must say that I am convinced to change since the new DSL structure and&nbsp;naming&nbsp;is more meaningful than it currently is.</p>
<p>To try the new Gradle Build Tools, just simply change the build tools' version in <span style=\"text-decoration: underline;\"><strong>project's</strong></span> <code>build.gradle</code> to</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">dependencies {
    classpath 'com.android.tools.build:gradle-experimental:0.1.0'
}</pre>
<p>Please note that this new version of build tools works with just-released Gradle 2.5 only so you need to install it first by modify <code>distributionUrl</code> line in <code>gradle/gradle-wrapper.properties</code> file placed in your project.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">distributionUrl=https\\://services.gradle.org/distributions/gradle-2.5-bin.zip</pre>
<p>Enter settings page (<strong>File -&gt; Settings</strong>&nbsp;on&nbsp;<em>Windows&nbsp;or</em>&nbsp;<strong>Android Studio -&gt; Preferences</strong>&nbsp;on&nbsp;<em>Mac OS X</em>)&nbsp;and&nbsp;make sure that you check&nbsp;<strong>Use default gradle wrapper</strong>.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/blog/newgradlebuildtools/defaultwrapper.png\" alt=\"defaultwrapper\" /></p>
<p>And then modify module's&nbsp;<code>build.gradle</code>&nbsp;file from:</p>
<pre class=\"brush:groovy;auto-links:false;toolbar:false\" contenteditable=\"false\">apply plugin: 'com.android.application'

android {
    compileSdkVersion 22
    buildToolsVersion \"23.0.0 rc3\"

    defaultConfig {
        applicationId \"com.inthecheesefactory.hellojni25\"
        minSdkVersion 15
        targetSdkVersion 22
        versionCode 1
        versionName \"1.0\"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:22.2.0'
}
</pre>
<p>to</p>
<pre class=\"brush:groovy;auto-links:false;toolbar:false\" contenteditable=\"false\">apply plugin: 'com.android.model.application'

model {
    android {
        compileSdkVersion = 22
        buildToolsVersion = \"23.0.0 rc3\"

        defaultConfig.with {
            applicationId = \"com.inthecheesefactory.hellojni25\"
            minSdkVersion.apiLevel = 15
            targetSdkVersion.apiLevel = 22
            versionCode = 1
            versionName = \"1.0\"
        }
    }
    android.buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles += file('proguard-rules.pro')
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:22.2.0'
}
</pre>
<p>You can notice that structure are&nbsp;quite different. <code>com.android.application</code>&nbsp;is now changed to <code>com.android.model.application</code>. <code>=</code>&nbsp;operator&nbsp;is required for the most properties as well as <code>+=</code> operator which is used to add element(s) to the collection. Some property's name that are&nbsp;not so clear in the term of meaning are also adjusted, for example,&nbsp;<code>minSdkVersion</code>&nbsp;is now changed to&nbsp;<code>minSdkVersion.apiLevel</code></p>
<p>Well, let's sync project with gradle files to apply the change.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/blog/newgradlebuildtools/syncgradle.png\" alt=\"syncgradle\" /></p>
<p>And then simply run it. Everything works fine as expected with the more meaningful syntax, built with new-fresh Gradle 2.5.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/blog/newgradlebuildtools/run.png\" alt=\"run\" /></p>
<h2 class=\"section-heading\">Give NDK support a try</h2>
<p>Android Studio 1.3 was proudly announced with full NDK Support. So let's give a try with some very simple&nbsp;native codes. First of all, you need to define a NDK's directiory to project's <code>local.properties</code> file. Please note that you can use both NDK r10e available in <a href=\"https://developer.android.com/ndk/downloads/index.html\" target=\"_blank\">Android NDK Downloads Page</a>&nbsp;and NDK Bundle available in SDK Manager.</p>
<pre class=\"brush:groovy;auto-links:false;toolbar:false\" contenteditable=\"false\">ndk.dir=PATH_TO_NDK_ROOT</pre>
<p>Create <code>HelloJni.java</code>&nbsp;somewhere in your java package.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">public class HelloJni {
    public native String stringFromJNI();
}</pre>
<p>Make a <strong>jni</strong> folder inside <strong>src/main </strong>and create <code>hello-jni.c</code>&nbsp;file with the content shown below.</p>
<p><strong>hello-jni.c</strong></p>
<pre class=\"brush:cpp;auto-links:false;toolbar:false\" contenteditable=\"false\">#include &lt;string.h&gt;
#include &lt;jni.h&gt;

jstring
Java_com_inthecheesefactory_hellojni25_HelloJni_stringFromJNI( JNIEnv* env,
                                                  jobject thiz )
{
#if defined(__arm__)
  #if defined(__ARM_ARCH_7A__)
    #if defined(__ARM_NEON__)
      #if defined(__ARM_PCS_VFP)
        #define ABI \"armeabi-v7a/NEON (hard-float)\"
      #else
        #define ABI \"armeabi-v7a/NEON\"
      #endif
    #else
      #if defined(__ARM_PCS_VFP)
        #define ABI \"armeabi-v7a (hard-float)\"
      #else
        #define ABI \"armeabi-v7a\"
      #endif
    #endif
  #else
   #define ABI \"armeabi\"
  #endif
#elif defined(__i386__)
   #define ABI \"x86\"
#elif defined(__x86_64__)
   #define ABI \"x86_64\"
#elif defined(__mips64)  /* mips64el-* toolchain defines __mips__ too */
   #define ABI \"mips64\"
#elif defined(__mips__)
   #define ABI \"mips\"
#elif defined(__aarch64__)
   #define ABI \"arm64-v8a\"
#else
   #define ABI \"unknown\"
#endif

    return (*env)-&gt;NewStringUTF(env, \"Hello from JNI !!  Compiled with ABI \" ABI \".\");
}</pre>
<p>Please don't forget to change&nbsp;<code style=\"color: #333333; font-size: 20px; line-height: 1.42857143;\">com_inthecheesefactory_hellojni25</code>&nbsp;to match HelloJni.java's package name or it will just simply not working.</p>
<p>For those who are familiar with NDK, you might notice that Makefiles aren't needed anymore.</p>
<p>And here is the final file structure.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/blog/newgradlebuildtools/files.png\" alt=\"files\" /></p>
<p>Now let's test the JNI code&nbsp;in&nbsp;<code>MainActivity.java</code>&nbsp;by placing code below at the very last line of <strong>MainActivity</strong> class.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">public class MainActivity extends AppCompatActivity {

    ...

    static {
        System.loadLibrary(\"hello-jni\");
    }
}
</pre>
<p>Modify <code>onCreate</code>&nbsp;like this.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        Toast.makeText(MainActivity.this,
                        new HelloJni().stringFromJNI(),
                        Toast.LENGTH_LONG)
                .show();
    }</pre>
<p>Done! You can now use the&nbsp;native code through Java code. Run to try it.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/blog/newgradlebuildtools/screenshot18.png\" alt=\"screenshot18\" /></p>
<p>And with the awesome full support of NDK on Android Studio, Java code and Native code can now&nbsp;work&nbsp;seemlessly. If you&nbsp;inspect code in Java, it will jump you to the right place in native code.</p>
<p><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/blog/newgradlebuildtools/linkjni.png\" alt=\"linkjni\" /></p>
<p>Anyway it is still in the experimental stage. Some features are still under development. Better wait for the final release for serious use.</p>
<h2 class=\"section-heading\">Conclusion</h2>
<p>I must say that the new Gradle Build Tools is very interesting. Major change to DSL looks really promising and far more meaningful than the current one. The great code should be able to tell what it does, agree?</p>
<p>However&nbsp;it is still in the experimental stage. The DSL is&nbsp;not final yet. We better just study and know its existence rather than switching to the new one right now. Anyway I believe that it would not be so long until the stable release available for real use. Be prepared !</p>
<p>More information available here&nbsp;&gt;&gt; <a href=\"http://tools.android.com/tech-docs/new-build-system/gradle-experimental\" target=\"_blank\">Experimental Plugin User Guide</a></p>
<p>=)</p>			") (link nil "http://inthecheesefactory.com/blog/new-gradle-build-tools-with-gradle-2.5/en") (pubDate nil "
				Sun, 12 Jul 2015 19:21:00 +0000			") (guid nil "http://inthecheesefactory.com/blog/new-gradle-build-tools-with-gradle-2.5/en")) (item nil (title nil "
				Codelab for Android Design Support Library used in I/O Rewind Bangkok session			") (description nil "
				<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/designlibrary/cover.jpg\" /></p> 
<p>At the moment I believe that there is no any Android Developer who doesn't know about <strong>Material Design</strong> anymore since it officially becomes a design philosophy&nbsp;by shaking the world of design in passed year.</p>
<p>Surprisingly that it was not easy to implement Material Design in android application because those Material Design's UI Component like Floating Action Button (FAB) wasn't available in Android pre-Lollipop. Only choice we had was to use 3rd party library published&nbsp;by indie android developer out there.</p>
<p>Here comes a good news. Last week during&nbsp;Google I/O 2015 event, Google announced the most excited support library within year named <strong>Android Design Support Library</strong> providing a bunch of useful Material Design UI Components in a single library. Let me use this chance to describe to you one by one how to use each of them through this article.</p>
<p>Please check the video below as the&nbsp;final of result of this tutorial.</p>
<p style=\"text-align: center;\"><video width=\"320\" height=\"568\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/target.mp4\" type=\"video/mp4\" /></video></p>
<p>And this is the starting point. A blank Activity with&nbsp;DrawerLayout equipped.</p>
<p style=\"text-align: center;\"><video width=\"320\" height=\"568\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/from.mp4\" type=\"video/mp4\" /></video></p>
<p>Activity is also already adjusted the theme in&nbsp;Material Design's way.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">        &lt;item name=\"colorPrimary\"&gt;#2196F3&lt;/item&gt;
        &lt;item name=\"colorPrimaryDark\"&gt;#1565C0&lt;/item&gt;
        &lt;item name=\"colorAccent\"&gt;#E91E63&lt;/item&gt;</pre>
<p>OK, let's start !</p>
<h2 class=\"section-heading\">Step 1: Clone Source Code from Github</h2>
<p>I have prepared source code for&nbsp;this codelab. You could simply clone it from&nbsp;<a href=\"https://github.com/nuuneoi/Lab-Android-DesignLibrary\" target=\"_blank\">GitHub</a>. MainActivity is the final result shown above. Please do your codelab in&nbsp;<code>CodeLabActivity</code>&nbsp;prepared in the same project.</p>
<p>First task that you have to do it yourself is ... to successfully run&nbsp;it which it supposes to be done by simply clicking on Run button.</p>
<h2 class=\"section-heading\">Step 2: Add Android Design Support Library&nbsp;Dependency</h2>
<p>First thing to do to include Android Design Support Library in our project is to add a line of dependency code in app's <code>build.gradle</code> file.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">compile 'com.android.support:design:22.2.1'</pre>
<p><span style=\"color: #e74c3c;\">Please note that Design Support Library depends on&nbsp;<em>Support v4</em>&nbsp;and <em>AppCompat v7. </em>Once you include this library in your project, you will also gain an access to those libraries' components.</span></p>
<p>By the way, source code cloned from Github has already been added above line of code.&nbsp;But if you create your own&nbsp;project, you need to add it by yourself.</p>
<h2 class=\"section-heading\">Step 3: Add&nbsp;FAB</h2>
<p>Floating Action Button (FAB) is simply a circle&nbsp;button with some drop shadow that&nbsp;unbelieveably could change the world of design. No surprise why it becomes a signature of Material Design. So let's start with this thing. Add FAB in&nbsp;layout file with&nbsp;<code>FloatingActionButton</code>&nbsp;and wrap it with&nbsp;<code>FrameLayout</code>&nbsp;since it needs some parent to make it aligned at bottom right position of the screen. Place those things as DrawerLayout's content by replacing&nbsp;an existed <code>TextView</code> in&nbsp;<code>activity_code_lab.xml</code>&nbsp;file like below.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;android.support.v4.widget.DrawerLayout ...
    xmlns:app=\"http://schemas.android.com/apk/res-auto\"
    ....&gt;

    &lt;FrameLayout
        android:id=\"@+id/rootLayout\"
        android:layout_width=\"match_parent\"
        android:layout_height=\"match_parent\"
        &gt;

        &lt;android.support.design.widget.FloatingActionButton
            android:id=\"@+id/fabBtn\"
            android:layout_width=\"wrap_content\"
            android:layout_height=\"wrap_content\"
            android:layout_gravity=\"bottom|right\"
            android:src=\"@drawable/ic_plus\"
            app:fabSize=\"normal\" /&gt;

    &lt;/FrameLayout&gt;

    ...

&lt;/android.support.v4.widget.DrawerLayout&gt;</pre>
<p><code>android:src</code>&nbsp;is used to define a Resource ID of icon you want (40dp transparent png file is recommended) while&nbsp;<code>app:fabSize=\"normal\"</code>&nbsp;is used to define FAB's size.&nbsp;<code>normal</code> means the standard&nbsp;56dp button used in most of the case&nbsp;but in case you want to use the smaller one, <code>mini</code>&nbsp;is an another choice that will change its width to&nbsp;40dp.</p>
<p>That's all. FAB is now ready to use! Here is the result when we run the code&nbsp;on Android 4.4.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot20.jpg\" alt=\"screenshot20\" /></p>
<p>But when we run on Android 5.0, the result turn into this ...</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot17n.png\" alt=\"screenshot17n\" /></p>
<p>There is nothing fancy but just a bug. Fortunate&nbsp;that design library's developer team has already known the issue and will release a fixed version in the near future. But if you want to use it now, we could do some workaround by setting FAB's margin right and margin bottom to 16dp for API Level 21+ and to 0dp for Android pre-Lollipop. Thanks Configuration Qualifier that allows us to do it extremely easy.</p>
<p><strong>res/values/dimens.xml</strong></p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">    &lt;dimen name=\"codelab_fab_margin_right\"&gt;0dp&lt;/dimen&gt;
    &lt;dimen name=\"codelab_fab_margin_bottom\"&gt;0dp&lt;/dimen&gt;</pre>
<p><strong>res/values-v21/dimens.xml</strong></p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">    &lt;dimen name=\"codelab_fab_margin_right\"&gt;16dp&lt;/dimen&gt;
    &lt;dimen name=\"codelab_fab_margin_bottom\"&gt;16dp&lt;/dimen&gt;
</pre>
<p><strong>res/layout/activity_code_lab.xml</strong></p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">    &lt;android.support.design.widget.FloatingActionButton
        ...
        android:layout_marginBottom=\"@dimen/codelab_fab_margin_bottom\"
        android:layout_marginRight=\"@dimen/codelab_fab_margin_right\"
        .../&gt;</pre>
<p>Hola !</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot18n_1.png\" alt=\"screenshot18n_1\" /></p>
<p>The shadow&nbsp;depth is automatically set to the best practices one, <strong>6dp at idle state</strong> and <strong>12dp at pressed state</strong>. Anyway you are allowed&nbsp;to override these values by defining&nbsp;<code>app:elevation</code>&nbsp;for idle state's shadow depth and<code>app:pressedTranslationZ</code>&nbsp;for press state's.</p>
<p>Regard to button's color, basically FAB uses the accent color but you could override with <code>app:backgroundTint</code>&nbsp;attribute.</p>
<p>Just like a traditional&nbsp;Button, you could handle click with <code>setOnClickListener()</code>. Add the following line of codes in&nbsp;<code>initInstances</code>&nbsp;in&nbsp;<code>CodeLabActivity.java</code>&nbsp;file.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    FloatingActionButton fabBtn;

    ...

    private void initInstances() {
        ...

        fabBtn = (FloatingActionButton) findViewById(R.id.fabBtn);
        fabBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

            }
        });
    }
</pre>
<p>Done !</p>
<h2 class=\"section-heading\">Step 4: Play with&nbsp;Snackbar</h2>
<p>Snackbar, a tiny black bar showing a brief message at the bottom of the screen, is&nbsp;also available in this library. Snackbar shares the same concept as Toast but unlike Toast, it shows as a part of UI instead of overlaying on screen.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/designlibrary/snackbar.jpg\" alt=\"snackbar\" /></p>
<p>Not just a concept but also coding style that it is inspired from Toast.&nbsp;You could summon Snackbar by the code below.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">Snackbar.make(someView, \"Hello. I am Snackbar!\", Snackbar.LENGTH_SHORT)
        .setAction(\"Undo\", new View.OnClickListener() {
            @Override
            public void onClick(View v) {

            }
        })
        .show();
</pre>
<p>The first parameter of <code>make()</code> is a View or Layout that you want to show a Snackbar at it's&nbsp;bottom position. In this example, a&nbsp;FrameLayout that wrapped a&nbsp;FAB is the one. <code>setAction()</code> method is used to set the action displayed&nbsp;on the right of Snackbar with a listener corresponded. This method is not required&nbsp;and could be removed.</p>
<p>Now let's give a try by adding the following code.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    FrameLayout rootLayout;

    ...

    private void initInstances() {
        ...

        rootLayout = (FrameLayout) findViewById(R.id.rootLayout);

        fabBtn = (FloatingActionButton) findViewById(R.id.fabBtn);
        fabBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Snackbar.make(rootLayout, \"Hello. I am Snackbar!\", Snackbar.LENGTH_SHORT)
                        .setAction(\"Undo\", new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {

                            }
                        })
                        .show();
            }
        });
    }
</pre>
<p>Click at FAB and see the result.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot24.jpg\" alt=\"screenshot24\" /></p>
<p>It works ! but ... not perfectly yet. It is appeared that Snackbar is placed&nbsp;on top of FAB which is totally bad in term of UX. Anyway the behavior is already correct since there is no any relation between Snackbar and FAB defined.</p>
<p>A special Layout is invented for this&nbsp;purpose especially,&nbsp;make child Views work coordinated.&nbsp;No surprise why its name is&nbsp;<code>CoordinatorLayout</code></p>
<h2 class=\"section-heading\">Step 5: Make them collaborated with&nbsp;CoordinatorLayout</h2>
<p>CoordinatorLayout is a Layout let child Views work coordinated. Anyway there is no magic. Each View inside must be designed and implemented to work with CoordinatorLayout as well. FAB and Snackbar are two of those.</p>
<p>So ... let's change&nbsp;FrameLayout wrapped a&nbsp;FAB to&nbsp;<code>CoordinatorLayout</code>&nbsp;now.</p>
<p><strong>res/layout/activity_code_lab.xml</strong></p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">    &lt;android.support.design.widget.CoordinatorLayout
        android:id=\"@+id/rootLayout\"
        android:layout_width=\"match_parent\"
        android:layout_height=\"match_parent\"
        &gt;
        &lt;android.support.design.widget.FloatingActionButton
            ... /&gt;
    &lt;/android.support.design.widget.CoordinatorLayout&gt;</pre>
<p>And don't forget to change rootLayout's variable type in <code>CodeLabActivity.java</code>&nbsp;to CoordinatorLayout as well or it will crash.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    //FrameLayout rootLayout;
    CoordinatorLayout rootLayout;

    //rootLayout = (FrameLayout) findViewById(R.id.rootLayout);
    rootLayout = (CoordinatorLayout) findViewById(R.id.rootLayout);
</pre>
<p>Another bug is here. On Android 4.4, FAB's margin&nbsp;has surprisingly&nbsp;been dropped&nbsp;to the zero which let its position moved to bottom-right as a result.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot19n.png\" alt=\"screenshot19n\" /></p>
<p>This bug just happens on <em>Android Design Support Library 22.2.1</em> so let's wait for the official fix but for now in case you want to use FloatingActionButton inside CoordinatorLayout, please manually&nbsp;adjust FAB's margin right and margin bottom to 16dp.</p>
<p><strong>res/values/dimens.xml</strong></p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">    &lt;dimen name=\"codelab_fab_margin_right\"&gt;16dp&lt;/dimen&gt;
    &lt;dimen name=\"codelab_fab_margin_bottom\"&gt;16dp&lt;/dimen&gt;</pre>
<p>Done</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot20n.png\" alt=\"screenshot20n\" /></p>
<p><strong>Result:</strong> FAB now moves along with Snackbar's appearance and disappearance. Some feature is also added.&nbsp;Snackbar is now able to&nbsp;Swipe-to-dismiss&nbsp;!&nbsp;Here is the result.</p>
<p style=\"text-align: center;\"><video width=\"360\" height=\"200\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling105.mp4\" type=\"video/mp4\" /></video></p>
<p><em>Please note that FAB had ever moved back to the proper position with smoother animation&nbsp;on v22.2.0 but it turns to be worse in&nbsp;v22.2.1</em></p>
<p>From now on, if you plan to use Android Design Support Library. Please think about CoordinatorLayout first since it is something like a core of this library.</p>
<h2 class=\"section-heading\">Step 6: Goodbye&nbsp;ActionBar, Hail&nbsp;Toolbar</h2>
<p>Toolbar is not part of Android Design Support Library but is needed to be used together with the rest of components in this library.</p>
<p>Toolbar is a replacement of traditional Action Bar with far more flexible behavior. I encourage you guys to hiding an Action Bar and switch to Toolbar from now on since new libraries with wonderful features are all designed to work together with Toolbar not Action Bar including components in this Design Support Library.</p>
<p>It is easy to switch to Toolbar. Just start with hiding an Action Bar from an Activity by defining these attributes in AppTheme's style.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.DarkActionBar\"&gt;
    &lt;item name=\"windowActionBar\"&gt;false&lt;/item&gt;
    &lt;item name=\"windowNoTitle\"&gt;true&lt;/item&gt;
&lt;/style&gt;
</pre>
<p>Then place a Toolbar component inside CoordinatorLayout&nbsp;right before where FAB is.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">    &lt;android.support.design.widget.CoordinatorLayout
        ...&gt;
        &lt;android.support.v7.widget.Toolbar
            android:id=\"@+id/toolbar\"
            android:layout_width=\"match_parent\"
            android:layout_height=\"?attr/actionBarSize\"
            android:background=\"?attr/colorPrimary\"
            app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\"
            app:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\" /&gt;
        &lt;android.support.design.widget.FloatingActionButton
            ...&gt;
        &lt;/android.support.design.widget.FloatingActionButton&gt;
    &lt;/android.support.design.widget.CoordinatorLayout&gt;</pre>
<p>Now write a code to tell system that we will use&nbsp;Toolbar as an Action Bar replacement with Java Code below.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    Toolbar toolbar;

    private void initInstances() {
        toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);
        ...
    }</pre>
<p>Although it could run fine by&nbsp;now but from I said previously. <em>Things placed inside CoordinatorLayout must be designed and implemented to work with it or it will not coordinate with any other sibling views.</em> But well ... Toolbar is not designed for that. Don't worry, there is no any new special Toolbar here, just an component that is prepared to make Toolbar works perfectly with CoordinatorLayout. An easy task, just simply wrap Toolbar&nbsp;with <code>AppBarLayout</code>. That's all !</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">    &lt;android.support.design.widget.CoordinatorLayout
        ...&gt;

        &lt;android.support.design.widget.AppBarLayout
            android:layout_width=\"match_parent\"
            android:layout_height=\"wrap_content\"&gt;
           &lt;android.support.v7.widget.Toolbar
               .../&gt;
        &lt;/android.support.design.widget.AppBarLayout&gt;

        &lt;android.support.design.widget.FloatingActionButton
            ...&gt;
        &lt;/android.support.design.widget.FloatingActionButton&gt;
    &lt;/android.support.design.widget.CoordinatorLayout&gt;</pre>
<p>Now run and test. If you do it all right, you will see that Drawer Menu will overlay on top of the&nbsp;App&nbsp;Bar area.</p>
<p style=\"text-align: center;\"><video width=\"320\" height=\"569\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/toolbarappbarlayout.mp4\" type=\"video/mp4\" /></video></p>
<p>This step is now done. From now on I suggest you to always wrap ToolBar element with&nbsp;AppBarLayout regards to making it works perfectly with CoordinatorLayout.</p>
<h2 class=\"section-heading\">Step 7: Place something in content area</h2>
<p>We got FAB, we got Toolbar. Now it's time to place something in content area of an Activity.</p>
<p>Umm. How about two simple buttons? Well, let's place them between AppBarLayout and FAB.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">            ...
        &lt;/android.support.design.widget.AppBarLayout&gt;

        &lt;LinearLayout
            android:layout_width=\"match_parent\"
            android:layout_height=\"match_parent\"
            android:orientation=\"vertical\"
            &gt;
            &lt;Button
                android:layout_width=\"wrap_content\"
                android:layout_height=\"wrap_content\"
                android:text=\"Yo Yo\"
                /&gt;
            &lt;Button
                android:layout_width=\"wrap_content\"
                android:layout_height=\"wrap_content\"
                android:text=\"Yo Yo\"
                /&gt;
        &lt;/LinearLayout&gt;

        &lt;android.support.design.widget.FloatingActionButton
            ...&gt;</pre>
<p>Here is the result ...</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot29.jpg\" alt=\"screenshot29\" /></p>
<p>It is appeared that those buttons are&nbsp;unexpectedly placed under Toolbar. Guess why...</p>
<p>Yah, same old reason, <em>LinearLayout is not designed to work with CoordinatorLayout</em>. In this case, there is no any layout to wrap it like Toolbar's case. It is for more easy, you just need to add an attribute to the&nbsp;LinearLayout telling its scroll behavior like below.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;LinearLayout
    ...
    app:layout_behavior=\"@string/appbar_scrolling_view_behavior\"
    ...
    &gt;</pre>
<p>And now they are at the right place. Yah !</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot30.jpg\" alt=\"screenshot30\" /></p>
<p>Done =)</p>
<h2 class=\"section-heading\">Step 8: Play with&nbsp;TabLayout</h2>
<p>Tab is a part of UX best practices in Android Application. Previously if we want to use new Material Design Tab, we need to download source code of SlidingTabLayout and SlidingTabStrip to our project ourselves. Right now we could just use <code>TabLayout</code> provided in this library, also with some more tweak options.</p>
<p>Where should we place this TabLayout? According to Android Application UX Guideline, Tab should be placed on top of the screen not the bottom. And well, it should be above the drop shadow part. So we will place it inside AppBarLayout along with Toolbar. It could be done like this&nbsp;because <span style=\"color: #16a085;\">AppBarLayout is inherited from&nbsp;a vertical LinearLayout</span>.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">        &lt;android.support.design.widget.AppBarLayout ...&gt;

            &lt;android.support.v7.widget.Toolbar ... /&gt;

            &lt;android.support.design.widget.TabLayout
                android:id=\"@+id/tabLayout\"
                android:layout_width=\"match_parent\"
                android:layout_height=\"wrap_content\"/&gt;

        &lt;/android.support.design.widget.AppBarLayout&gt;</pre>
<p>Add some tabs with Java Code.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">    TabLayout tabLayout;

    private void initInstances() {
        tabLayout = (TabLayout) findViewById(R.id.tabLayout);
        tabLayout.addTab(tabLayout.newTab().setText(\"Tab 1\"));
        tabLayout.addTab(tabLayout.newTab().setText(\"Tab 2\"));
        tabLayout.addTab(tabLayout.newTab().setText(\"Tab 3\"));

        ...
    }</pre>
<p>Here is the result.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot31.jpg\" alt=\"screenshot31\" /></p>
<p>Background color is automatically set to primary color while the indicator line's color is the accent one. But you will notice that Tab's font is still black but we expect it to be white. This happens because we didn't provide it any theme yet. Simply define TabLayout a theme like this.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;android.support.design.widget.TabLayout
    ...
    app:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\" /&gt;</pre>
<p>They are white now.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot32.jpg\" alt=\"screenshot32\" /></p>
<p>You have a choice to manually control TabLayout like above or let it work with ViewPager automatically by calling <code>setupWithViewPager(...)</code>. I believe that it will be used quite frequent for this case.</p>
<p>There are two attributes we could adjust the display in TabLayout.</p>
<p style=\"padding-left: 60px; text-align: left;\"><span style=\"color: #2980b9; font-family: 'courier new', courier, monospace;\"><strong>app:tabMode</strong></span> - set it as&nbsp;<code>fixed</code>&nbsp;if you want to display every single tab on the screen. Good for a small number of tabs but totally a bad&nbsp;choice if there are so&nbsp;many tabs. In the case you are not sure that&nbsp;all of them&nbsp;could be displayed nicely at a&nbsp;time, you could set this attribute&nbsp;as <code>scrollable</code>&nbsp;to let user&nbsp;scroll through tabs instead just like Google Play Store's.</p>
<p style=\"padding-left: 60px; text-align: left;\"><span style=\"color: #2980b9; font-family: 'courier new', courier, monospace;\"><strong>app:tabGravity</strong></span> - set it as&nbsp;<code>fill</code>&nbsp;if you want distribute all available space to each tab or set it as&nbsp;<code>center</code>&nbsp;if you want to place all of the tabs at the center of the screen. Please note that this attribute will be <em>ignored</em> if tabMode is set to scrollable.</p>
<p>Here is what it looks like in each mode.</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/designlibrary/tabmodetabgravity.jpg\" alt=\"tabmodetabgravity\" /></p>
<p>Done with TabLayout =)</p>
<h2 class=\"section-heading\">Step 9: Make AppBarLayout exit the screen along with&nbsp;content when scroll</h2>
<p>One nice Android UX Guideline announced is the App Bar could be scrolled out of the screen along with content to get some more&nbsp;additional space to display content&nbsp;and it is already proved that this UX is good. Previously there were some application that was already implemented this behavior but developer had to do it by themselves. Right now it could be done easily with just a&nbsp;line of code.</p>
<p>First of all, we need to make the content scrollable first by adding some amount of Buttons to LinearLayout. How about 20?</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">                &lt;Button
                    android:layout_width=\"wrap_content\"
                    android:layout_height=\"wrap_content\"
                    android:text=\"Yo Yo\"
                    /&gt;
                ...
                &lt;!-- Add 20 more buttons here --&gt;
                ...
                &lt;Button
                    android:layout_width=\"wrap_content\"
                    android:layout_height=\"wrap_content\"
                    android:text=\"Yo Yo\"
                    /&gt;</pre>
<p>And then wrap the LinearLayout with&nbsp;ScrollView and <strong><span style=\"text-decoration: underline;\">don't forget to move layout_behavior from LinearLayout to ScrollView</span></strong> since ScrollView&nbsp;is now a direct child of CoordinatorLayout.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">        &lt;ScrollView
            android:layout_width=\"match_parent\"
            android:layout_height=\"match_parent\"
            android:fillViewport=\"true\"
            app:layout_behavior=\"@string/appbar_scrolling_view_behavior\"
            &gt;
            &lt;LinearLayout
                android:layout_width=\"match_parent\"
                android:layout_height=\"match_parent\"
                android:orientation=\"vertical\"
                &gt;
                ...
            &lt;/LinearLayout&gt;
        &lt;/ScrollView&gt;
</pre>
<p>Then add a Scroll Flags to Toolbar like this.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;android.support.v7.widget.Toolbar
    ...
    app:layout_scrollFlags=\"scroll|enterAlways\" /&gt;</pre>
<p>Test it.</p>
<p style=\"text-align: center;\"><video width=\"360\" height=\"200\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling1_1.mp4\" type=\"video/mp4\" /></video></p>
<p>Hmm ... Toolbar supposes to scroll out of the screen along with the content but why it appears that nothing happened?</p>
<p>The same old reason ... <span style=\"color: #d35400;\"><strong>ScrollView was not designed to work with CoordinatorLayout</strong></span> (again). You need to use the another one, <code>NestedScrollView</code>, provided in Android Support Library v4, which is designed to work with CoordinatorLayout since born.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;android.support.v4.widget.NestedScrollView ...&gt;
    &lt;LinearLayout ...&gt;
        ...
    &lt;/LinearLayout&gt;
&lt;/android.support.v4.widget.NestedScrollView&gt;</pre>
<p>And with the same reason, please note that the classic ListView doesn't work with CoordinatorLayout as well. Only&nbsp;<code>RecyclerView</code>&nbsp;works. Time to change, may be?</p>
<p>Here is the result after changing ScrollView to NestedScrollView.</p>
<p style=\"text-align: center;\"><video width=\"360\" height=\"200\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling2_1.mp4\" type=\"video/mp4\" /></video></p>
<p>Works like a charm! You will notice that Toolbar scroll out of the screen&nbsp;but TabLayout still stay. This is because we didn't set any scroll flags to TabLayout. If you want TabLayout to disappear from the screen as well, just simply define the same attribute to TabLayout.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;android.support.design.widget.TabLayout
    ...
    app:layout_scrollFlags=\"scroll|enterAlways\" /&gt;</pre>
<p>Result</p>
<p style=\"text-align: center;\"><video width=\"360\" height=\"160\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling101.mp4\" type=\"video/mp4\" /></video></p>
<p>Now let's look at it in details. Curious what are the meaning of those flags actually: <code>scroll</code> and <code>enterAlways</code>? Actually there are 4 attribute values that we could set as.</p>
<p style=\"padding-left: 30px;\"><strong><span style=\"font-family: 'courier new', courier, monospace; color: #2980b9;\">scroll</span> </strong>- If you want the view to scroll along the content. You need to apply this flag.</p>
<p style=\"padding-left: 30px;\"><span style=\"font-family: 'courier new', courier, monospace; color: #2980b9;\"><strong>enterAlwaysCollapsed</strong></span> - This flag defines how View enter back into the screen. When your view has declared a minHeight and you use this flag, your View will only enter at its minimum height (i.e., &lsquo;collapsed&rsquo;), only re-expanding to its full height when the scrolling view has reached it&rsquo;s top.&nbsp;Use it with scroll flag like this:&nbsp;<code>scroll|enterAlwaysCollapsed</code></p>
<p style=\"text-align: center;\"><video width=\"360\" height=\"160\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling102.mp4\" type=\"video/mp4\" /></video>&nbsp;</p>
<p style=\"padding-left: 30px;\">Anyway it seems like it doesn't work as described in minHeight part.</p>
<p style=\"padding-left: 30px;\"><span style=\"font-family: 'courier new', courier, monospace; color: #2980b9;\"><strong>enterAlways</strong></span>&nbsp;- this flag ensures that any downward scroll will cause this view to become visible, enabling the &lsquo;quick return&rsquo; pattern. Use it with scroll flag as well:&nbsp;<code>scroll|enterAlways</code></p>
<p style=\"text-align: center;\"><video width=\"360\" height=\"200\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling2_1.mp4\" type=\"video/mp4\" /></video></p>
<p style=\"padding-left: 30px;\"><span style=\"font-family: 'courier new', courier, monospace; color: #2980b9;\"><strong>exitUntilCollapsed</strong></span>&nbsp;- View will scroll off until it is collapsed (its minHeight) and stay like that, for example,</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;android.support.v7.widget.Toolbar
    ...
    android:layout_height=\"192dp\"
    android:gravity=\"bottom\"
    android:paddingBottom=\"12dp\"
    android:minHeight=\"?attr/actionBarSize\"
    app:layout_scrollFlags=\"scroll|exitUntilCollapsed\"
    /&gt;</pre>
<p style=\"padding-left: 30px;\">Here is the result of code above.</p>
<p style=\"text-align: center;\"><video width=\"360\" height=\"360\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling104.mp4\" type=\"video/mp4\" /></video></p>
<p style=\"padding-left: 30px;\">This mode is frequently used in the component I will talk about in&nbsp;next part.</p>
<p>That's all for this step. Easy, huh?</p>
<h2 class=\"section-heading\">Step 10: Remove&nbsp;TabLayout</h2>
<p>In the next part, we are going to play more with Toolbar so I consider removing TabLayout from UI for the better visual result. To do that just simply comment all of those related codes.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;!--android.support.design.widget.TabLayout --&gt;</pre>
<p>Also remove from Java Code.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">        //tabLayout = (TabLayout) findViewById(R.id.tabLayout);
        //tabLayout.addTab(tabLayout.newTab().setText(\"Tab 1\"));
        //tabLayout.addTab(tabLayout.newTab().setText(\"Tab 2\"));
        //tabLayout.addTab(tabLayout.newTab().setText(\"Tab 3\"));</pre>
<p>OK. Let's go to the next step !</p>
<h2 class=\"section-heading\">Step 11:&nbsp;Make Toolbar collapsable</h2>
<p>Like an example shown in <em>exitUntilCollapsed</em> part, Toolbar could be expanded and collapsed but you will see that it isn't perfect yet. Toolbar still leave the screen in spite of the best practice that those icons (Hamburger, etc.) should stay on the screen.</p>
<p>Design Support Library has already been prepared for this as well. You could make Toolbar collapsable like a magic with <code>CollapsingToolbarLayout</code>&nbsp;which is very easy to use just like other components. Here are&nbsp;the steps:</p>
<p style=\"padding-left: 30px;\">- Wrap&nbsp;<code>Toolbar</code>&nbsp;with <code>CollapsingToolbarLayout</code> but still be under&nbsp;<code>AppBarLayout</code></p>
<p style=\"padding-left: 30px;\">- Remove&nbsp;<code>layout_scrollFlags</code>&nbsp;from Toolbar</p>
<p style=\"padding-left: 30px;\">- Declare&nbsp;<code>layout_scrollFlags</code>&nbsp;for <code>CollapsingToolbarLayout</code> and change it to&nbsp;<code>scroll|exitUntilCollapsed</code></p>
<p style=\"padding-left: 30px;\">- Change&nbsp;AppBarLayout's layout height to the size of expanded state. In this example, I use&nbsp;256dp</p>
<p>Here is the final code.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;android.support.design.widget.AppBarLayout
    android:layout_width=\"match_parent\"
    android:layout_height=\"256dp\"&gt;

    &lt;android.support.design.widget.CollapsingToolbarLayout
        android:id=\"@+id/collapsingToolbarLayout\"
        android:layout_width=\"match_parent\"
        android:layout_height=\"match_parent\"
        app:layout_scrollFlags=\"scroll|exitUntilCollapsed\"&gt;

        &lt;android.support.v7.widget.Toolbar
            android:id=\"@+id/toolbar\"
            android:layout_width=\"match_parent\"
            android:layout_height=\"?attr/actionBarSize\"
            android:background=\"?attr/colorPrimary\"
            android:minHeight=\"?attr/actionBarSize\"
            app:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"
            app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\" /&gt;

    &lt;/android.support.design.widget.CollapsingToolbarLayout&gt;

&lt;/android.support.design.widget.AppBarLayout&gt;</pre>
<p>And the result is</p>
<p style=\"text-align: center;\"><video width=\"360\" height=\"360\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling6.mp4\" type=\"video/mp4\" /></video></p>
<p>Looks good but those Toolbar icons still scroll off the screen. We could pin it to let it be always on top of the screen by declare this attribute to Toolbar.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;android.support.v7.widget.Toolbar
    ...
    app:layout_collapseMode=\"pin\"
    /&gt;</pre>
<p>Toolbar is now pinned !</p>
<p style=\"text-align: center;\"><video width=\"360\" height=\"360\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling7.mp4\" type=\"video/mp4\" /></video></p>
<p>But wait ... where is the title text?! Unfornate that it's gone in the wind after wrapping Toolbar with CollapsingToolbarLayout. We have to set it manually&nbsp;through&nbsp;<code>setTitle(String)</code>&nbsp;in Java code.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">CollapsingToolbarLayout collapsingToolbarLayout;

private void initInstances() {
    ...
    collapsingToolbarLayout = (CollapsingToolbarLayout) findViewById(R.id.collapsingToolbarLayout);
    collapsingToolbarLayout.setTitle(\"Design Library\");
}
</pre>
<p>Result:</p>
<p style=\"text-align: center;\"><video width=\"360\" height=\"360\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling8.mp4\" type=\"video/mp4\" /></video></p>
<p>Title's font color is still black. This is because we didn't set any&nbsp;theme to the App Bar yet. To do so, just simply declare&nbsp;<code>android:theme</code>&nbsp;for&nbsp;<code>AppBarLayout</code>&nbsp;like this.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;android.support.design.widget.AppBarLayout
    ...
    android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"&gt;</pre>
<p>Title now turns into&nbsp;white !</p>
<p style=\"text-align: center;\"><video width=\"360\" height=\"360\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling9.mp4\" type=\"video/mp4\" /></video></p>
<p>With CollapsingToolbarLayout's feature, transition is automatically applied to the title text between collapsed and expanded state. In case you want to change the position of title text in expanded state, you could do so by apply margin through 4 attributes&nbsp;such as&nbsp;<code>app:expandedTitleMargin</code>,&nbsp;<code>app:expandedTitleMarginBottom</code>,&nbsp;<code>app:expandedTitleMarginEnd</code>&nbsp;and&nbsp;<code>app:expandedTitleMarginStart</code></p>
<p>Or if you want to change text's appearance in collapsed and expanded state. You could simply do that by applying TextAppearance through&nbsp;<code>app:collapsedTitleTextAppearance</code>&nbsp;and&nbsp;<code>app:expandedTitleTextAppearance</code>&nbsp;respectively.</p>
<p>Let's try changing margin start to 64dp.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;android.support.design.widget.CollapsingToolbarLayout
    ...
    app:expandedTitleMarginStart=\"64dp\"&gt;</pre>
<p>Result</p>
<p style=\"text-align: center;\"><video width=\"360\" height=\"360\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling10.mp4\" type=\"video/mp4\" /></video></p>
<p>Awesome !</p>
<h2 class=\"no-margin section-heading\">Step 12: Add background image to&nbsp;App Bar</h2>
<p>In many cases,&nbsp;we want to have a beautiful image as an App Bar's background not just a plain color like currently is. Fortunate that CollapsingToolbarLayout is inherited from FrameLayout so we could simply add an ImageView as a background layer behind Toolbar like this.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;ImageView
    android:layout_width=\"match_parent\"
    android:layout_height=\"match_parent\"
    android:scaleType=\"centerCrop\"
    android:src=\"@drawable/header\" /&gt;

&lt;android.support.v7.widget.Toolbar
    ...</pre>
<p>Result</p>
<p style=\"text-align: center;\"><video width=\"360\" height=\"360\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling11.mp4\" type=\"video/mp4\" /></video></p>
<p>Image appears already but there is an unexpected blue bar appears&nbsp;as well. It is nothing fancy but just a Toolbar's background. Simply remove this line from <strong>Toolbar</strong>.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">android:background=\"?attr/colorPrimary\"</pre>
<p>Result</p>
<p style=\"text-align: center;\"><video width=\"360\" height=\"360\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling12.mp4\" type=\"video/mp4\" /></video></p>
<p>Image now just moves along with content scrolling which is a little bit too wooden. We could make it more elegant with parallax mode by declaring collapse mode like this.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;ImageView
   ...
   app:layout_collapseMode=\"parallax\" /&gt;</pre>
<p>Result</p>
<p style=\"text-align: center;\"><video width=\"360\" height=\"360\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling14.mp4\" type=\"video/mp4\" /></video></p>
<p>You also could apply a parallax multiplier between 0.0-1.0.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">app:layout_collapseParallaxMultiplier=\"0.7\"</pre>
<p>Please give a try yourself =)</p>
<p>Lastly you will notice that App Bar's background is always shown as image. You could let it automatically changed into plain color in collapsed mode by declaring attribute <code>app:contentScrim</code>&nbsp;like below:</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;android.support.design.widget.CollapsingToolbarLayout
    ...
    app:contentScrim=\"?attr/colorPrimary\"&gt;</pre>
<p>Result</p>
<p style=\"text-align: center;\"><video width=\"360\" height=\"360\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling15.mp4\" type=\"video/mp4\" /></video></p>
<p>App Bar is now beautiful with just some line of codes =)</p>
<h2 class=\"section-heading\">Step 13: Play with&nbsp;Navigation Drawer</h2>
<p>Right now Drawer Menu pulled from the left side is still just a blank white panel. Previously it is quite a hard task to implement this menu since we have to do it manually with LinearLayout or ListView.</p>
<p>With NavigationView provided in Android Design Support Library,&nbsp;things would be 15.84321 times easier !</p>
<p>First of all, create a header view layout file for Drawer Menu. (It is already there in Github project.)</p>
<p><strong>res/layout/nav_header.xml<br /></strong></p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;
&lt;FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"
    android:layout_width=\"match_parent\"
    android:layout_height=\"192dp\"
    android:theme=\"@style/ThemeOverlay.AppCompat.Dark\"
    &gt;
    
    &lt;ImageView
        android:layout_width=\"match_parent\"
        android:layout_height=\"match_parent\"
        android:src=\"@drawable/nav_header_bg\"
        android:scaleType=\"centerCrop\" /&gt;

    &lt;ImageView
        android:layout_width=\"wrap_content\"
        android:layout_height=\"wrap_content\"
        android:src=\"@drawable/nuuneoi\"
        android:layout_gravity=\"bottom\"
        android:layout_marginBottom=\"36dp\" /&gt;

    &lt;TextView
        android:layout_width=\"match_parent\"
        android:layout_height=\"wrap_content\"
        android:layout_gravity=\"bottom\"
        android:layout_margin=\"16dp\"
        android:text=\"nuuneoi\"
        android:textAppearance=\"@style/TextAppearance.AppCompat.Body1\"/&gt;

&lt;/FrameLayout&gt;
</pre>
<p>Now create&nbsp;a menu resource file.</p>
<p><strong>res/menu/navigation_drawer_items.xml</strong></p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;
&lt;menu xmlns:android=\"http://schemas.android.com/apk/res/android\"&gt;

    &lt;group android:checkableBehavior=\"all\"&gt;
        &lt;item
            android:id=\"@+id/navItem1\"
            android:icon=\"@drawable/ic_action_location_found_dark\"
            android:title=\"Home\"/&gt;
        &lt;item
            android:id=\"@+id/navItem2\"
            android:icon=\"@drawable/ic_action_location_found_dark\"
            android:title=\"Blog\"/&gt;

        &lt;item
            android:id=\"@+id/navItem3\"
            android:icon=\"@drawable/ic_action_location_found_dark\"
            android:title=\"About\"/&gt;

        &lt;item
            android:id=\"@+id/navItem4\"
            android:icon=\"@drawable/ic_action_location_found_dark\"
            android:title=\"Contact\"/&gt;
    &lt;/group&gt;

&lt;/menu&gt;</pre>
<p>Place <code>NavigationView</code>&nbsp;binding both resources above as Drawer Menu's menu area by replace an existed white LinearLayout with the following code.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">        ...
    &lt;/android.support.design.widget.CoordinatorLayout&gt;

    &lt;android.support.design.widget.NavigationView
        android:id=\"@+id/navigation\"
        android:layout_width=\"wrap_content\"
        android:layout_height=\"match_parent\"
        android:layout_gravity=\"start\"
        app:headerLayout=\"@layout/nav_header\"
        app:itemIconTint=\"#333\"
        app:itemTextColor=\"#333\"
        app:menu=\"@menu/navigation_drawer_items\" /&gt;

&lt;/android.support.v4.widget.DrawerLayout&gt;</pre>
<p>Drawer Menu is now summoned ! Woo hooo</p>
<p style=\"text-align: center;\"><video width=\"320\" height=\"569\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling16_1.mp4\" type=\"video/mp4\" /></video></p>
<p>NavigationView is designed for&nbsp;Drawer Menu&nbsp;especially. So everything would be created and measured automatically including width of the menu which we have to define ourselves case by case with Configuration Qualifier previously.</p>
<p>To handle those menu items click event, you could simply declare a listener with&nbsp;<code>setNavigationItemSelectedListener</code>&nbsp;like below:</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    NavigationView navigation;

    private void initInstances() {
        ...

        navigation = (NavigationView) findViewById(R.id.navigation);
        navigation.setNavigationItemSelectedListener(new NavigationView.OnNavigationItemSelectedListener() {
            @Override
            public boolean onNavigationItemSelected(MenuItem menuItem) {
                int id = menuItem.getItemId();
                switch (id) {
                    case R.id.navItem1:
                        break;
                    case R.id.navItem2:
                        break;
                    case R.id.navItem3:
                        break;
                }
                return false;
            }
        });
    }</pre>
<p>In the&nbsp;real&nbsp;use, please feel free to declare your own header view and modify menu items as you wanted.</p>
<h2 class=\"section-heading\">Step 14: Modernize&nbsp;EditText with&nbsp;TextInputLayout</h2>
<p>The last part of this Codelab is here. You could change an old style EditText to a modern one that always&nbsp;show Hint and Error Message.</p>
<p>To do so, just simply wrap an EditText with&nbsp;TextInputLayout. That's all !</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;android.support.design.widget.TextInputLayout
    android:layout_width=\"match_parent\"
    android:layout_height=\"wrap_content\"&gt;

    &lt;EditText
        android:layout_width=\"match_parent\"
        android:layout_height=\"wrap_content\"
        android:hint=\"Username\" /&gt;
&lt;/android.support.design.widget.TextInputLayout&gt;</pre>
<p>Put two of them inside NestedScrollView and see the result.</p>
<p style=\"text-align: center;\"><video width=\"320\" height=\"569\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling17.mp4\" type=\"video/mp4\" /></video></p>
<p>Incredibly easy, huh? =)</p>
<h2 class=\"section-heading\">Conclusion</h2>
<p>Android Design Support Library is a very promising support library. It is totally recommended&nbsp;for&nbsp;your production. Anyway it still contains with some bug, if you really want to use it now please be sure that you know about&nbsp;all of the issues.</p>
<p>Such a long tutorial. Hope you find it useful =)</p>
<hr />
<h2 class=\"section-heading\">Updated [24/07/2015]: From v22.2.0 to v22.2.1</h2>
<p>Few days ago, Android team launched the new version of Android Support Library, v22.2.1, with many bug fixed and also with some new bug ... I have already given it a try and updated this codelab to match the result in v22.2.1.</p>
<p>And regards to the bug in the library,&nbsp;here is that list of that what I found:</p>
<h2 class=\"subsection-heading\">Bug fixed</h2>
<p>- <code>TabLayout</code> now works perfectly on&nbsp;AppBarLayout. UI is now fluid and there is no more rendering problem.</p>
<p><video width=\"360\" height=\"200\" style=\"display: block; margin-left: auto; margin-right: auto;\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling102.mp4\" type=\"video/mp4\" /></video></p>
<p>- <code>FloatingActionButton</code> on Android 5.0+ now comes with drop shadow. There is no need to manually set <code>app:borderWidth</code> anymore</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot18n_1.png\" alt=\"screenshot18n_1\" /></p>
<p>- <code>exitUntilCollapsed</code> scrollMode works like described now</p>
<p style=\"text-align: center;\"><video width=\"360\" height=\"200\" controls=\"controls\" source=\"\" type=\"video/mp4\">scrolling104<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling104.mp4\" type=\"video/mp4\" /></video></p>
<h2 class=\"subsection-heading\">Bug that still persists</h2>
<p>- <code>FloatingActionButton</code> on Android 5.0+ still doesn't come with margin right and margin bottom unlike in&nbsp;pre-Lollipop. Still needs to manually set the different margin for those configurations.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot20.jpg\" alt=\"screenshot20\" /></p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot17n.png\" alt=\"screenshot17n\" /></p>
<h2 class=\"subsection-heading\">New bug or worse behavior</h2>
<p>- On Android pre-Lollipop, when FAB is put inside CoordinatorLayout, its&nbsp;margin has been immediately set to zero although it has ever had some margin when it is put in another type of Layout. I am not sure which one is the expected behavior but I believe&nbsp;that it supposes to be only one ...</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot20n.png\" alt=\"screenshot20n\" /><br /><span style=\"font-size: 12pt;\"><em><strong>When placed inside FrameLayout</strong></em></span></p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot19n.png\" alt=\"screenshot19n\" /><br /><span style=\"font-size: 12pt;\"><em><strong>When placed inside&nbsp;CoordinatorLayout</strong></em></span></p>
<p>- The animation of FAB to move back to the proper position when Snackbar is swipe-to-dismissed&nbsp;looks strange</p>
<p><video width=\"360\" height=\"200\" style=\"display: block; margin-left: auto; margin-right: auto;\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling105.mp4\" type=\"video/mp4\" /></video></p>
<p>Please be patient. I am strongly believe that team are working on these issues for the next release =)</p>			") (link nil "http://inthecheesefactory.com/blog/android-design-support-library-codelab/en") (pubDate nil "
				Mon, 22 Jun 2015 08:22:00 +0000			") (guid nil "http://inthecheesefactory.com/blog/android-design-support-library-codelab/en")) (item nil (title nil "
				How to distribute your own Android library through jCenter and Maven Central from Android Studio			") (description nil "
				<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/cover_1.jpg\" /></p> 
<p>In Android Studio, if you wish to include any library to your application. You could just simply add a following line of dependency in module's <code>build.gradle</code> file.</p>
<pre class=\"brush:bash;auto-links:false;toolbar:false\" contenteditable=\"false\">dependencies {
    compile 'com.inthecheesefactory.thecheeselibrary:fb-like:0.9.3'
}</pre>
<p>That's all.&nbsp;The library is now usable.</p>
<p>It is completely cool. But you might be curious where does Android Studio fetch&nbsp;the library from? This blog will describe in details how this thing work including how to publish your own library and share it to&nbsp;developers in the rest of the world which does&nbsp;not only make this world a better place but also make you look more cool !</p>
<h2 class=\"section-heading\">Where does Android Studio fetch the library from?</h2>
<p>Start with this&nbsp;first simple question which I believe that not all of you completely knows that from where Android Studio fetch the library. Does it just search google for us and download&nbsp;the proper library to our project?</p>
<p>Well. It is not that complicated. Android Studio downloads the library from <strong>Maven Repository Server</strong> we defined in <code>build.gradle</code>. (Apache Maven is a tools developed by Apache provides a file server to distribute the libraries). Basically there are just 2 standard servers used for host the libraries for Android such as <strong>jcenter</strong> and <strong>Maven Central</strong></p>
<div class=\"row\">
<div class=\"col-md-6\">
<h2 class=\"section-heading subsection-heading\">jcenter</h2>
<p>jcenter is a&nbsp;Maven Repository hosted by <a href=\"https://bintray.com/\" target=\"_blank\">bintray.com</a>. You could find the whole repository <a href=\"http://jcenter.bintray.com\" target=\"_blank\">here</a>.</p>
<p>To use jcenter in your project, you have to define the repository like below in project's&nbsp;<code>build.gradle</code>&nbsp;file.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">allprojects {
    repositories {
        jcenter()
    }
}
</pre>
</div>
<div class=\"col-md-6\">
<h2 class=\"subsection-heading\">Maven Central</h2>
<p>Maven Central is a&nbsp;Maven Repository hosted by <a href=\"https://sonatype.org/\" target=\"_blank\">sonatype.org</a>. You could find the whole repository <a href=\"https://oss.sonatype.org/content/repositories/releases/\" target=\"_blank\">here</a>.</p>
<p>To use Maven Central&nbsp;in your project, you have to define the repository like below in project's&nbsp;<code>build.gradle</code>&nbsp;file.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">allprojects {
    repositories {
        mavenCentral()
    }
}
</pre>
</div>
</div>
<p><span style=\"color: #e74c3c;\">Please note that although both jcenter and&nbsp;Maven Central are standard android library repositories but they are hosted at completely different place, provided by different provider and there is nothing related to each other.</span>&nbsp;What that&nbsp;is available in jcenter might not be found in Maven Central and vice versa.</p>
<p>Apart from those two standard servers, we are also able to define the&nbsp;specific Maven Repository Server ourselves in case we use a library from some developers who want to host their libraries on their own server. Twitter's Fabric.io falls in&nbsp;this case by hosting their own Maven Repository at&nbsp;<a href=\"https://maven.fabric.io/public\">https://maven.fabric.io/public</a>. If you want to use any Fabric.io's library, you have to define the repository's url yourselve like below.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">repositories {
    maven { url 'https://maven.fabric.io/public' }
}
</pre>
<p>And then you will be able to access any library inside with the same method.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">dependencies {
    compile 'com.crashlytics.sdk.android:crashlytics:2.2.4@aar'
}</pre>
<p>But which one is the better: to upload library to standard server or to host our own server? The former is.&nbsp;<span style=\"color: #2980b9;\"><strong>To make our own library be available to public. Another developer should not has to define anything but a line of code defining dependency's name. So in this article, we will focus&nbsp;on just&nbsp;jcenter and Maven Central which provide far better experience for developer.</strong></span></p>
<p>FYI&nbsp;actually there is another type of&nbsp;repository besides Maven Repository that works with gradle on Android Studio. It is called <a href=\"http://ant.apache.org/ivy/\" target=\"_blank\">Ivy Repository</a>&nbsp;but from my own experience, I have never seen anyone using it before including me so I will just simply ignore this type of repository&nbsp;in this article.</p>
<h2 class=\"section-heading\">Understand jcenter and&nbsp;Maven Central</h2>
<p>Wonder why is there not only just one but two standard repositories out there?</p>
<p>Actually both of them are the repositories having&nbsp;the same duty: hosting Java/Android libraries. It is a developers' choice to upload their libraries to which one or may be both.</p>
<p>At first, Android Studio chose Maven Central as a default repository. Once you create a new project from old version of Android Studio, <code>mavenCentral()</code> would be automatically defined in build.gradle.</p>
<p>But the big problem of Maven Central is it is not developer-friendly. It is surprisingly hard to upload the library to. To be able to do so, developer has to be at some level of geeky. And with some more reason for example a security concern and etc, <strong>Android Studio team decided to switch the default repository to jcenter instead</strong> as you can see that once you create a new project from latest version of Android Studio, <code>jcenter()</code> would be automatically defined instead of <code>mavenCentral()</code>.</p>
<p>There are load of good reasons why they decided to switch from Maven Central to jcenter. Here are some of the major one.</p>
<p style=\"padding-left: 30px;\">- jcenter delivers library through CDN which means that&nbsp;developer could enjoy the faster loading experience.</p>
<p style=\"padding-left: 30px;\">- jcenter is the largest Java Repository on earth. So whatever that is available on Maven Central could be implied that it would be available on jcenter as well. In the other words, jcenter is superset of Maven Central.</p>
<p style=\"padding-left: 30px;\">- It is incredibly easy to upload our own library to the repository.&nbsp;No need to sign or do any complex thing like we have to on Maven Central.</p>
<p style=\"padding-left: 30px;\">- Friendly-UI</p>
<p style=\"padding-left: 30px;\">- If you want to upload your library to Maven Central you could do it easily with a single click on bintray site (and with some step of one-time setup).</p>
<p>With above reasons and from my own experiences, I must say that it is the brilliant decision switching default repository to jcenter.</p>
<p>So this article will focus on just jcenter since once you successfully upload your library to jcenter, it could be forwarded&nbsp;to Maven Central easily after that.</p>
<h2 class=\"section-heading\">How does gradle pull a library from&nbsp;Repository?</h2>
<p>Before we start talking about how to upload a library to jcenter. We should start with how gradle fetch a library from repository.&nbsp;For example,&nbsp;when we type like below in build.gradle, how are&nbsp;those library files magically downloaded to your project.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">compile 'com.inthecheesefactory.thecheeselibrary:fb-like:0.9.3'</pre>
<p>Basically we have to know the form of library string first. It consists of 3 parts:</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">GROUP_ID:ARTIFACT_ID:VERSION</pre>
<p>In the above case, <span style=\"color: #8e44ad;\"><strong>GROUP_ID</strong></span>&nbsp;is&nbsp;<strong>com.inthecheesefactory.thecheeselibrary</strong>&nbsp;while&nbsp;<span style=\"color: #16a085;\"><strong>ARTIFACT_ID</strong></span>&nbsp;is&nbsp;<strong>fb-like</strong>&nbsp;and&nbsp;<span style=\"color: #2980b9;\"><strong>VERSION</strong></span>&nbsp;is&nbsp;<strong>0.9.3</strong></p>
<p>For the meaning, <strong>GROUP_ID</strong>&nbsp;defines the name of&nbsp;library's group. It is possible that there would be more than one library that work the different job in the same context. If library are in the same group, it would share the same GROUP_ID. Generally we name it with developer's package name and then follow with the name of library's group, for example, <code>com.squareup.picasso</code>. And then defines the real name of the library in&nbsp;<strong>ARTIFACT_ID</strong>. For <strong>VERSION</strong>, there is nothing but a version number. Although it could be any text but I suggest to set it in <span style=\"font-family: 'courier new', courier, monospace;\">x.y.z</span> format and might follow with <span style=\"font-family: 'courier new', courier, monospace;\">-beta</span> if you want.</p>
<p>Here is the real example of library from Square. You will notice that each one could be easily&nbsp;recognised the library's and developer's name.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">dependencies {
  compile 'com.squareup:otto:1.3.7'
  compile 'com.squareup.picasso:picasso:2.5.2'
  compile 'com.squareup.okhttp:okhttp:2.4.0'
  compile 'com.squareup.retrofit:retrofit:1.9.0'
}</pre>
<p>What will happen when we add dependencies like above? Easy. Gradle will&nbsp;ask Maven Repository Server that does the library exist if yes gradle will get a path of the requested library which mostly in the form of GROUP_ID/ARTIFACT_ID/VERSION_ID, for example, you could find library files of <code>com.squareup:otto:1.3.7</code> from&nbsp;<a href=\"http://jcenter.bintray.com/com/squareup/otto/1.3.7\">http://jcenter.bintray.com/com/squareup/otto/1.3.7</a>&nbsp;and&nbsp;<a href=\"https://oss.sonatype.org/content/repositories/releases/com/squareup/otto/1.3.7/\">https://oss.sonatype.org/content/repositories/releases/com/squareup/otto/1.3.7/</a>.</p>
<p>And then Android Studio would download those files to our machine and compile with our project per your request. That's all. Nothing complicated !</p>
<p>I believe that you should know understand clearly that library pulled from repository is nothing special but <code>jar</code> or <code>aar</code> files hosted on repository server. It could be compared just like to download those files yourselve, copy and compile everything&nbsp;along with your project. But the big benefits you get from dependency system available on gradle is you don't have to do anything but just type&nbsp;some texts and that's all. The library would suddenly be useable&nbsp;in&nbsp;your project also with versioning system.</p>
<h2 class=\"section-heading\">Knowing an aar file format</h2>
<p>Wait ... I said that there are two types of library files that could be hosted on the repository, <strong>jar</strong> and <strong>aar</strong>. jar file is nothing, I believe that all of you know about it. But what is aar file exactly?</p>
<p>aar file is developed on top of jar file. It was invented because something Android Library needs to be embedded with some Android-specific files like AndroidManifest.xml, Resources, Assets or JNI which are out of jar file's standard. So aar was invented to cover all of those things. Basically it is a normal zip file just like jar one&nbsp;but with different file structure. jar file is embedded inside aar file with <code>classes.jar</code> name. And&nbsp;the rest are listed below:</p>
<p style=\"padding-left: 60px;\"><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt;\">- /AndroidManifest.xml (mandatory)<br /></span><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt;\">- /classes.jar (mandatory)<br /></span><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt;\">- /res/ (mandatory)<br /></span><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt;\">- /R.txt (mandatory)<br /></span><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt;\">- /assets/ (optional)<br /></span><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt;\">- /libs/*.jar (optional)<br /></span><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt;\">- /jni/&lt;abi&gt;/*.so (optional)<br /></span><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt;\">- /proguard.txt (optional)<br /></span><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt;\">- /lint.jar (optional)</span></p>
<p>As you can see. aar file is designed for Android especially. So this article will teach you how to create and upload a library in aar format.</p>
<h2 class=\"section-heading\">How to upload your library to jcenter</h2>
<p>Right now I believe that you already&nbsp;have&nbsp;all of the basic knowledge on how the&nbsp;repository system works. Now let's begin the most important part: uploading processes. The objective is as simple as <em>how to upload our library files to <a href=\"http://jcenter.bintray.com\">http://jcenter.bintray.com</a></em>. Once we could do it, the library is published. Well ... two things to concern: how to create an aar file and how to upload built files to the repository?</p>
<p>Although it requires a bunch of&nbsp;steps but I must say that it is totally not hard thing to do since bintray has prepared for everything quite well.&nbsp;You could find the whole process in the below diagram.</p>
<p><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/steps_1.png\" alt=\"steps_1\" /></p>
<p>And since there are quite a lot of details so let me split the process to 7 parts so I could describe everything clearly in step-by-step.</p>
<h2 class=\"subsection-heading\">Part 1 :&nbsp;Create a package on Bintray</h2>
<p>First of all. You need to create a package on bintray. To do so, you need a bintray account and create a package on website.</p>
<p><strong>Step 1:</strong>&nbsp;Register for an account on&nbsp;<a href=\"https://bintray.com/\" target=\"_blank\">bintray.com</a>.&nbsp;(The sign up process is quite simple so please do it yourself)</p>
<p><strong>Step 2:</strong>&nbsp;Once registration is done, login to the website and click at&nbsp;<strong>maven</strong></p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/maven.png\" alt=\"maven\" /></p>
<p><strong>Step 3:</strong>&nbsp;Click at <strong>Add New Package</strong>&nbsp;to start creating a new package for our library.</p>
<p><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/maven2.png\" alt=\"maven2\" /></p>
<p><strong>Step 4:</strong>&nbsp;Enter all of those required information</p>
<p><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/maven3.png\" alt=\"maven3\" /></p>
<p>Although there is no rule on how to name the <strong>Package&nbsp;Name</strong>&nbsp;but there is some name convention. Just set&nbsp;all of the characters to lowercase and separate each word with hyphen (-), for example, <strong>fb-like</strong>.</p>
<p>Once every required fields are done, click at&nbsp;<strong>Create Package</strong>&nbsp;to finish.</p>
<p><strong>Step 5:</strong>&nbsp;Website will redirect you to&nbsp;Edit Package page. Click at package's name under Edit Package text to enter package's details page.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/maven4.png\" alt=\"maven4\" /></p>
<p>Done! You now have <span style=\"text-decoration: underline;\">your own Maven Repository on Bintray</span>&nbsp;which is ready to be uploaded the library to.</p>
<p><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/maven5.png\" alt=\"maven5\" /></p>
<p>Bintray account registration is now done. Next one to work with is Sonatype, the Maven Central provider.</p>
<h2 class=\"subsection-heading\">Part 2 : Create a&nbsp;Sonatype account for&nbsp;Maven Central</h2>
<p><em>Note: You could skip Part 2 and 3 if you don't have a plan to upload your library to Maven Central. Anyway I suggest you not to skip since there are a lot of developers out there who still use this repository.</em></p>
<p>Just like jcenter, if you want to distribute your library through Maven Central, you need to register an account at its provider site, <strong>Sonatype</strong>.</p>
<p>What you need to know is the account that you have to create one&nbsp;is the&nbsp;JIRA Issue Tracker account on Sonatype site. To do so, please go to&nbsp;<a href=\"https://issues.sonatype.org/secure/Dashboard.jspa\">Sonatype Dashboard</a>&nbsp;and simply sign up for an account.</p>
<p>Once you're done. You have to&nbsp;request a permission to distribute your library to Maven Central. Anyway the process&nbsp;doesn't make any sense at all (at least for me) since what you have to do is to <strong>create an issue in JIRA</strong> to let them allow you&nbsp;to upload your library that match the GROUP_ID provided to Maven Central.</p>
<p>To create an issue like described, go to&nbsp;<a href=\"https://issues.sonatype.org/secure/Dashboard.jspa\" target=\"_blank\">Sonatype Dashboard</a>&nbsp;and login with account created. And then click at&nbsp;<strong>Create</strong>&nbsp;placed at the top&nbsp;menu.</p>
<p>Fill in the following information:</p>
<p style=\"padding-left: 30px;\"><span style=\"color: #34495e;\"><strong>Project:</strong> Community Support - Open Source Project Repository Hosting</span></p>
<p style=\"padding-left: 30px;\"><span style=\"color: #34495e;\"><strong>Issue Type:</strong> New Project</span></p>
<p style=\"padding-left: 30px;\"><span style=\"color: #34495e;\"><strong>Summary:</strong>&nbsp;Your library's name in summary,&nbsp;for example, The Cheese Library</span></p>
<p style=\"padding-left: 30px;\"><span style=\"color: #34495e;\"><strong>Group Id:</strong>&nbsp;Put the root&nbsp;GROUP_ID, for example,&nbsp;com.inthecheeselibrary . After you got an approval, <em>every single library starts&nbsp;with com.inthecheeselibrary</em> will be&nbsp;allowed to upload to repository, for example, com.inthecheeselibrary.somelib</span></p>
<p style=\"padding-left: 30px;\"><span style=\"color: #34495e;\"><strong>Project URL:</strong>&nbsp;Put a URL of any library you plan to distribute, for example, https://github.com/nuuneoi/FBLikeAndroid</span></p>
<p style=\"padding-left: 30px;\"><span style=\"color: #34495e;\"><strong>SCM URL:</strong> URL of&nbsp;Source Control, for example,&nbsp;https://github.com/nuuneoi/FBLikeAndroid.git</span></p>
<p>Keep the rest unmodified&nbsp;and click at <strong>Create</strong>. That's all. Now it is the hardest part ...&nbsp;wait patiently ... which will take around 1 week or a little bit more by average. And&nbsp;you will be granted an access to distribute your library to Maven Central after that.</p>
<p>The last thing to do is to give bintray your&nbsp;Sonatype OSS username in Accounts tab of&nbsp;<a href=\"https://bintray.com/profile/edit\" target=\"_blank\">Bintray Profile</a>.</p>
<p><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/sonatypeusername.png\" alt=\"sonatypeusername\" /></p>
<p>Click at <strong>Update</strong>&nbsp;and we're done.</p>
<h2 class=\"section-heading subsection-heading\">Part 3 : Enable&nbsp;Auto Signing in&nbsp;Bintray</h2>
<p>As mentioned above, we could upload a library to Maven Central through jcenter but to do that we need to sign that library first. bintray provides a mechanic to do that easily through web interface that allows library to be signed automatically once uploaded.</p>
<p>First step is to generate a key via command line with the command below. (In case you use Windows, please do it under&nbsp;<a href=\"https://www.cygwin.com/\" target=\"_blank\">cygwin</a>)</p>
<pre class=\"brush:bash;auto-links:false;toolbar:false\" contenteditable=\"false\">gpg --gen-key</pre>
<p>There are some mandatory fields to be filled in. Default value could be applied in most of the parts&nbsp;but for some field you need to enter the proper value&nbsp;by yourself, for example, your real name, passpharse and etc.</p>
<p>Once key is created. Call the following command to see the created key's information.</p>
<pre class=\"brush:bash;auto-links:false;toolbar:false\" contenteditable=\"false\">gpg --list-keys</pre>
<p>If there is nothing wrong, the information will be shown as below</p>
<pre class=\"brush:bash;auto-links:false;toolbar:false\" contenteditable=\"false\">pub   2048R/01ABCDEF 2015-03-07
uid                  Sittiphol Phanvilai &lt;yourmail@email.com&gt;
sub   2048R/98765432 2015-03-07</pre>
<p>Now we have to upload the public key to keyservers to make it&nbsp;useful. To do so, please call the following command and replace PUBLIC_KEY_ID with 8-digits&nbsp;hexadecimal value after 2048R/ in the <strong>pub</strong> line which is <code>01ABCDEF</code>&nbsp;in this example.</p>
<pre class=\"brush:bash;auto-links:false;toolbar:false\" contenteditable=\"false\">gpg --keyserver hkp://pool.sks-keyservers.net --send-keys PUBLIC_KEY_ID</pre>
<p>And then, export both public and private key as ASCII armor format with the following command and please replace <a href=\"mailto:yourmail@email.com\">yourmail@email.com</a>&nbsp;to the email you used to create your own key in the previous step.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">gpg -a --export yourmail@email.com &gt; public_key_sender.asc
gpg -a --export-secret-key yourmail@email.com &gt; private_key_sender.asc</pre>
<p>Open Bintray's&nbsp;<a href=\"https://bintray.com/profile/edit\" target=\"_blank\">Edit Profile</a>&nbsp;page and click at <strong>GPG Signing</strong>. Fill in both Public Key and Private Key using content in <span style=\"font-family: 'courier new', courier, monospace;\">public_key_sender.asc</span> and <span style=\"font-family: 'courier new', courier, monospace;\">private_key_sender.asc</span> files exported in previous step respectively.</p>
<p><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/gpg.png\" alt=\"gpg\" /></p>
<p>Click at <strong>Update</strong> to save the keys</p>
<p>The final step is to enable auto signing. Go to main page of <a href=\"https://bintray.com/\" target=\"_blank\">Bintray</a>&nbsp;and then click at <strong>maven</strong>.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/maven.png\" alt=\"maven\" /></p>
<p>Click&nbsp;<strong>Edit</strong></p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/editmaven.png\" alt=\"editmaven\" /></p>
<p><strong>Check</strong> the <strong>GPG Sign uploaed files automatically</strong>&nbsp;box to enable auto signing.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/autosigned.png\" alt=\"autosigned\" /></p>
<p>Click <strong>Update</strong>&nbsp;to save the progress. That's all. From now on, every single library uploaded to our Maven Repository will be automatically signed and is ready to be forwarded to Maven Central in a single click.</p>
<p>Please note that this is a one-time action and would be also applied to every single library created after this.</p>
<p>Bintray and Maven Central are now prepared. Now let's switch to Android Studio part.</p>
<h2 class=\"subsection-heading\">Part 4&nbsp;: Prepare an&nbsp;Android Studio project</h2>
<p>In many cases, we might need more than 1 library to be uploaded to repository in the single project and at the same time, we might not need to upload something as well. So the best structure I would recommend is to split each part as <strong>Module</strong>. Basically I suggest you to split to at least 2 modules, one&nbsp;<em>Application Module</em> for library usage example and another one is a <em>Library Module</em> contains the source code of&nbsp;library that you wish to upload to repository. Please note that if you want to have more than 1 library in your project, please feel free to create another module:&nbsp;<span style=\"text-decoration: underline;\"><strong>1 module per 1 library</strong></span>.</p>
<p><img src=\"http://inthecheesefactory.com/uploads/source/jcenter/projectstructure.png\" alt=\"projectstructure\" /></p>
<p>I believe that all of you know how to create a library module so I will not talk to deep in this part. It is just as simply as creating an <strong>Android Library</strong> module and it's&nbsp;done.</p>
<p><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/newmodule.png\" alt=\"newmodule\" /></p>
<p>Next is to apply bintray's plugin to your project. To do that, we need to modify <span style=\"text-decoration: underline;\">project's</span> <code>build.gradle</code>&nbsp;file in dependencies part like this.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">    dependencies {
        classpath 'com.android.tools.build:gradle:1.2.3'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.4'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.3'
    }</pre>
<p><span style=\"color: #c0392b;\">It is important to set gradle build tools' version to 1.1.2 or upper since there is a critical bug in the prior versions. In this example, we will use the latest version, 1.2.3.</span></p>
<p>Next we will define the username and api key used for bintray authentication and also the password of created key by modifying <code>local.properties</code>. The reason that we need to put those things&nbsp;in this file is those information are sensitive and should not be shared to anywhere including version control. Fortunate that local.properties file is already added to .gitignore since project was created. So these sensitive data would not be uploaded to git server unintentionally.</p>
<p>Here is the three lines to add:</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">bintray.user=YOUR_BINTRAY_USERNAME
bintray.apikey=YOUR_BINTRAY_API_KEY
bintray.gpg.password=YOUR_GPG_PASSWORD
</pre>
<p>Put your bintray username in the first line and put the API Key which you could find yours at <strong>API Key</strong> tab in&nbsp;<a href=\"https://bintray.com/profile/edit\" target=\"_blank\">Edit Profile</a>&nbsp;page in the second line.</p>
<p>The last line is the passphrase you used to create GPG key in previous step. Save and close the file.</p>
<p>The last file to be modified is module's&nbsp;<code>build.gradle</code>&nbsp;file. Open it and put these lines right after&nbsp;<code>apply plugin: 'com.android.library'</code>&nbsp;like this.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">apply plugin: 'com.android.library'

ext {
    bintrayRepo = 'maven'
    bintrayName = 'fb-like'

    publishedGroupId = 'com.inthecheesefactory.thecheeselibrary'
    libraryName = 'FBLike'
    artifact = 'fb-like'

    libraryDescription = 'A wrapper for Facebook Native Like Button (LikeView) on Android'

    siteUrl = 'https://github.com/nuuneoi/FBLikeAndroid'
    gitUrl = 'https://github.com/nuuneoi/FBLikeAndroid.git'

    libraryVersion = '0.9.3'

    developerId = 'nuuneoi'
    developerName = 'Sittiphol Phanvilai'
    developerEmail = 'sittiphol@gmail.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = [\"Apache-2.0\"]
}</pre>
<p>Leave bintrayRepo as it currently is, maven. Change&nbsp;bintrayName to your package name created above.&nbsp;And also change the rest to match your library's information. From the above script, everyone would be able to use this&nbsp;library with a following line of gradle script.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">compile 'com.inthecheesefactory.thecheeselibrary:fb-like:0.9.3'</pre>
<p>Final step is to apply two scripts, used for building library files and uploading the built files to bintray, by appending the same <code>build.gradle</code> file&nbsp;with the following script <strong>at the end of the file</strong>. (I use the direct link to file hosted on github for convenience)</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">// Place it at the end of the file
apply from: 'https://raw.githubusercontent.com/nuuneoi/JCenter/master/installv1.gradle'
apply from: 'https://raw.githubusercontent.com/nuuneoi/JCenter/master/bintrayv1.gradle'
</pre>
<p>Done! Your project is now set and is ready to be uploaded to bintray. Yah !</p>
<h2 class=\"section-heading\">Part 5 : Upload library to&nbsp;your bintray space</h2>
<p>Now it's time to upload your library to <span style=\"text-decoration: underline;\">your own repository on bintray</span>.&nbsp;To do that, please go to <strong>Terminal</strong> tab on Android Studio.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/terminal.png\" alt=\"terminal\" /></p>
<p>First step is to check the correctness of code and build the library files (aar, pom, etc.). Type the below command to do so.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">&gt; gradlew install</pre>
<p>If these is nothing wrong, it would show something like:</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">BUILD SUCCESSFUL</pre>
<p>We are now halfway there. Next step is to upload the built files to bintray with following command.</p>
<pre class=\"brush:bash;auto-links:false;toolbar:false\" contenteditable=\"false\">&gt; gradlew bintrayUpload
</pre>
<p>Say eureka loudly if it shows like below&nbsp;!</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">SUCCESSFUL</pre>
<p>Check your package in the bintray web interface. You will see&nbsp;a change in Versions area.</p>
<p><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/firstuploaded.png\" alt=\"firstuploaded\" /></p>
<p>Click into it and look into <strong>Files</strong> tab and you will see the of uploaded library files placed right there.</p>
<p><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/uploadedfiles.png\" alt=\"uploadedfiles\" /></p>
<p>Congratulations, your library is now online and is ready for anyone to use it !</p>
<p>However don't too happy ... just yet. The library is still on your own Maven Repository not on jcenter yet. <span style=\"text-decoration: underline; color: #c0392b;\">If anyone want to use your library, they have to define the repository's url first like below.</span></p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">repositories {
    maven {
        url 'https://dl.bintray.com/nuuneoi/maven/'
    }
}

...

dependencies {
    compile 'com.inthecheesefactory.thecheeselibrary:fb-like:0.9.3'
}</pre>
<p>You could find the url of your own Maven Repository from bintray web interface or just simply replace nuuneoi with your bintray username. I encourage you to try browsing into that link as well and you will see what exactly is going on.</p>
<p>As mentioned above, it is not the best practices for shared library to let developer defines the complex things like this. Imagine, we have to add 10 urls to use 10 libraries? ... Nightmare&nbsp;... So let's pass our library from our own repository to jcenter for the better life quality !</p>
<h2 class=\"section-heading\">Part 6 : Sync bintray user repository to jcenter</h2>
<p>It is pretty easy to sync your library to jcenter. Just go to the web interface and simply click at&nbsp;<strong>Add to JCenter</strong></p>
<p><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/addtojcenter.png\" alt=\"addtojcenter\" /></p>
<p>Nothing to do but click <strong>Send</strong></p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/addtojcenter2.png\" alt=\"addtojcenter2\" /></p>
<p>Nothing we can do now but wait for 2-3 hours to let bintray team approves our request. Once sync request&nbsp;is approved, you will receive an email informing you the change. Now let's check the web interface, you will see some change in <strong>Linked To</strong>&nbsp;section.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/linkedto.png\" alt=\"linkedto\" /></p>
<p>From now on, any developer that use&nbsp;<code>jcenter()</code>&nbsp;repository will be able to use our library with a single line of gradle script.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">    compile 'com.inthecheesefactory.thecheeselibrary:fb-like:0.9.3'</pre>
<p>Want to check the existence of your library binary in jcenter? You could do that by go to&nbsp;<a href=\"http://jcenter.bintray.com\">http://jcenter.bintray.com </a>and browse into the directory matched your library's group id and artifact id. In this example, it would be&nbsp;<code>com&nbsp;-&gt;&nbsp;inthecheesefactory -&gt; thecheeselibrary -&gt; fb-like -&gt; 0.9.3</code></p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/fblikejcenter.png\" alt=\"fblikejcenter\" /></p>
<p>Please note that linking to jcenter is a one-time action. From now on, if you do&nbsp;any modification in&nbsp;your package, for example, upload new version binary, delete old version binary, etc. The change would affect to jcenter as well. Anyway since your own repository and jcenter are at the different place so you may need to wait for around 2-3 minutes to let jcenter sync the&nbsp;change.</p>
<p>And please be careful. If you decide to remove the whole package, library files placed on jcenter repository would not be deleted in this case. And they&nbsp;will be left just like zombie files which nobody could delete&nbsp;it anymore. So I suggest you that if you want to delete the whole package, please delete every single version from web interface first before removing the package.</p>
<h2 class=\"section-heading\">Part 7&nbsp;: Forward library to&nbsp;Maven Central</h2>
<p>Not all of android developers use jcenter. There are still a number of developers who still use <code>mavenCentral()</code> so let's upload our library to Maven Central as well.</p>
<p>To forward library from jcenter to Maven Central, there are two missions that you need to achieve&nbsp;first:</p>
<p style=\"padding-left: 30px;\">1) Bintray package must be already linked to jcenter</p>
<p style=\"padding-left: 30px;\">2) Repository on Maven Central has already been approved to open</p>
<p>If you have already passed those qualifications. The way to forward your library package to Maven Central is incredibly easy. Just simply click at <strong>Maven Central</strong>&nbsp;link on package's details page.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/syncmavencentral.png\" alt=\"syncmavencentral\" /></p>
<p>Enter your Sonatype username/password and click <strong>Sync</strong>.</p>
<p><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/syncmavencentral2.png\" alt=\"syncmavencentral2\" /></p>
<p><strong>Successfully synced and closed repo</strong> would be shown in <strong>Last Sync Status</strong> once it's done successfully. But if there is any problem, it would be shown in Last Sync Errors. You have to fix the problem case by case since the condition of library that could be uploaded to Maven Central is quite strict, for example, + sign couldn't be used in the version of library's dependency definition.</p>
<p>Once done. You could find&nbsp;your library binaries in&nbsp;<a href=\"https://oss.sonatype.org/content/repositories/releases/\" target=\"_blank\">Maven Central Repository</a>&nbsp;at the directory matched your library's group/artifact id. In this example,&nbsp;it is&nbsp;<code>com&nbsp;-&gt;&nbsp;inthecheesefactory -&gt; thecheeselibrary -&gt; fb-like -&gt; 0.9.3</code></p>
<p>Congratulations ! That's all. Although it requires quite a lot of steps but steps are&nbsp;quite straightforward. And most of them are one-time action. Once things are set, you almost have to do any additional step&nbsp;after that.</p>
<p>Such a long article but hope that you find it useful. My English might be a little bit weird right now.&nbsp;But at least, I expect that contents&nbsp;are&nbsp;apprehensible.</p>
<p>Wish to see your great library up there ! Cheers. =)</p>			") (link nil "http://inthecheesefactory.com/blog/how-to-upload-library-to-jcenter-maven-central-as-dependency/en") (pubDate nil "
				Sun, 31 May 2015 10:18:00 +0000			") (guid nil "http://inthecheesefactory.com/blog/how-to-upload-library-to-jcenter-maven-central-as-dependency/en")) (item nil (title nil "
				The Real Best Practices to Save/Restore Activity's and Fragment's state. (StatedFragment is now deprecated)			") (description nil "
				<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/fragmentstate/18.png\" /></p> 
<p>Months ago&nbsp;I published an article related to Fragment State saving &amp; restoring,&nbsp;<a href=\"../../../blog/best-approach-to-keep-android-fragment-state/en\" target=\"_blank\">Probably be the best way (?) to save/restore Android Fragment&rsquo;s state so far</a>. A lot of valuable feedback are received from Android developers all over the world. Thanks a ton to you all =)</p>
<p>Anyway <code>StatedFragment</code>&nbsp;causes a pattern breaking since it was designed to do the different way as Android is designed with an assumption that it might be easier for Android&nbsp;developer to understand Fragment's state saving/restoring if it acts just like Activity does (View's state and Instance state are handled at&nbsp;the same time). So I did an&nbsp;experiment by developed&nbsp;StatedFragment and see how is it going. Is it easier to understand? Is its pattern is more developer-friendly?</p>
<p><span style=\"color: #c0392b;\">Right now, after 2 months of experiment, I think I got a result&nbsp;already. Although StatedFragment is a little bit easier to understand but it also comes with a pretty big problem.&nbsp;It breaks a pattern design of Android's View architecture. So I think it may causes a long time problem which is totally not good. Actually I also feel weird with my codes myself already...</span></p>
<p>With this reason, <span style=\"color: #c0392b;\"><strong>I decide to mark StatedFragment as deprecated from now on</strong></span>. And as an apology&nbsp;for the mistake, I wrote this blog to show the real best practices visually&nbsp;how to save and restore Fragment's state in the&nbsp;way Android is designed. =)</p>
<h2 class=\"section-heading\">Understand what happens while&nbsp;Activity's State is&nbsp;being Saved/Restored</h2>
<p>When Activity's <code>onSaveInstanceState</code> is called. Activity will automatically collect View's State from&nbsp;every single View in the View hierachy. Please note that only View that is implemented View State Saving/Restoring internally that could be collected the data from. Once <code>onRestoreInstanceState</code> is called. Activity will send those collected data back to the View in the View hierachy that provides the same <code>android:id</code>&nbsp;as it is collected from one by one.</p>
<p>Let's see it in visualization.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/fragmentstate/activitysavestate_.gif\" alt=\"activitysavestate_\" /></p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/fragmentstate/activityrestorestate_.gif\" alt=\"activityrestorestate_\" /></p>
<p>This is the reason why text typed inside EditText still persisted even though&nbsp;Activity is already destroyed and we didn't do anything special. There is no magic. Those View State are automatically collected and restored back.</p>
<p>And this is also the reason why those View without <code>android:id</code> defined isn't able to&nbsp;restore its View's state.</p>
<p>Although those View's state are automatically saved but the Activity's member variables are not. They will be destroyed along with Activity. You have to manually save and restore them&nbsp;through&nbsp;<code>onSaveInstanceState</code>&nbsp;and&nbsp;<code>onRestoreInstanceState</code>&nbsp;method.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">public class MainActivity extends AppCompatActivity {

    // These variable are destroyed along with Activity
    private int someVarA;
    private String someVarB;

    ...

    @Override
    protected void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        outState.putInt(\"someVarA\", someVarA);
        outState.putString(\"someVarB\", someVarB);
    }

    @Override
    protected void onRestoreInstanceState(Bundle savedInstanceState) {
        super.onRestoreInstanceState(savedInstanceState);
        someVarA = savedInstanceState.getInt(\"someVarA\");
        someVarB = savedInstanceState.getString(\"someVarB\");
    }

}
</pre>
<p>That's all what you have to do to restore Activity's Instance state and View state.</p>
<h2 class=\"section-heading\">Understand what happens while Fragment's&nbsp;State is&nbsp;being Saved/Restored</h2>
<p>In case that Fragment is destroyed by the system. Everything&nbsp;will just happen exactly the same as Activity.</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/fragmentstate/fragmentstatesaving.gif\" alt=\"fragmentstatesaving\" /></p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/fragmentstate/fragmentstaterestoring_.gif\" alt=\"fragmentstaterestoring_\" /></p>
<p>It means that every single member variables are also destroyed. You have to manually save and restore those variables through&nbsp;<code>onSaveInstanceState</code>&nbsp;and&nbsp;<code>onActivityCreated</code>&nbsp;method respectively. Please note that there is no onRestoreInstanceState method inside Fragment.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">public class MainFragment extends Fragment {

    // These variable are destroyed along with Activity
    private int someVarA;
    private String someVarB;

    ...

    @Override
    public void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        outState.putInt(\"someVarA\", someVarA);
        outState.putString(\"someVarB\", someVarB);
    }

    @Override
    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        someVarA = savedInstanceState.getInt(\"someVarA\");
        someVarB = savedInstanceState.getString(\"someVarB\");
    }

}
</pre>
<p>For Fragment, there is some special case that is different from Activity and I think that you need to know about it. <span style=\"color: #c0392b;\"><strong>Once Fragment&nbsp;is returned from backstack, its View would be destroyed and recreated.</strong></span></p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/statedfragment/1-kbK7DckgeJiBgpGFQGbcog.png\" alt=\"\" width=\"317\" height=\"847\" /></p>
<p><span style=\"color: #c0392b;\"><strong>In this case, Fragment is not destroyed. Only View inside Fragment does.</strong></span>&nbsp;As a result, there is no any Instance State saving happens. But what happens to those View that is newly created by Fragment's lifecycle showed above?</p>
<p>Not a problem. Android is designed this way.&nbsp;View State Saving/Restoring are internally called&nbsp;inside Fragment in this case. As a result, every single View that is implemented a View State Saving/Restoring internally, for example <code>EditText</code> or <code>TextView</code> with <code>android:freezeText=\"true\"</code>, will be automatically saved and restored the state. Causes it to display&nbsp;just perfectly the same as previous.</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/fragmentstate/fragmentfrombackstack_.gif\" alt=\"fragmentfrombackstack_\" /></p>
<p>Please note that only View is destroyed (and recreated) in this case. Fragment is still there, just like those member variables inside.&nbsp;So you don't have to do anything with them. No any additional code is required.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">public class MainFragment extends Fragment {

    // These variable still persist in this case
    private int someVarA;
    private String someVarB;

    ...

}
</pre>
<p>You might already notice that if every single View used in this Fragment are internally implemented a View Saving/Restoring. You have no need to do anything in this case since View's state will be automatically restored and member variables inside Fragment also still persist.</p>
<p>So the first condition of Fragment's State Saving/Restoring Best Practices is ...</p>
<h2 class=\"section-heading\">Every single View used in your application must be internally implemented State Saving/Restoring</h2>
<p>Android provides a mechanic to View to save and restore View State internally through <code>onSaveInstanceState</code>&nbsp;and&nbsp;<code>onRestoreInstanceState</code>&nbsp;method. It is developer's task to implement it.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">public class CustomView extends View {

    ...

    @Override
    public Parcelable onSaveInstanceState() {
        Bundle bundle = new Bundle();
        // Save current View's state here
        return bundle;
    }

    @Override
    public void onRestoreInstanceState(Parcelable state) {
        super.onRestoreInstanceState(state);
        // Restore View's state here
    }

    ...

}
</pre>
<p>Basically every single standard View such as EditText, TextView, Checkbox and etc. are all already internally implemented those things. Anyway you may need to enable it for some View for example you have to set <code>android:freezeText</code> to true for <code>TextView</code> to use the feature.</p>
<p>But if we talk about 3rd Party Custom View distributed all over the internet. I must say that many of them aren't implemented this part of code&nbsp;yet&nbsp;which may cause a big problem in real use.</p>
<p><span style=\"color: #c0392b;\">If you decide to use any of 3rd Party Custom View, you have to be&nbsp;sure that it is already implemented View State Saving/Restoring internally or you have to create a subclass derived from that Custom View and implement <code>onSaveInstanceState</code>/<code>onRestoreInstanceState</code> yourself.</span></p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">//
// Assumes that SomeSmartButton is a 3rd Party view that
// View State Saving/Restoring are not implemented internally
//
public class SomeBetterSmartButton extends SomeSmartButton {

    ...

    @Override
    public Parcelable onSaveInstanceState() {
        Bundle bundle = new Bundle();
        // Save current View's state here
        return bundle;
    }

    @Override
    public void onRestoreInstanceState(Parcelable state) {
        super.onRestoreInstanceState(state);
        // Restore View's state here
    }

    ...

}
</pre>
<p>And if you create your own&nbsp;Custom View or Custom Viewgroup, don't forget to implement those two methods as well. It is really important that every single type of View used in the application&nbsp;is implemented&nbsp;this part.</p>
<p>And also don't forget to assign&nbsp;<code>android:id</code>&nbsp;attribute to every single View placed in the layout&nbsp;that you need to enable View State Saving and Restoring or it will not be able to restore the state at all.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">    &lt;EditText
        android:id=\"@+id/editText1\"
        android:layout_width=\"match_parent\"
        android:layout_height=\"wrap_content\" /&gt;

    &lt;EditText
        android:id=\"@+id/editText2\"
        android:layout_width=\"match_parent\"
        android:layout_height=\"wrap_content\" /&gt;

    &lt;CheckBox
        android:id=\"@+id/cbAgree\"
        android:text=\"I agree\"
        android:layout_width=\"wrap_content\"
        android:layout_height=\"wrap_content\" /&gt;</pre>
<p>We are now halfway there!</p>
<h2 class=\"section-heading\">Clearly seperate&nbsp;Fragment State from&nbsp;View State</h2>
<p>To make your code&nbsp;be clean and scalable, you have to seperate Fragment State and View State from each other. If any property is belonged to View, do the state saving/restoring inside View. If any property is belonged to Fragment, do it inside Fragment. Here is an example:</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">public class MainFragment extends Fragment {

    ...

    private String dataGotFromServer;
    
    @Override
    public void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        outState.putString(\"dataGotFromServer\", dataGotFromServer);
    }

    @Override
    public void onActivityCreated(Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        dataGotFromServer = savedInstanceState.getString(\"dataGotFromServer\");
    }

    ...

}
</pre>
<p><span style=\"color: #c0392b;\">Let me repeat again. Don't save View's State inside Fragment's onSaveInstanceState and vice versa.</span></p>
<p>That's all. It is the Best Practices on how to Save/Restore Activity's,&nbsp;Fragment's and View's State. Hope you find this piece of information useful =)</p>
<h2 class=\"section-heading\">Goodbye&nbsp;StatedFragment, say Hi to NestedActivityResultFragment</h2>
<p>Please do the way described&nbsp;above to Save/Restore Activity's, Fragment's and View's State. And&nbsp;let me mark <code>StatedFragment</code> as <strong>deprecated</strong> now.</p>
<p>However StatedFragment's functionality to retrieve onActivityResult in Nested Fragment is still good to go. To prevent any&nbsp;confusion in the future, I decide to seperate that functionality to a new class <code>NestedActivityResultFragment</code>&nbsp;available from v0.10.0 onwards.</p>
<p>More information about it is now available&nbsp;at&nbsp;<a href=\"https://github.com/nuuneoi/StatedFragment\">https://github.com/nuuneoi/StatedFragment</a>. Please feel free to check it&nbsp;anytime !</p>
<p>Hope that the visualization in this blog helps you understand about the way to restore Activity's, Fragment's and View's State&nbsp;clearly. So sorry for the confusion in the previous article. ^^\"</p>			") (link nil "http://inthecheesefactory.com/blog/fragment-state-saving-best-practices/en") (pubDate nil "
				Mon, 27 Apr 2015 20:20:00 +0000			") (guid nil "http://inthecheesefactory.com/blog/fragment-state-saving-best-practices/en")) (item nil (title nil "
				How to add a Native Facebook Like Button to your Android app using Facebook SDK for Android v4			") (description nil "
				<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/facebooklike/cover.jpg\" /></p> 
<p>Like button is one of the most important strategy to increase traffic to your website. No surprise why Facebook introduced a Native Like Button, <code>LikeView</code>,&nbsp;allowed developer to add Like button natively to their&nbsp;Android/iOS apps.</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/facebooklike/likes.png\" alt=\"likes\" /></p>
<p>Anyway although it sounds easy as we do on website but it is not like that. If we just place LikeView on application's layout, it works but with limited functionality for example like count and like status aren't showed, doesn't work on device without Facebook app installed, etc.</p>
<p>After digging through Facebook SDK's source code. I found that&nbsp;<span style=\"color: #d35400;\"><strong>LikeView is designed to work full functionally when application is connected to Facebook app only</strong></span>. And well ... AFAIK&nbsp;there is no any document mentioned about this.</p>
<p>After a couple of&nbsp;experiments, finally I found the sustainable way to make LikeView works full functionally and still be a good user experience practice.&nbsp;Let's go through it&nbsp;step-by-step.</p>
<h2 class=\"section-heading\">Create a&nbsp;Facebook App</h2>
<p>As mentioned above, application is needed to be connected with Facebook app to make LikeView works full functionally. So the first step is to create a Facebook app.</p>
<p>To do so, just browse to&nbsp;<a href=\"https://developers.facebook.com/apps\">https://developers.facebook.com/apps</a>&nbsp;and then press&nbsp;<strong>Add a New App</strong>&nbsp;to start creating a new Facebook app.</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/facebooklike/addnewapp.png\" alt=\"addnewapp\" /></p>
<p>Enter your preferred Facebook App and then press&nbsp;<strong>Create New Facebook App ID</strong></p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/facebooklike/newapp2.jpg\" alt=\"newapp2\" /></p>
<p>Choose a&nbsp;Category and press&nbsp;<strong>Create App ID</strong></p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/facebooklike/categoryselection.jpg\" alt=\"categoryselection\" /></p>
<p>You will now be redirected&nbsp;into Facebook App settings page. Please scroll to bottom and fill in those fields about your Android project: <strong>Package Name</strong> and <strong>Default Activity Class Name</strong>. Press <strong>Next</strong>.</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/facebooklike/classes.jpg\" alt=\"classes\" /></p>
<p>Here comes a little bit complicated part. To make your android app works flawlessly with Facebook App in debug and production mode, you have to&nbsp;fill in <strong>Debug Key Hash</strong> and <strong>Release Key Hash </strong>respectively.</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/facebooklike/keyhashesbefore.jpg\" alt=\"keyhashesbefore\" /></p>
<p>There are two ways to generate those key hashes: through command line and through Java code.</p>
<h2 class=\"subsection-heading\">Method 1&nbsp;- Through&nbsp;Command Line</h2>
<p>In case you use <strong>Mac</strong> or <strong>Linux</strong> and you already install <code>keytool</code> (comes along with JDK) and <code>openssl</code>. You could simple do the following&nbsp;through Command Line:</p>
<pre class=\"brush:ps;auto-links:false;toolbar:false\" contenteditable=\"false\">keytool -exportcert -alias androiddebugkey -keystore ~/.android/debug.keystore | openssl sha1 -binary | openssl base64</pre>
<p>Or like this on <strong>Windows</strong>:</p>
<pre class=\"brush:ps;auto-links:false;toolbar:false\" contenteditable=\"false\">keytool -exportcert -alias androiddebugkey -keystore %HOMEPATH%\\.android\\debug.keystore | openssl sha1 -binary | openssl base64</pre>
<p><span style=\"color: #d35400;\">Enter the hashed key got in both&nbsp;<strong>Development Key Hashes </strong>and<strong>&nbsp;Release Key Hash </strong>fields.</span></p>
<p>And the following command is used to generate a Key Hash for Deployment Keystore to let your app works with Facebook app in production mode.</p>
<pre class=\"brush:ps;auto-links:false;toolbar:false\" contenteditable=\"false\">keytool --exportcert -alias ENTER_ALIAS_HERE -keystore PATH_TO_KEYSTORE.keystore | openssl sha1 -binary | openssl base64</pre>
<p>Put the generated&nbsp;key in&nbsp;<strong>Release Key Hash </strong>field.</p>
<h2 class=\"subsection-heading\">Method 2&nbsp;- Through&nbsp;Java Code</h2>
<p>In case you didn't install keytool and openssl yet and you don't want to. You could generate those key hashes through Java code with the code snippet below. <span style=\"color: #c0392b;\">Please don't forget to change the package name to your app's.</span></p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">        try {
            PackageInfo info = getPackageManager().getPackageInfo(
                    \"com.inthecheesefactory.lab.facebooklike\",
                    PackageManager.GET_SIGNATURES);
            for (Signature signature : info.signatures) {
                MessageDigest md = MessageDigest.getInstance(\"SHA\");
                md.update(signature.toByteArray());
                Log.d(\"KeyHash:\", Base64.encodeToString(md.digest(), Base64.DEFAULT));
            }
        } catch (PackageManager.NameNotFoundException e) {

        } catch (NoSuchAlgorithmException e) {

        }</pre>
<p>To generate&nbsp;Development&nbsp;Key Hash, you could simply run your app directly from your IDE and copy the generated key hash sent back in logcat, put it in both&nbsp;<strong>Development Key Hashes</strong>&nbsp;and&nbsp;<strong>Release Key Hash </strong>fields<strong>.</strong></p>
<p>To generate&nbsp;Release Key Hash, you need to sign your application with keystore you plan to use in production apk. Run the signed apk in your device or emulator and put generated&nbsp;Key Hash to&nbsp;<strong>Release Key Hash&nbsp;</strong>field.</p>
<p><em><span style=\"color: #e67e22;\">Please note that Key Hash for production release could be filled in later. The important one for now is Development Key Hash which you need to put in both Development Key Hashes and&nbsp;Release Key Hash&nbsp;fields.</span></em></p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/facebooklike/keyhashes2.jpg\" alt=\"keyhashes2\" /></p>
<p>Press <strong>Next</strong>&nbsp;and scroll to the bottom of the page and then press&nbsp;<strong>Skip to Developer Dashboard</strong>&nbsp;to enter&nbsp;your just-created app's&nbsp;Dashboard.</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/facebooklike/skiptodashboard.jpg\" alt=\"skiptodashboard\" /></p>
<p>Copy <strong>App ID</strong>&nbsp;for future use.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/facebooklike/appid.jpg\" alt=\"appid\" /></p>
<p>You are now done creating a Facebook App !</p>
<h2 class=\"section-heading\">Setup&nbsp;Facebook SDK in your project</h2>
<p>Now let's switch to client part. First of all, simply add a&nbsp;dependency for Facebook SDK v4 which is now (finally) available over mavenCentral and jcenter.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">dependencies {
    compile 'com.facebook.android:facebook-android-sdk:4.0.1'
}
</pre>
<p>Add a string resource for Facebook Application ID like code below. (Change the number to your Facebook app's ID)</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;string name=\"app_id\"&gt;1459806660978042&lt;/string&gt;</pre>
<p>Place the code below into&nbsp;<code>AndroidManifest.xml</code>&nbsp;right&nbsp;before&nbsp;<code>&lt;/application&gt;</code>&nbsp;and <span style=\"color: #d35400;\"><strong>it's important to&nbsp;</strong><strong>change the number after FacebookContentProvider to your Facebook app's ID.</strong></span></p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">        &lt;!-- Facebook --&gt;
        &lt;activity android:name=\"com.facebook.FacebookActivity\"
            android:theme=\"@android:style/Theme.Translucent.NoTitleBar\"
            android:configChanges=\"keyboard|keyboardHidden|screenLayout|screenSize|orientation\"
            android:label=\"@string/app_name\" /&gt;
        &lt;meta-data android:name=\"com.facebook.sdk.ApplicationName\"
            android:value=\"@string/app_name\" /&gt;
        &lt;meta-data android:name=\"com.facebook.sdk.ApplicationId\" android:value=\"@string/app_id\"/&gt;

        &lt;provider android:authorities=\"com.facebook.app.FacebookContentProvider1459806660978042\"
            android:name=\"com.facebook.FacebookContentProvider\"
            android:exported=\"true\"/&gt;</pre>
<p>INTERNET permission is needed for&nbsp;LikeView. Don't forget to add this line inside&nbsp;<code>AndroidManifest.xml</code>&nbsp;before&nbsp;<code>&lt;application&gt;</code>.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;uses-permission android:name=\"android.permission.INTERNET\"/&gt;</pre>
<p>If you haven't done making a <strong>Custom Application</strong> class yet, do it and add line of codes below to initialize Facebook SDK in v4 way.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">public class MainApplication extends Application {

    @Override
    public void onCreate() {
        super.onCreate();

        FacebookSdk.sdkInitialize(getApplicationContext());
   }
}</pre>
<p>Give a check that Custom Application is already defined in&nbsp;<code>AndroidManifest.xml</code>.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">    &lt;application
        android:allowBackup=\"true\"
        android:icon=\"@mipmap/ic_launcher\"
        android:label=\"@string/app_name\"
        android:theme=\"@style/AppTheme\"
        android:name=\".MainApplication\" &gt;</pre>
<p>And you are now done setting up Facebook SDK in your Android app =D</p>
<h2 class=\"section-heading\">Play with&nbsp;LikeView</h2>
<p>Your app is now ready. Let's play a little bit with&nbsp;LikeView&nbsp;by simply placing it on layout.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;com.facebook.share.widget.LikeView
        android:id=\"@+id/likeView\"
        android:layout_width=\"wrap_content\"
        android:layout_height=\"wrap_content\"/&gt;</pre>
<p>And do the following in Java code to set up its appearance.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">LikeView likeView = (LikeView) findViewById(R.id.likeView);
likeView.setLikeViewStyle(LikeView.Style.STANDARD);      
likeView.setAuxiliaryViewPosition(LikeView.AuxiliaryViewPosition.INLINE);</pre>
<p>Set LikeView's url through <code>setObjectIdAndType</code> method.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">likeView.setObjectIdAndType(
        \"http://inthecheesefactory.com/blog/understand-android-activity-launchmode/en\",
        LikeView.ObjectType.OPEN_GRAPH)</pre>
<p>Here is the result. It works !</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/facebooklike/exp0.jpg\" alt=\"exp0\" /></p>
<p>Anyway it appears that it doesn't work perfectly just yet. Here are&nbsp;the two big concerns.</p>
<p><span style=\"color: #c0392b;\"><strong>Problem&nbsp;1: Like count and status aren't showed until you press Like button.</strong></span></p>
<p><span style=\"color: #e74c3c;\"><strong>Problem&nbsp;2: Doesn't work in device that Facebook App is not installed.</strong></span></p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/facebooklike/exp1.jpg\" alt=\"exp1\" /></p>
<p>The reason is already described above. LikeView works full functionally only in app that has already connected with Facebook App. Totally different with one in website which works perfectly without login required. (And yes, it is by designed. And also yes, I am curious why Facebook has designed&nbsp;it this way ...)</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/facebooklike/onweb.png\" alt=\"onweb\" /></p>
<p>Some workaround is needed. Facebook Login is required to make LikeView showed otherwise Login button with the same appearance as LikeView will come up instead.</p>
<p>There is nothing complicated. I just simply create a Login button using LinearLayout and let it be together with LikeView in RelativeLayout.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">...
&lt;RelativeLayout
    android:layout_width=\"wrap_content\"
    android:layout_height=\"wrap_content\"&gt;

    &lt;!-- Login Button in the same style as LikeView --&gt;
    &lt;LinearLayout
        android:id=\"@+id/btnLoginToLike\"
        android:background=\"@drawable/com_facebook_button_like_background\"
        android:layout_width=\"wrap_content\"
        android:layout_height=\"wrap_content\"
        android:orientation=\"horizontal\"
        android:clickable=\"true\" &gt;

        &lt;ImageView
            android:src=\"@drawable/com_facebook_button_icon\"
            android:layout_width=\"wrap_content\"
            android:layout_height=\"wrap_content\"
            android:layout_marginLeft=\"8dp\"
            android:layout_marginRight=\"8dp\"
            android:layout_marginTop=\"7.5dp\"
            android:layout_marginBottom=\"7.5dp\"/&gt;

        &lt;TextView
            android:id=\"@+id/tvLogin\"
            android:text=\"Login\"
            android:layout_marginLeft=\"2dp\"
            android:layout_marginRight=\"8dp\"
            android:textColor=\"@android:color/white\"
            android:textStyle=\"bold\"
            android:layout_gravity=\"center_vertical\"
            android:layout_width=\"wrap_content\"
            android:layout_height=\"wrap_content\"/&gt;

    &lt;/LinearLayout&gt;

    &lt;com.facebook.share.widget.LikeView
        android:id=\"@+id/likeView\"
        android:layout_width=\"wrap_content\"
        android:layout_height=\"wrap_content\"/&gt;

&lt;/RelativeLayout&gt;
...</pre>
<p>And then do the logic in Java code&nbsp;with some help&nbsp;of&nbsp;<code>LoginManager</code>, <code>CallbackManager</code>&nbsp;and&nbsp;<code>AccessToken</code>&nbsp;provided in Facebook SDK for Android v4 to manage a Login flow and status checking.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">public class MainActivity extends Activity {
    
    LinearLayout btnLoginToLike;
    LikeView likeView;
    CallbackManager callbackManager;

    
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        initInstances();
        initCallbackManager();
        refreshButtonsState();
    }

    private void initInstances() {
        btnLoginToLike = (LinearLayout) findViewById(R.id.btnLoginToLike);
        likeView = (LikeView) findViewById(R.id.likeView);
        likeView.setLikeViewStyle(LikeView.Style.STANDARD);
        likeView.setAuxiliaryViewPosition(LikeView.AuxiliaryViewPosition.INLINE);

        btnLoginToLike.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View v) {
                LoginManager.getInstance().logInWithReadPermissions(MainActivity.this, Arrays.asList(\"public_profile\"));
            }
        });
    }

    private void initCallbackManager() {
        callbackManager = CallbackManager.Factory.create();
        LoginManager.getInstance().registerCallback(callbackManager, new FacebookCallback&lt;LoginResult&gt;() {
            @Override
            public void onSuccess(LoginResult loginResult) {
                refreshButtonsState();
            }

            @Override
            public void onCancel() {

            }

            @Override
            public void onError(FacebookException e) {

            }
        });
    }

    private void refreshButtonsState() {
        if (!isLoggedIn()) {
            btnLoginToLike.setVisibility(View.VISIBLE);
            likeView.setVisibility(View.GONE);
        } else {
            btnLoginToLike.setVisibility(View.GONE);
            likeView.setVisibility(View.VISIBLE);
        }
    }

    public boolean isLoggedIn() {
        return AccessToken.getCurrentAccessToken() != null;
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        // Handle Facebook Login Result
        callbackManager.onActivityResult(requestCode, resultCode, data);
    }
}
</pre>
<p>It's done. Let's see the result =)</p>
<h2 class=\"section-heading\">Result</h2>
<p>If the application isn't connected to Facebook app yet. Our custom Login Button would be showed instead of LikeView as designed.</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/facebooklike/btnLogin2.png\" alt=\"btnLogin2\" /></p>
<p>Once Login Button is clicked, it will redirect user to Login process.</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/facebooklike/loginprocess.png\" alt=\"loginprocess\" /></p>
<p>After user is logged in, Login Button will be hidden and replaced with LikeView. You will see that Like count and Like status are also showed up perfectly just like one on website. Yah ! If a url is changed, those number and status are also automatically changed to match the information associated to an entered url.</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/facebooklike/loggedin.png\" alt=\"loggedin\" /></p>
<p>If user press Like, it will affect the button embedded on website as well.</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/facebooklike/liked.png\" alt=\"liked\" /></p>
<p><span style=\"color: #16a085;\"><strong>A by-product of this method is LikeView button also works on the device without Facebook application installed. It means that it works even on Chrome or on ARC Welder !</strong></span></p>
<p style=\"text-align: center;\"><span style=\"color: #16a085;\"><strong><img src=\"http://inthecheesefactory.com/uploads/source/facebooklike/arcwelder.jpg\" alt=\"arcwelder\" /></strong></span></p>
<h2 class=\"section-heading\">Known bug</h2>
<p>Although it is close enough to&nbsp;perfect but there is still some known bug. If like is done on website, like status on application will not be updated. And we couldn't do anything but wait for Facebook engineer to fix this issue.</p>
<h2 class=\"section-heading\">FBLikeAndroid Library</h2>
<p>To make it as easy as possible to use. I made a library to do a&nbsp;job for you. <span style=\"color: #2980b9;\"><strong>FBLikeAndroid</strong> is a library comes up with Login Button that will change to Native Like Button automatically when application is connected to Facebook app.</span></p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/facebooklike/fblikeandroid.png\" alt=\"fblikeandroid\" /></p>
<p>To use it, you have to create a Facebook app and setup your project as written&nbsp;above. And then simply add the following dependency to your app's&nbsp;<code>build.gradle</code>. <span style=\"color: #16a085;\">Please note that Facebook SDK v4 is already included in this dependency so you have no need to add any additional dependency.</span></p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">dependencies {
    compile 'com.inthecheesefactory.thecheeselibrary:fb-like:0.9.3'
}</pre>
<p>Place&nbsp;<code>com.inthecheesefactory.lib.fblike.widget.FBLikeView</code>&nbsp;anywhere to start using the component.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;com.inthecheesefactory.lib.fblike.widget.FBLikeView
        android:id=\"@+id/fbLikeView\"
        android:layout_width=\"wrap_content\"
        android:layout_height=\"wrap_content\"/&gt;</pre>
<p>LikeView inside FBLikeView is already set the appearance to STANDARD so you have no need to set it again unless you need to change its&nbsp;style. To access LikeView attached inside, you could do it through a getter function,&nbsp;<code>getLikeView()</code>. The following code is used to set a url for LikeView.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">FBLikeView fbLikeView = (FBLikeView) rootView.findViewById(R.id.fbLikeView);
fbLikeView.getLikeView().setObjectIdAndType(
        \"http://inthecheesefactory.com/blog/understand-android-activity-launchmode/en\",
        LikeView.ObjectType.OPEN_GRAPH);</pre>
<p>The final&nbsp;step, you have to call&nbsp;<code>FBLikeView.onActivityResult</code>&nbsp;in every single Activity's <code>onActivityResult</code> to connect FBLikeView buttons to Facebook Login flow.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        FBLikeView.onActivityResult(requestCode, resultCode, data);
    }</pre>
<p>That's all ! Easy, huh? =D</p>
<p>If you want to disconnect your android app to Facebook app, simply call the following command. The button will be automatically changed to Login state.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">FBLikeView.logout();</pre>
<p>Source Code of FBLikeAndroid&nbsp;Library is available&nbsp;at&nbsp;<a href=\"https://github.com/nuuneoi/FBLikeAndroid\">https://github.com/nuuneoi/FBLikeAndroid</a>. Please feel free to take a look or contribute anytime =)</p>
<h2 class=\"section-heading\">Submit for public use</h2>
<p>Right now LikeView works only with Facebook app's administrator, you.&nbsp;To make LikeView works for everyone, you need to send a submission to Facebook team.&nbsp;Here is the steps to do so:</p>
<p>1) Enter your Facebook App's&nbsp;<strong>App Details</strong>&nbsp;page.&nbsp;Enter&nbsp;<strong>Long Description</strong>, <strong>Privacy Policy URL</strong>&nbsp;and also upload&nbsp;<strong>App Icon</strong>&nbsp;you desired.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/facebooklike/appdetails.jpg\" alt=\"appdetails\" /></p>
<p>2) Enter&nbsp;<strong>Status &amp; Review</strong>&nbsp;page&nbsp;and press&nbsp;<strong>Start a Submission</strong></p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/facebooklike/submission1.png\" alt=\"submission1\" /></p>
<p>3) Check a&nbsp;<strong>Native Like Button</strong>&nbsp;box and press&nbsp;<strong>Add 1 Item</strong></p>
<p style=\"text-align: center;\"><strong><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/facebooklike/submission2.png\" alt=\"submission2\" /></strong></p>
<p>4) Press&nbsp;<strong>Add Notes</strong>&nbsp;placed next to Native Like Button item and provide step-by-step instructions how Native Like Button works in your app. From my experience, provide a link of visual image works far better than just typing some texts.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/facebooklike/AddNotes.jpg\" alt=\"AddNotes\" /></p>
<p>5) <strong>Upload&nbsp;apk file</strong>, upload your app's&nbsp;<strong>Screenshots (4 minimum)</strong>, check at&nbsp;<strong>I have tested that my application loads on all of the above platforms</strong>&nbsp;box and then&nbsp;press&nbsp;<strong>Submit for Review</strong></p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/facebooklike/submission3.jpg\" alt=\"submission3\" /></p>
<p>6) Enter&nbsp;<strong>Contact Email</strong>&nbsp;in&nbsp;<strong>Settings </strong>page</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/facebooklike/submission4.jpg\" alt=\"submission4\" /></p>
<p>7) The final step is to make created Facebook app be available to public&nbsp;by set the following button to <strong>On</strong>&nbsp;in&nbsp;<strong>Status &amp; Review </strong>page</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/facebooklike/submission5.jpg\" alt=\"submission5\" /></p>
<p>Do some hiking, fishing, snoggle diving and wait for a day or two to get a result from Facebook team. By average, it takes 2-3 times to let the it approved&nbsp;so please do it at least a week before your application is publicly launched.</p>
<p>This is what it looks like in <strong>Status &amp; Review</strong> page when the submission is approved.</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/facebooklike/submissionpassed.png\" alt=\"submissionpassed\" /></p>
<p>Once you got something like above, your LikeView will work for anyone !</p>
<p>Hope you find this article useful and ... don't forget to give a like or some +1 to this article ! =)</p>			") (link nil "http://inthecheesefactory.com/blog/how-to-add-facebook-like-button-in-android-app/en") (pubDate nil "
				Mon, 27 Apr 2015 09:52:00 +0000			") (guid nil "http://inthecheesefactory.com/blog/how-to-add-facebook-like-button-in-android-app/en")) (item nil (title nil "
				Understand Android Activity's launchMode: standard, singleTop, singleTask and singleInstance			") (description nil "
				<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/standardgalleryl.jpg\" /></p> 
<p>Activity is one of the most brilliant concept on Android from its well-design architecture on memory management which lets Multitasking works&nbsp;perfectly on this most popular mobile operating system.</p>
<p>Anyway, Activity is not just to be launched on the screen. The way it is launched is also concerned. There are so many details in this topic. One of those that is really important&nbsp;is <strong>launchMode</strong>, which is the one that we are going to talk about in this blog.</p>
<p>Since each Activity is made to work in&nbsp;different purpose. Some is designed to work separately with each Intent sent for example an&nbsp;Activity for email composing in email client.&nbsp;While some is designed to work as a singleton for example an&nbsp;email's inbox Activity.</p>
<p>That's why it does matter&nbsp;to specify whether&nbsp;Activity is needed to be created a new one or to use the existed one, or it may leads to the bad UX or malfunctional. Thanks to Android's core engineer. It is the way easy to make it done with some help of&nbsp;<strong>launchMode</strong>&nbsp;which is designed for this especially.</p>
<h2 class=\"section-heading\">Assign a&nbsp;launchMode</h2>
<p>Basically we could assign a launchMode directly as an attribute of&nbsp;<code>&lt;activity&gt;</code>&nbsp;tag&nbsp;inside&nbsp;<code>AndroidManifest.xml</code>&nbsp;file list this:</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;activity
            android:name=\".SingleTaskActivity\"
            android:label=\"singleTask launchMode\"
            android:launchMode=\"singleTask\"&gt;</pre>
<p>There are 4 types of launchMode available. Let's see it one by one.</p>
<h2 class=\"section-heading\">standard</h2>
<p>This is the&nbsp;default mode.</p>
<p>The behavior of Activity set to this mode is a new Activity will always be created to work separately with each Intent sent. Imagine, if there are 10 Intents sent to compose an email, there should be 10 Activities launch to serve each&nbsp;Intent separately. As a result, there could be an unlimited number of this kind of Activity launched in a&nbsp;device.</p>
<p><span style=\"color: #d35400;\"><strong>Behavior on Android&nbsp;pre-Lollipop</strong></span></p>
<p>This kind of Activity would be created and placed on top of stack in the same task as one that&nbsp;sent an Intent.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/standardtopstandard.jpg\" alt=\"standardtopstandard\" /></p>
<p>An image below shows what will happen when we share an image to a standard Activity. It will be stacked in the same task as described although they are from the different application.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/standardgallery2.jpg\" alt=\"standardgallery2\" /></p>
<p>And this is what you will see in the Task Manager. (A little bit weird may be)</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/gallerystandard.jpg\" alt=\"gallerystandard\" /></p>
<p>If we switch the application to the another one and then switch back to Gallery, we will&nbsp;still see that standard launchMode place on top of Gallery's task. As a result, if we need to do anything with Gallery, we have to finish our job in that additional Activity first.</p>
<p><span style=\"color: #16a085;\"><strong>Behavior&nbsp;on Android Lollipop</strong></span></p>
<p>If those Activities are from the same application, it will work just like on pre-Lollipop, stacked on top of the task.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/standardstandardl.jpg\" alt=\"standardstandardl\" /></p>
<p>But in case that an Intent is sent from a different application. New task will be created and the newly created Activity will be placed as a root Activity like below.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/standardgalleryl.jpg\" alt=\"standardgalleryl\" /></p>
<p>And this is what you will see in Task Manager.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/gallerystandardl1.jpg\" alt=\"gallerystandardl1\" /></p>
<p>This happens because Task Management system is modified in Lollipop to make it better and more make sense. In Lollipop, you can just switch back to Gallery since they are in the different Task. You can fire another Intent, a new&nbsp;Task will be created to serve an Intent as same as the previous one.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/gallerystandardl2.jpg\" alt=\"gallerystandardl2\" /></p>
<p>An example of this kind of Activity is a <strong>Compose Email Activity</strong> or a <strong>Social Network's Status Posting Activity</strong>. If you think about an Activity that can work separately to serve&nbsp;an separate Intent, think about <strong>standard</strong> one.</p>
<h2 class=\"section-heading\">singleTop</h2>
<p>The next mode is <strong>singleTop</strong>. It acts almost the same as <strong>standard</strong> one which means that singleTop Activity instance could be created as many as we want. Only difference is if there already is an Activity instance with the same type at the top of stack in the caller Task, there would not be any new Activity created, instead an Intent will be sent to an existed Activity instance through <code>onNewIntent()</code> method.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/singletop.jpg\" alt=\"singletop\" /></p>
<p>In singleTop mode, you have to handle an incoming Intent in both <code>onCreate()</code> and <code>onNewIntent()</code> to make it works for all the cases.</p>
<p>A sample use case of this mode is a Search function. Let's think about creating a search box which will lead you to a SearchActivity to see the search result. For better UX,&nbsp;normally we always put a&nbsp;search box in the search result page as well to enable user&nbsp;to do another search without pressing back.</p>
<p>Now imagine, if we always launch a new SearchActivity to serve new search result, 10 new Activities for 10 searching. It would be&nbsp;extremely weird when you press back since you have to press back for 10 times to pass through those search result Activities to get back to your root Activity.</p>
<p>Instead, if there is SearchActivity on top of stack, we better send an Intent to an existed Activity instance and let it update the search result. Now there will be&nbsp;only one SearchActivity placed on top of stack and you can simply press just back button for a single time to get back to previous Activity.&nbsp;Makes a lot more sense now.</p>
<p>Anyway singleTop works with the same task as caller only. If you expect an Intent to be sent to an existed Activity placed on top of any other Task, I have to&nbsp;disappoint you by&nbsp;saying that it doesn't work that way. In case Intent is sent from another application to an singleTop Activity, a new Activity would be launched in&nbsp;the same aspect as standard launchMode&nbsp;<em>(pre-Lollipop: placed on top of the caller Task, Lollipop: a&nbsp;new Task would be created)</em>.</p>
<h2 class=\"section-heading\">singleTask</h2>
<p>This mode is quite different from standard and singleTop. <span style=\"color: #c0392b;\"><strong>An Activity with singleTask launchMode is allowed to&nbsp;have only one instance in the system (a.k.a. Singleton).</strong></span>&nbsp;If there is an existed Activity instance in the system, the whole Task hold the instance would be moved to top while Intent would be delivered through <code>onNewIntent()</code> method.&nbsp;Otherwise, new Activity&nbsp;would be created and placed in the proper Task.</p>
<p><span style=\"color: #2980b9;\"><strong>Working in the same application</strong></span></p>
<p>If there is no that singleTask Activity instance existed in the system yet, new one would be created and&nbsp;simply placed on top of stack in the same Task.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/singleTask1.jpg\" alt=\"singleTask1\" /></p>
<p><em><span style=\"color: #d35400;\">But if there is an existed one, all of Activities placed above&nbsp;that singleTask Activity would be automatically and cruelly destroyed in the proper way (lifecycle trigged) to make that an Activity we want to appear on top of stack. </span></em>In the mean time, an Intent would be&nbsp;sent to the singleTask Activity through the lovely&nbsp;<code>onNewIntent()</code>&nbsp;method.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/singleTaskD.jpg\" alt=\"singleTaskD\" /></p>
<p>Doesn't make a good sense in term of user experience but it&nbsp;is designed this way ...</p>
<p>You may notice one thing that it is mentioned in <a href=\"http://developer.android.com/guide/components/tasks-and-back-stack.html\" target=\"_blank\">document</a> that</p>
<blockquote>The system creates a new task and instantiates the activity at the root of the new task.</blockquote>
<p><span style=\"color: #c0392b;\">But from the experiment, it&nbsp;doesn't seem to work as described.</span> A singleTask Activity still stack up on top of the Task's Activity stack as we can see from what <code>dumpsys activity</code> command shows up.</p>
<pre class=\"brush:plain;auto-links:false;toolbar:false\" contenteditable=\"false\">Task id #239
  TaskRecord{428efe30 #239 A=com.thecheesefactory.lab.launchmode U=0 sz=2}
  Intent { act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10000000 cmp=com.thecheesefactory.lab.launchmode/.StandardActivity }
    Hist #1: ActivityRecord{429a88d0 u0 com.thecheesefactory.lab.launchmode/.SingleTaskActivity t239}
      Intent { cmp=com.thecheesefactory.lab.launchmode/.SingleTaskActivity }
      ProcessRecord{42243130 18965:com.thecheesefactory.lab.launchmode/u0a123}
    Hist #0: ActivityRecord{425fec98 u0 com.thecheesefactory.lab.launchmode/.StandardActivity t239}
      Intent { act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10000000 cmp=com.thecheesefactory.lab.launchmode/.StandardActivity }
      ProcessRecord{42243130 18965:com.thecheesefactory.lab.launchmode/u0a123}</pre>
<p>If you wish to to let a singleTask Activity acts like described in document:&nbsp;create a new Task and put an Activity as a root Activity. You need to assign&nbsp;<code>taskAffinity</code>&nbsp;attribute to the singleTask Activity like this.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;activity
            android:name=\".SingleTaskActivity\"
            android:label=\"singleTask launchMode\"
            android:launchMode=\"singleTask\"
            android:taskAffinity=\"\"&gt;</pre>
<p>This is a result when we try to launch <code>SingleTaskActivity</code>.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/singleTaskTaskAffinity.jpg\" alt=\"singleTaskTaskAffinity\" /></p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/screenshot17.jpg\" alt=\"screenshot17\" /></p>
<p>It's your job to consider whether&nbsp;to use <code>taskAffinity</code> or not by the behavior of the Activity.</p>
<p><span style=\"color: #c0392b;\"><strong>Collaborate with another application</strong></span></p>
<p>Once an Intent is sent from another application and there is no any Activity instance created in the system yet, <span style=\"text-decoration: underline;\">new Task would be created</span> with a newly created Activity placed as a root Activity.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/singleTaskAnotherApp1.jpg\" alt=\"singleTaskAnotherApp1\" /></p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/singletaskfromapp2.jpg\" alt=\"singletaskfromapp2\" /></p>
<p>Unless&nbsp;there is a Task of the&nbsp;application that is an owner of the calling&nbsp;singleTask Activity&nbsp;existed, a newly created Activity would be placed on top of it instead.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/singleTaskAnotherApp2.jpg\" alt=\"singleTaskAnotherApp2\" /></p>
<p><em><span style=\"color: #c0392b;\">In case that there is an Activity instance existed&nbsp;in any Task, the whole Task would be moved to top and every single Activity placed above the singleTask Activity will be destroyed with&nbsp;lifecycle.&nbsp;</span></em>If back button is pressed, user has to travel through the Activities in the stack before going back to the caller&nbsp;Task.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/singleTaskAnotherApp3.jpg\" alt=\"singleTaskAnotherApp3\" /></p>
<p>A sample use case of this mode is any Entry Point Activity for example Email Client's Inbox page or Social Network's Timeline. Those Activities are not designed to have more than one instance so singleTask would do a job perfectly. Anyway you have to use this mode wisely since Activities could be destroyed without user's acknowledgement in this mode like described above.</p>
<h2 class=\"section-heading\">singleInstance</h2>
<p>This mode is quite close to singleTask, only single instance of Activity could be existed in the system. <span style=\"color: #d35400;\"><strong>The difference is Task hold this Activity could have only one Activity, the singleInstance one.</strong></span> If&nbsp;another Activity is called from this kind of Activity, a new Task would be automatically created to place that new Activity. Likewise, if singleInstance Activity is called, new Task would be created to place the Activity.</p>
<p>Anyway the result is quite weird. From the information provided by <code>dumpsys</code>, it appears that there are two Tasks in the system but there is only one appeared in Task Manager depends on which is latest one that is moved to top. As a result, although there is a Task that is still working in the background but we couldn't switch it back to foreground. Doesn't make any sense at all.</p>
<p>This is what that happened when singleInstance Activity is called while there already&nbsp;is some&nbsp;Activity&nbsp;existed in the stack.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/singleInstance.jpg\" alt=\"singleInstance\" /></p>
<p>But this is what we see from Task Manager.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/singleInstances.jpg\" alt=\"singleInstances\" /></p>
<p>Since this Task could has only one Activity, we couldn't switch back to Task #1 anymore. Only&nbsp;way to do so is to relaunch the application from launcher but it appears that the singleInstance Task would be hidden in the background instead.</p>
<p>Anyway there is some workaround for the issue. Just like we did with singleTask Acvity, simply assign a <code>taskAffinity</code> attribute to the singleInstance Activity to enable multiple Tasks on Task Manager.</p>
<pre class=\"brush:plain;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;activity
            android:name=\".SingleInstanceActivity\"
            android:label=\"singleInstance launchMode\"
            android:launchMode=\"singleInstance\"
            android:taskAffinity=\"\"&gt;</pre>
<p>It makes more sense now.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/screenshot18.jpg\" alt=\"screenshot18\" /></p>
<p>This mode is rarely used. Some of the real use case is an Activity for Launcher or the application that you are 100% sure there is only one Activity. Anyway I suggest you not to use this mode unless it is really necessary.</p>
<h2 class=\"section-heading\">Intent Flags</h2>
<p>Beside from assigning the launch mode directly in <code>AndroidManifest.xml</code>, we&nbsp;are also able to assign more behavior through thing called&nbsp;<strong>Intent Flags</strong>,&nbsp;for example:</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">Intent intent = new Intent(StandardActivity.this, StandardActivity.class);
intent.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);
startActivity(intent);
</pre>
<p>would launch a&nbsp;<code>StandardActivity</code>&nbsp;with&nbsp;singleTop launchMode condition.</p>
<p>There are quite a lot of Flags you can play with. You could find more about it at <a href=\"http://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_BROUGHT_TO_FRONT\" target=\"_blank\">Intent</a>.</p>
<p>Hope you find this article useful =)</p>			") (link nil "http://inthecheesefactory.com/blog/understand-android-activity-launchmode/en") (pubDate nil "
				Wed, 15 Apr 2015 10:01:00 +0000			") (guid nil "http://inthecheesefactory.com/blog/understand-android-activity-launchmode/en")) (item nil (title nil "
				How to install Google Play Services on Genymotion Step by Step			") (description nil "
				<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/genymotion/covergenmotion.jpg\" /></p> 
<p>Due to Genymotion's fluidness and ease of use, it now becomes the most popular android emulator allows&nbsp;android developers to test their app directly on their computer.</p>
<p>However, it still lacks of Google Services just like Google Play Store, Google Maps, etc. on Genymotion emulator which&nbsp;makes us developer not be able to test those functionalities that use Google Services for example GCM Push Notifications or Google Maps.</p>
<p>Anyway it is not a problem anymore since there is some simple steps to do to make Google Services be avaiable on Genymotion with some help from <strong>CyanogenMod's gapps</strong>.</p>
<p><strong>Step 1: Install&nbsp;ARM Translation</strong> - The secret behind Genymotion's fluidness is its ROM is compiled to x86 to match the most popular computer's CPU Architecture. But CyanogenMod's gapps is compiled in ARM. That's the reason why we can't just simply install gapps on Genymotion. To make it works, we need to install an <strong>ARM Translation</strong> which will let those ARM apps be able to run on this x86 virtual device.</p>
<p>To install, download&nbsp;<a href=\"http://filetrip.net/dl?4SUOrdcMRv\" target=\"_blank\">Genymotion-ARM-Translation_v1.1zip</a>&nbsp;and then drop&amp;drop the downloaded file to an opened Genymotion virtual device. After file transfering is done, there will be a confirmation dialog like below. Just simple click <strong>OK</strong> to flash it on virtual device.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/genymotion/armtranslationflash.jpg\" alt=\"armtranslationflash\" /></p>
<p>There will be an another dialog to let you know that the&nbsp;flashing process is done.&nbsp;</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/genymotion/armtranslationflashed.jpg\" alt=\"armtranslationflashed\" /></p>
<p>You need to reboot the virtual device now but we don't suggest to just close the virtual device and relaunch&nbsp;it once again since it may leads to some weird behaviour. To make it done completely find, you need to reboot the device through command line like this:</p>
<pre class=\"brush:bash;auto-links:false;toolbar:false\" contenteditable=\"false\">adb reboot</pre>
<p>In case you accidentally close the virtual device, don't be panic. You might need to relaunch for a few times before it can&nbsp;boot up.</p>
<p><strong>Step 2: Install gapps</strong> - Before we go on to the next step, you need to download the flashable zip of gapps by your virtual device's Android version:</p>
<p><a href=\"https://www.androidfilehost.com/?fid=95784891001614559\" target=\"_blank\">Android 5.0.x</a>, <a href=\"https://www.androidfilehost.com/?fid=95832962473395379\" target=\"_blank\">Android 4.4.x</a>, <a href=\"https://www.androidfilehost.com/?fid=23060877490000124\" target=\"_blank\">Android 4.3.x</a>, <a href=\"https://www.androidfilehost.com/?fid=23060877490000128\" target=\"_blank\">Android 4.2.x</a>, <a href=\"https://www.androidfilehost.com/?fid=22979706399755082\" target=\"_blank\">Android 4.1.x</a>, <a href=\"https://www.androidfilehost.com/?fid=22979706399755108\" target=\"_blank\">Android 4.0.x</a>, <a href=\"https://www.androidfilehost.com/?fid=22979706399755027\" target=\"_blank\">Android 2.3.3</a></p>
<p>And then drop&amp;drop the downloaded file to a virtual device like previous and go through the flashing process.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/genymotion/flashgapps.jpg\" alt=\"flashgapps\" /></p>
<p>Reboot the virtual device once again.</p>
<pre class=\"brush:bash;auto-links:false;toolbar:false\" contenteditable=\"false\">adb reboot</pre>
<p>After the virtual device is booted up, you will notice that <strong>Google Play services has stopped</strong>&nbsp;problem will keep popping up like this:</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/genymotion/unfortunate.jpg\" alt=\"unfortunate\" /></p>
<p>Don't be surprised and don't panic. You did it all right. This error happens because the installed gapps is just&nbsp;too old and didn't match the latest ROM Genymotion provided. All you need to do is be patient and login to Google Play Store and update all of installed app.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/genymotion/updateall.jpg\" alt=\"updateall\" /></p>
<p>And also don't forget to update <strong>Google Play Services</strong>&nbsp;as well. It should be notified through the&nbsp;device's notification area after your pressed the <em>Update All</em> button in Google Play Store.</p>
<p>Congratulations, Google Play Services are now available on your Genymotion virtual device. A by-product of this installation is you are also able to run the app compiled in ARM on Genymotion as well.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/genymotion/done.jpg\" alt=\"done\" /></p>
<p>Hope you find this article helpful. =)</p>
<p><strong>Source:</strong> <a href=\"http://forum.xda-developers.com/showthread.php?t=2528952\" target=\"_blank\">XDA-Developers</a>, <a href=\"http://wiki.cyanogenmod.org/w/Google_Apps\" target=\"_blank\">CyanogenMod</a></p>			") (link nil "http://inthecheesefactory.com/blog/how-to-install-google-services-on-genymotion/en") (pubDate nil "
				Sun, 12 Apr 2015 11:37:00 +0000			") (guid nil "http://inthecheesefactory.com/blog/how-to-install-google-services-on-genymotion/en")) (item nil (title nil "
				Introduction to Glide, Image Loader Library for Android, recommended by Google			") (description nil "
				<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/glidepicasso/cover.jpg\" /></p> 
<p>In the passed Google Developer Summit Thailand, Google introduced us an Image Loader Library for Android developed by bumptech named <a href=\"https://github.com/bumptech/glide\" target=\"_blank\">Glide</a>&nbsp;as a library that recommended by Google. It has been used in many Google open source projects till now including Google I/O 2014 official application.</p>
<p>It succeeded in making me interested. I spent a whole night playing with it and decided to&nbsp;share&nbsp;&nbsp;my experience&nbsp;in this blog post. As a begining, I must say that it looks 90% similar to Picasso. To be more precise, I think it is something like a Picasso-clone.</p>
<p>Anyway it is quite different in details. You will learn how.</p>
<p><span class=\"section-heading\">Import to project</span></p>
<p>Both Picasso and Glide are on jcenter. You can simply import it to your project with&nbsp;dependency like this:</p>
<p class=\"code-caption\"><strong>Picasso<br /></strong></p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">dependencies {
    compile 'com.squareup.picasso:picasso:2.5.1'
}</pre>
<p class=\"code-caption\"><strong>Glide</strong></p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">dependencies {
    compile 'com.github.bumptech.glide:glide:3.5.2'
    compile 'com.android.support:support-v4:22.0.0'
}</pre>
<p>Anyway Glide also needs <strong>Android Support Library v4</strong>, please don't forget to import&nbsp;<code>support-v4</code>&nbsp;to your project like above as well. But it is not kind of a problem since Android Support Library v4 is basically needed in every single new-age Android project.</p>
<p><span class=\"section-heading\">Basic</span></p>
<p>As I said, it is very similar to Picasso. The way to load an image to ImageView with Glide is quite the same as Picasso.</p>
<p class=\"code-caption\"><strong>Picasso</strong></p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">Picasso.with(context)
    .load(\"http://inthecheesefactory.com/uploads/source/glidepicasso/cover.jpg\")
    .into(ivImg);</pre>
<p class=\"code-caption\"><strong>Glide</strong></p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">Glide.with(context)
    .load(\"http://inthecheesefactory.com/uploads/source/glidepicasso/cover.jpg\")
    .into(ivImg);</pre>
<p>Although it looks quite the same but in details Glide is designed far better since <code>with</code> doesn't accept only Context but also Activity and Fragment. Context will be automatically extracted from those things you throw in.</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/glidepicasso/with.png\" alt=\"with\" /></p>
<p>And the brilliant benefit from passing Activity/Fragment to Glide is: image loading&nbsp;would be integrated with Activity/Fragment's lifecycle for example, pause loading in Paused state and automatically resume on Resumed state. So I encourage you to pass the Activity or Fragment to Glide not just a Context if possible.</p>
<p><span class=\"section-heading\">Default Bitmap Format is&nbsp;RGB_565</span></p>
<p>Here is the result of image loading comparing to Picasso. (1920x1080 pixels image is loaded into&nbsp;768x432 pixels ImageView)</p>
<p><a href=\"http://inthecheesefactory.com/uploads/source/glidepicasso/firstload.jpg\" target=\"_blank\"><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/glidepicasso/firstload.jpg\" alt=\"firstload\" /></a></p>
<p>You can notice that image loaded by Glide has the worse quality compared to Picasso. Why? This is because Glide default Bitmap Format is set to <code>RGB_565</code>&nbsp;since it consumed just 50% memory footprint compared to <code>ARGB_8888</code>.</p>
<p>Here is the memory&nbsp;consumption graphs between Picasso at ARGB8888&nbsp;and&nbsp;Glide at RGB565. (Base application consumes around&nbsp;8MB)</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/glidepicasso/ram1_1.png\" alt=\"ram1_1\" /></p>
<p>You don't have to do anything&nbsp;if you are ok with the image's quality&nbsp;already. But if think it&nbsp;is unacceptable or just not good enough for you, you can switch Bitmap Format to <code>ARGB_8888</code>&nbsp;by creating a new class which extended from <code>GlideModule</code> like this:</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">public class GlideConfiguration implements GlideModule {

    @Override
    public void applyOptions(Context context, GlideBuilder builder) {
        // Apply options to the builder here.
        builder.setDecodeFormat(DecodeFormat.PREFER_ARGB_8888);
    }

    @Override
    public void registerComponents(Context context, Glide glide) {
        // register ModelLoaders here.
    }
}</pre>
<p>And then define it as <code>meta-data</code>&nbsp;inside&nbsp;<code>AndroidManifest.xml</code></p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;meta-data android:name=\"com.inthecheesefactory.lab.glidepicasso.GlideConfiguration\"
            android:value=\"GlideModule\"/&gt;</pre>
<p>It&nbsp;looks far better now!</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/glidepicasso/quality2.jpg\" alt=\"quality2\" /></p>
<p>Let's take a look at memory consumption graphs once again. It appears that although Glide consumes almost 2 times than previous but Picasso still consumes a lot memory footprint more than Glide.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/glidepicasso/ram2_1.png\" alt=\"ram2_1\" /></p>
<p>The reason is Picasso loads the full-size image (1920x1080 pixels) into the memory and let GPU does the real-time resizing when drawn. While Glide loads the exact ImageView-size (768x432 pixels) into the memory which is a best practice. Anyway you can change the behavior of Picasso to do&nbsp;the same with&nbsp;<code>resize()</code> command:</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">Picasso.with(this)
    .load(\"http://nuuneoi.com/uploads/source/playstore/cover.jpg\")
    .resize(768, 432)
    .into(ivImgPicasso);</pre>
<p>But the problem is you need to manually calculate the ImageView's size. Or if your ImageView has the exact size (not set to wrap_content), you can simply do like this.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">Picasso.with(this)
    .load(\"http://nuuneoi.com/uploads/source/playstore/cover.jpg\")
    .fit()
    .centerCrop()
    .into(ivImgPicasso);</pre>
<p>Memory consumption graphs&nbsp;are&nbsp;now finally almost the same !</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/glidepicasso/memory3.png\" alt=\"memory3\" /></p>
<p>Although memory consumption are quite the same but I must say that Glide beats Picasso in term of functionality of this part since it could calculate the ImageView size automatically in every single case.</p>
<p><span class=\"section-heading\">Image's quality in details</span></p>
<p>Here is the result when I tried to zoom an ImageView to the actual size.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/glidepicasso/quality3.png\" alt=\"quality3\" /></p>
<p>It is noticeable that image loaded by Glide has some hard pixels&nbsp;and is not as smooth as the Picasso one. And&nbsp;till now, I still couldn't find the straight way to change image resizing algorithm.</p>
<p><span style=\"color: #16a085;\">But if you ask me is it bad? I would say that it is not that noticeable in&nbsp;real use. Quality is acceptable but you just need to set Bitmap Format to ARGB_8888, that's all.</span></p>
<p><span class=\"section-heading\">Disk Caching<br /></span></p>
<p>Default disk caching concept&nbsp;of&nbsp;Picasso and&nbsp;Glide are quite different. From the experiment, the same Full HD image is loaded into ImageView with Picasso and Glide. When I checked the cache folder, it appears that&nbsp;Glide cached the ImageView-size (768x432 pixels) while Picasso cached the full-size one&nbsp;(1920x1080 pixels).</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/glidepicasso/cache.jpg\" alt=\"cache\" /></p>
<p>And yes, hard pixels&nbsp;described above is also&nbsp;there. In addition,&nbsp;if image is loaded&nbsp;in RGB565 mode, the cached image will be also in RGB565.</p>
<p>When I tried to adjust ImageView to the&nbsp;different sizes. The result is whatever the size is, Picasso will cache only single size of image, the full-size one. Glide acts differently, caches separate file&nbsp;for&nbsp;each&nbsp;size of ImageView. Although an image has already been loaded once but if you need&nbsp;to load another size the same image, it needs to be downloaded once again before&nbsp;be resized to the right&nbsp;resolution and then be&nbsp;cached.</p>
<p>To be more clear, if there is an ImageView in the first page with 200x200 pixels dimension and there is the another one in the second page with 100x100 pixels that are needed to show the same image. You have to download the same image twice.</p>
<p>Anyway you could adjust its behavior by <span style=\"color: #2980b9;\">let Glide cache&nbsp;both the full-size image and the resized one</span> with this command.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">        Glide.with(this)
             .load(\"http://nuuneoi.com/uploads/source/playstore/cover.jpg\")
             .diskCacheStrategy(DiskCacheStrategy.ALL)
             .into(ivImgGlide);</pre>
<p>The next time image is requested to show on any ImageView, the full-size image would be loaded from cache, resized and then cached.</p>
<p>An advantage&nbsp;of the way Glide was designed is image could be loaded and showed very fast. While the Picasso way causes some delay on loading since it needs to be resized first before is&nbsp;set to an ImageView even you add this command to make it showed immediately.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">//Picasso
.noFade();</pre>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/glidepicasso/loading3.gif\" alt=\"loading3\" /></p>
<p>There is some trade off between Picasso's and Glide's way of disk caching. You can&nbsp;choose the way fit your app's requirement best.</p>
<p>For me, I prefer Glide to&nbsp;Picasso since it is far faster&nbsp;although it needs more space to cache the image.</p>
<p><span class=\"section-heading\">Features<br /></span></p>
<p>You can do almost all the same&nbsp;things just like Picasso can&nbsp;do with the same style&nbsp;of coding&nbsp;for example, <strong>Image Resizing</strong></p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">// Picasso
.resize(300, 200);

// Glide
.override(300, 200);</pre>
<p><strong>Center Cropping</strong></p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">// Picasso
.centerCrop();

// Glide
.centerCrop();</pre>
<p><strong>Transforming</strong></p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">// Picasso
.transform(new CircleTransform())

// Glide
.transform(new CircleTransform(context))</pre>
<p>Setting the <strong>Placeholder</strong>&nbsp;and&nbsp;<strong>Error&nbsp;</strong>image</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">// Picasso
.placeholder(R.drawable.placeholder)
.error(R.drawable.imagenotfound)

// Glide
.placeholder(R.drawable.placeholder)
.error(R.drawable.imagenotfound)</pre>
<p>As I said, if you are familiar with Picasso, moving to Glide would be just like chewing a candy&nbsp;for you. =)</p>
<p><span class=\"section-heading\">What that Glide has but Picasso&nbsp;doesn't</span></p>
<p>An&nbsp;ability to load <span style=\"color: #16a085;\"><strong>GIF Animation&nbsp;</strong></span>to a simple ImageView&nbsp;might be the most interesting feature of Glide. And yes, you can't do that with&nbsp;Picasso.</p>
<p><img src=\"http://inthecheesefactory.com/uploads/source/glidepicasso/gifanimation2.gif\" alt=\"gifanimation2\" /></p>
<p>And since Glide is designed to work perfectly with Activity/Fragment's lifecycle so the animation would be automatically paused and resumed&nbsp;along with Activity/Fragment's state.</p>
<p>The way Glide caches is still be the same, resized first and then&nbsp;cached.</p>
<p>Anyway from an&nbsp;measurement I found that <span style=\"color: #d35400;\">GIF Animation consumes quite a lot of memory</span>. Please use it wisely.</p>
<p>Besides GIF Animation loading, Glide is also able to&nbsp;decode any <em>local</em> video file to a still image.</p>
<p>Another feature that might be useful is you can configure the way image appears&nbsp;with an&nbsp;Animator (R.animator) while Picasso could do only one animation, fading in.</p>
<p>The last one if you could <span style=\"color: #16a085;\">generate a thumbnail file of an image you loaded</span>&nbsp;with <code>thumbnail()</code>.</p>
<p>Actually there are some other features you can play with but most of them are not that important for general use for example, transcode an image into Byte Array, etc.</p>
<p><span class=\"section-heading\">Configurations</span></p>
<p>You can adjust so many configurations for example, size and location of disk caching, maximum limit&nbsp;of memory caching, Bitmap Format and many more. You can read more about this at&nbsp;<a href=\"https://github.com/bumptech/glide/wiki/Configuration\" target=\"_blank\">Configuration</a>&nbsp;page.</p>
<p><span class=\"section-heading\">Library's size</span></p>
<p>Picasso (v2.5.1)'s size is around 118KB while&nbsp;Glide (v3.5.2)'s is around 430KB.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/glidepicasso/librarysize.png\" alt=\"librarysize\" /></p>
<p>Anyway 312KB difference might not be that significant.</p>
<p>Method count of Picasso and Glide are at 840 and 2678 respectively.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/glidepicasso/methodcount.png\" alt=\"methodcount\" /></p>
<p>I must say 2678 is quite a lot for 65535 methods limit of Android DEX file. ProGuard is recommended to turn on if you choose Glide. (And you should turn it on anyway for production release).</p>
<p><span class=\"section-heading\">Conclusion<br /></span></p>
<p>Neither Glide nor&nbsp;Picasso is&nbsp;perfect. The way Glide loads an image to memory and do the caching is better than Picasso which let&nbsp;an image loaded far faster. In addition, it also helps preventing an app from popular OutOfMemoryError.&nbsp;GIF Animation loading is a killing feature provided by Glide. Anyway&nbsp;Picasso decodes an image&nbsp;with better&nbsp;quality than Glide.</p>
<p>Which one do I prefer? Although I use Picasso for such a very long time, I must admit that I now prefer Glide. <span style=\"color: #27ae60;\">But I would recommend you to change Bitmap Format to ARGB_8888 and let Glide cache both full-size image and resized one first. The rest would do your job&nbsp;great!</span></p>
<p><span class=\"section-heading\">Resources<br /></span></p>
<p>There are not so many online resources related to Glide. But here are what I found. Please take a look on links below.</p>
<p>-&nbsp;<a href=\"http://google-opensource.blogspot.com/2014/09/glide-30-media-management-library-for.html\" target=\"_blank\">Glide 3.0: a media management library for Android</a></p>
<p>- <a href=\"https://github.com/bumptech/glide/wiki\" target=\"_blank\">Glide Wiki</a></p>
<p>-&nbsp;<a href=\"http://pluu.github.io/blog/android-studio/2015/01/15/android-glide-picasso/\" target=\"_blank\">Android Picasso vs Glide</a></p>
<p>-&nbsp;<a href=\"http://vardhan-justlikethat.blogspot.com/2014/09/android-image-loading-libraries-picasso.html\" target=\"_blank\">Android: Image loading libraries Picasso vs Glide</a></p>			") (link nil "http://inthecheesefactory.com/blog/get-to-know-glide-recommended-by-google/en") (pubDate nil "
				Mon, 23 Mar 2015 17:46:00 +0000			") (guid nil "http://inthecheesefactory.com/blog/get-to-know-glide-recommended-by-google/en")) (item nil (title nil "
				Correct the ImageView's adjustViewBounds behaviour on API Level 17 and below with AdjustableImageView			") (description nil "
				<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/adjustableimageview/cover.jpg\" /></p> 
<p>A requirement that almost every single application has is <strong>\"I want to scale up an ImageView proportionally to fit its parent. How can&nbsp;I do that?\"&nbsp;</strong>Like this:</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/adjustableimageview/adjustviewbounds.jpg\" alt=\"adjustviewbounds\" width=\"600\" /></p>
<p>Actually ImageView has already come with this capability. You can just simply set <code>android:adjustViewBounds</code>&nbsp;to&nbsp;<code>true</code>&nbsp;and that's all.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;ImageView
    android:layout_width=\"match_parent\"
    android:layout_height=\"wrap_content\"
    android:adjustViewBounds=\"true\"
    android:src=\"@mipmap/ic_launcher\" /&gt;</pre>
<p>Here is the result.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/adjustableimageview/22_1.png\" alt=\"22_1\" width=\"600\" /></p>
<p>Everything looks fine? Actually not. If you switch your preview version to API Level 17 or below, you will see that ImageView&nbsp;doesn't scale up anymore.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/adjustableimageview/17_1.png\" alt=\"17_1\" width=\"600\" /></p>
<p>It is not a bug but a correct behaviour that is&nbsp;officially&nbsp;noted&nbsp;in the&nbsp;<a href=\"http://developer.android.com/reference/android/widget/ImageView.html#setAdjustViewBounds(boolean)\" target=\"_blank\">documentation</a>.</p>
<blockquote><strong>Note:</strong> If the application targets API level 17 or lower, adjustViewBounds will allow the drawable to shrink the view bounds, but not grow to fill available measured space in all cases. This is for compatibility with legacy <code><a href=\"http://developer.android.com/reference/android/view/View.MeasureSpec.html\">MeasureSpec</a></code> and <code><a href=\"http://developer.android.com/reference/android/widget/RelativeLayout.html\">RelativeLayout</a></code> behavior.</blockquote>
<p>It means that in API Level 17 and below, the maximum width and maximum height are bounded to the size of image defined in <code>android:src</code>. As a result, it happens like picture above.</p>
<p>Have a small look at Market Share of Android Platform Versions. It appears that Android phone running API Level 17 and below takes almost 50% share.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/adjustableimageview/platformversions.png\" alt=\"platformversions\" /></p>
<p>It is not a good solution to set minSdkVersion to 18 just to avoid this problem.</p>
<p>It is far better to modify some ImageView's source&nbsp;code to give it&nbsp;an API Level 18+'s behavior and use it instead of a normal ImageView. Here it comes, a Custom ImageView that does the job !</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">import android.content.Context;
import android.graphics.drawable.Drawable;
import android.util.AttributeSet;
import android.view.ViewGroup;
import android.view.ViewParent;
import android.widget.ImageView;

/**
 * Created by nuuneoi on 2/17/15 AD.
 */
public class AdjustableImageView extends ImageView {

    boolean mAdjustViewBounds;

    public AdjustableImageView(Context context) {
        super(context);
    }

    public AdjustableImageView(Context context, AttributeSet attrs) {
        super(context, attrs);
    }

    public AdjustableImageView(Context context, AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
    }

    @Override
    public void setAdjustViewBounds(boolean adjustViewBounds) {
        mAdjustViewBounds = adjustViewBounds;
        super.setAdjustViewBounds(adjustViewBounds);
    }

    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        Drawable mDrawable = getDrawable();
        if (mDrawable == null) {
            super.onMeasure(widthMeasureSpec, heightMeasureSpec);
            return;
        }

        if (mAdjustViewBounds) {
            int mDrawableWidth = mDrawable.getIntrinsicWidth();
            int mDrawableHeight = mDrawable.getIntrinsicHeight();
            int heightSize = MeasureSpec.getSize(heightMeasureSpec);
            int widthSize = MeasureSpec.getSize(widthMeasureSpec);
            int heightMode = MeasureSpec.getMode(heightMeasureSpec);
            int widthMode = MeasureSpec.getMode(widthMeasureSpec);

            if (heightMode == MeasureSpec.EXACTLY &amp;&amp; widthMode != MeasureSpec.EXACTLY) {
                // Fixed Height &amp; Adjustable Width
                int height = heightSize;
                int width = height * mDrawableWidth / mDrawableHeight;
                if (isInScrollingContainer())
                    setMeasuredDimension(width, height);
                else
                    setMeasuredDimension(Math.min(width, widthSize), Math.min(height, heightSize));
            } else if (widthMode == MeasureSpec.EXACTLY &amp;&amp; heightMode != MeasureSpec.EXACTLY) {
                // Fixed Width &amp; Adjustable Height
                int width = widthSize;
                int height = width * mDrawableHeight / mDrawableWidth;
                if (isInScrollingContainer())
                    setMeasuredDimension(width, height);
                else
                    setMeasuredDimension(Math.min(width, widthSize), Math.min(height, heightSize));
            } else {
                super.onMeasure(widthMeasureSpec, heightMeasureSpec);
            }
        } else {
            super.onMeasure(widthMeasureSpec, heightMeasureSpec);
        }
    }

    private boolean isInScrollingContainer() {
        ViewParent p = getParent();
        while (p != null &amp;&amp; p instanceof ViewGroup) {
            if (((ViewGroup) p).shouldDelayChildPressedState()) {
                return true;
            }
            p = p.getParent();
        }
        return false;
    }
}
</pre>
<p>The way these codes work is&nbsp;straightforward. It would calculate the height proportionally in case the width is fixed and vice versa inside <code>onMeasure</code>. In case this <code>AdjustableImageView</code> object is placed inside non-scrollable container, width and height would be limited to the space left in parent. Otherwise, it would be scaled up without any restriction.</p>
<p>To use it, simply change <code>ImageView</code> to <code>com.inthecheesefactory.thecheeselibrary.widget.AdjustableImageView</code>&nbsp;in the layout xml.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;com.inthecheesefactory.thecheeselibrary.widget.AdjustableImageView
    android:layout_width=\"match_parent\"
    android:layout_height=\"wrap_content\"
    android:adjustViewBounds=\"true\"
    android:src=\"@mipmap/ic_launcher\" /&gt;</pre>
<p>And it is now done !</p>
<h2 class=\"section-heading\">Make it easy with AdjustableImageView Library</h2>
<p>We know that it is such a boring task creating a file, copy&nbsp;the code, paste it, reformat, check if&nbsp;everything is right, blah blah blah.</p>
<p>Your life is now 10 times easier with the library dependency we prepared for you. It is now live on jcenter. Once you add the dependency to your project,&nbsp;<code>AdjustableImageView</code>&nbsp;and&nbsp;<code>AdjustableImageButton</code>&nbsp;will be ready to make your day. Source codes of this library&nbsp;are hosted on&nbsp;<a href=\"https://github.com/nuuneoi/AdjustableImageView\" target=\"_blank\">GitHub</a>. Please feel free to have a look.</p>
<p>Here is the gradle dependency. Just simply add this line to your<code>build.gradle</code></p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">dependencies {
    compile 'com.inthecheesefactory.thecheeselibrary:adjustable-imageview:1.0.0'
}</pre>
<p><code>AdjustableImageView</code>&nbsp;and&nbsp;<code>AdjustableImageButton</code>&nbsp;are now ready to use&nbsp;inside&nbsp;<code><span class=\"pl-ent\">com</span>.inthecheesefactory.thecheeselibrary.widget.*</code>&nbsp;package.</p>
<p>Simply replace ImageView and&nbsp;ImageButton&nbsp;with those classes provided by the library.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"
    xmlns:tools=\"http://schemas.android.com/tools\" android:layout_width=\"match_parent\"
    android:layout_height=\"match_parent\"
    android:orientation=\"vertical\"
    tools:context=\".MainActivity\"&gt;

    &lt;ScrollView
        android:layout_width=\"match_parent\"
        android:layout_height=\"match_parent\"
        android:fillViewport=\"true\"&gt;

        &lt;LinearLayout android:layout_width=\"match_parent\"
            android:layout_height=\"match_parent\"
            android:orientation=\"vertical\"&gt;

            &lt;com.inthecheesefactory.thecheeselibrary.widget.AdjustableImageView
                android:layout_width=\"match_parent\"
                android:layout_height=\"wrap_content\"
                android:adjustViewBounds=\"true\"
                android:src=\"@mipmap/ic_launcher\"/&gt;

            &lt;com.inthecheesefactory.thecheeselibrary.widget.AdjustableImageView
                android:layout_width=\"match_parent\"
                android:layout_height=\"wrap_content\"
                android:adjustViewBounds=\"true\"
                android:src=\"@mipmap/ic_launcher\"/&gt;
        &lt;/LinearLayout&gt;

    &lt;/ScrollView&gt;

&lt;/LinearLayout&gt;
</pre>
<p>As a result, ImageView is now scaled up perfectly no matter which Android version the application&nbsp;is running on.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/adjustableimageview/final.png\" alt=\"final\" width=\"600\" /></p>
<p>This is a good&nbsp;example why we should install multiple SDK Platforms in the machine and not just the latest one. Since if you want to let Android Studio preview your layout with&nbsp;specific Android version, you need to install SDK Platform for that version or it wouldn't be listed as a choice in preview pane. Per my suggestion, you should install every single SDK Platform from&nbsp;API Level 14 on. Loss some disk space but what that you get back&nbsp;is worthy.</p>			") (link nil "http://inthecheesefactory.com/blog/correct-imageview-adjustviewbounds-with-adjustable-imageview/en") (pubDate nil "
				Fri, 13 Mar 2015 20:10:00 +0000			") (guid nil "http://inthecheesefactory.com/blog/correct-imageview-adjustviewbounds-with-adjustable-imageview/en")))) ("Bring back your childhood memories in 360Â° photos experience !" "<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/360/cover.jpg\" /></p>
<p>360&deg; photo is among the top grossing trends in internet world these days. What's about to bring&nbsp;you&nbsp;back your childhood memories in this 2016 trend?</p>
<p>No need to imagine how it is. Let us show you. Here we go !</p>
<p style=\"text-align: center;\">[360]http://inthecheesefactory.com/uploads/source/360/Mario.jpg[/360]</p>
<p style=\"text-align: center;\">[360]http://inthecheesefactory.com/uploads/source/360/Contra.jpg[/360]</p>
<p style=\"text-align: center;\">[360]http://inthecheesefactory.com/uploads/source/360/Rockman.jpg[/360]</p>
<p style=\"text-align: center;\">[360]http://inthecheesefactory.com/uploads/source/360/Circus.jpg[/360]</p>
<p style=\"text-align: center;\">[360]http://inthecheesefactory.com/uploads/source/360/Pokemon.jpg[/360]</p>
<p>Or if you wanna view these photos on Facebook, you can check them out in this <a href=\"https://www.facebook.com/nuuneoi/media_set?set=a.10209214853464575.1073741850.1118131684&amp;type=3\" target=\"_blank\">Childhood memories in 360 photos experience</a> album !</p>
<p>Time flies really fast, huh?</p>" "http://inthecheesefactory.com/blog/retro-childhood-in-360-photos-experience/en" (22406 23104) old 3 nil nil ((title nil "
				Bring back your childhood memories in 360Â° photos experience !			") (description nil "
				<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/360/cover.jpg\" /></p> 
<p>360&deg; photo is among the top grossing trends in internet world these days. What's about to bring&nbsp;you&nbsp;back your childhood memories in this 2016 trend?</p>
<p>No need to imagine how it is. Let us show you. Here we go !</p>
<p style=\"text-align: center;\">[360]http://inthecheesefactory.com/uploads/source/360/Mario.jpg[/360]</p>
<p style=\"text-align: center;\">[360]http://inthecheesefactory.com/uploads/source/360/Contra.jpg[/360]</p>
<p style=\"text-align: center;\">[360]http://inthecheesefactory.com/uploads/source/360/Rockman.jpg[/360]</p>
<p style=\"text-align: center;\">[360]http://inthecheesefactory.com/uploads/source/360/Circus.jpg[/360]</p>
<p style=\"text-align: center;\">[360]http://inthecheesefactory.com/uploads/source/360/Pokemon.jpg[/360]</p>
<p>Or if you wanna view these photos on Facebook, you can check them out in this <a href=\"https://www.facebook.com/nuuneoi/media_set?set=a.10209214853464575.1073741850.1118131684&amp;type=3\" target=\"_blank\">Childhood memories in 360 photos experience</a> album !</p>
<p>Time flies really fast, huh?</p>			") (link nil "http://inthecheesefactory.com/blog/retro-childhood-in-360-photos-experience/en") (pubDate nil "
				Wed, 13 Jul 2016 15:12:00 +0000			") (guid nil "http://inthecheesefactory.com/blog/retro-childhood-in-360-photos-experience/en"))) ("Google's Awareness API in action. Make your application be User's Context-Aware." "<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/awareness/cover4.jpg\" /></p>
<p>In the passed Google I/O 2016, the biggest annual developer conference organized by Google, very promising&nbsp;API named Awareness API was announced. Here is the 35 mins recorded session in the event.</p>
<p style=\"text-align: center;\">[youtube]37ia7S4Lsv4[/youtube]</p>
<p>Good news ! API has just been publicly released&nbsp;few days ago. After playing around in many possible ways, I must say that&nbsp;Awareness API is very interesting and give you a chance to enable rich feature to your application with just few lines of code. This blog will give you information about this amazing API in details. Here we go !</p>
<h2 class=\"section-heading\">What is&nbsp;Awareness API?</h2>
<p>Here is the definition of&nbsp;Awareness API&nbsp;given by Google</p>
<blockquote><span style=\"font-size: 18pt;\">A unified sensing platform enabling applications to be aware of multiple aspects of a users context, while managing battery and memory health.</span></blockquote>
<p>Sounds confusing? Yup, may be. Anyway, actually this API is pretty easy and straightforward. It was made to bring you a capability to <strong>work with data related to user's current context</strong>, for example,</p>
<p style=\"padding-left: 30px;\">- Local time of user's current&nbsp;location</p>
<p style=\"padding-left: 30px;\">- Weather information&nbsp;of place where user currently is</p>
<p style=\"padding-left: 30px;\">- User activity: Walking, biking, running, etc.</p>
<p style=\"padding-left: 30px;\">- Do something when user moves close to&nbsp;the specific&nbsp;coordinate</p>
<p style=\"padding-left: 30px;\">-&nbsp;Check if headphones are&nbsp;plugged in or not</p>
<p>It is true that some task could be done with currently-available set of API, for example, you could pull weather information&nbsp;of current location&nbsp;by passing user's coordinate to Weather API, and since you can get user's coordinate periodically so you could calculate user's velocity to guess user activity as well.</p>
<p>Although it is possible to do so but I must say that&nbsp;it is&nbsp;not an easy job and an implementation easily causes an error in practical. But with Awareness API you can gain these advantages:</p>
<p style=\"padding-left: 30px;\">- You can do those amazing things with just few lines of code.</p>
<p style=\"padding-left: 30px;\">- Data got from this API is more accurate since it is already processed in the proper way.</p>
<p style=\"padding-left: 30px;\">- No more worries about battery consumption since Awareness API is already optimized. It will manage all of those for you.</p>
<p>In conclusion, Awareness API allows you to get data based on user's context&nbsp;easier, more accurate with better performance.</p>
<h2 class=\"section-heading\">Context Types</h2>
<p>There are 7&nbsp;kinds of context that we can work with in Awareness API such as</p>
<p style=\"padding-left: 30px;\"><strong>Time</strong> -&nbsp;Local time at current user's&nbsp;location</p>
<p style=\"padding-left: 30px;\"><strong>Location</strong> -&nbsp;Latitude/Longitude</p>
<p style=\"padding-left: 30px;\"><strong>Place</strong> -&nbsp;Places around user</p>
<p style=\"padding-left: 30px;\"><strong>Activity</strong> - Detected user activity (biking, walking, running, etc.)</p>
<p style=\"padding-left: 30px;\"><strong>Beacons</strong> -&nbsp;Check nearby beacon(s)</p>
<p style=\"padding-left: 30px;\"><strong>Headphones</strong> -&nbsp;Are headphones plugged in?</p>
<p style=\"padding-left: 30px;\"><strong>Weather</strong> -&nbsp;Current weather conditions</p>
<p>Although these sets of information cover&nbsp;most of the use case&nbsp;in general already but I believe that more will come in the near future.</p>
<h2 class=\"section-heading\">Two set of APIs in&nbsp;Awareness API</h2>
<p>There are two sets of API available in Awareness API&nbsp;such as</p>
<p style=\"padding-left: 30px;\"><strong>Snapshot API</strong> - Allows you to&nbsp;<strong>\"<span style=\"text-decoration: underline;\">request&nbsp;an information based on user's context</span>\"</strong>&nbsp;as listed above.</p>
<p style=\"padding-left: 30px;\"><strong>Fence API</strong> - Allows you to <strong>\"<span style=\"text-decoration: underline;\">receive a signal when user's context has changed and reaches the condition</span>\"</strong>&nbsp;through callback function, for example, if user moves closed to the specific coordinate with headphones plugged in, Fench API will call the registered BroadcastReceiver and let you do your job.</p>
<p>Actually those two sets of API work&nbsp;with the exact same set of data. Google just seperates it into two to make it easier to communicate. Snapshot to get data, Fence to detect change. That's all.</p>
<h2 class=\"section-heading\">Get Started</h2>
<p>Awareness API is part of&nbsp;Google Play Services 9.2. To use it, you need to&nbsp;set up your project to enable GMS. First of all, a project in&nbsp;<strong>Google Developer Console</strong>&nbsp;is needed.</p>
<p>1) Create a project in&nbsp;<a href=\"https://console.developers.google.com\">https://console.developers.google.com</a>&nbsp;(or in case you already have one, you can use it instead)</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/awareness/createproject.png\" alt=\"\" width=\"560\" height=\"500\" /></p>
<p>2) And then&nbsp;browse to&nbsp;<a href=\"https://console.developers.google.com/apis/library\" target=\"_blank\">API Manager</a>&nbsp;page and search for&nbsp;<strong>Awareness&nbsp;</strong>and click at&nbsp;<strong>Awareness API</strong></p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/awareness/apimanager.png\" alt=\"\" width=\"800\" height=\"400\" /></p>
<p>3) Click&nbsp;<strong>Enable </strong>and wait until it finishes enabling</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/awareness/enable.png\" alt=\"\" width=\"800\" height=\"400\" /></p>
<p>4) Go to&nbsp;<a href=\"https://console.developers.google.com/apis/credentials\" target=\"_blank\">Credentials</a>&nbsp;tab and click at <strong>Create credentials -&gt; API key -&gt; Android key</strong>. Enter the name you project, for example, Android key&nbsp;and click&nbsp;<strong>Create</strong>&nbsp;(or if you have already created&nbsp;Android key previously, you could skip this step and use the existed one)</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/awareness/createandroidkey.png\" alt=\"\" width=\"950\" height=\"540\" /></p>
<p>5) <strong>API key</strong>&nbsp;will be generated&nbsp;with format like this:&nbsp;<code>AIzaSyBdVl-cTICSwYKrZ95LoVuw7dbMuDt1KG0</code>. <span style=\"text-decoration: underline;\">Copy it</span> somewhere. We need it in the further step.</p>
<p>6) Launch&nbsp;<strong>Android SDK Manager</strong>&nbsp;and update <strong>Google Play Services</strong>&nbsp;and&nbsp;<strong>Google Repository</strong>&nbsp;to the latest version.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/awareness/gms.png\" alt=\"\" width=\"552\" height=\"321\" /></p>
<p>7) Launch <strong>Android Studio</strong>, create a new project and then open application module's&nbsp;<code>build.gradle</code>&nbsp;and add dependency for Awareness API like below.</p>
<pre class=\"brush:groovy;auto-links:false;toolbar:false\" contenteditable=\"false\">dependencies {
compile 'com.google.android.gms:play-services-contextmanager:9.2.0'
}</pre>
<p>Sync Gradle&nbsp;once done.</p>
<p>7) Open&nbsp;<code>AndroidManifest.xml</code>&nbsp;file&nbsp;and add meta-data&nbsp;to&nbsp;<code>&lt;application&gt;</code> tag like this:</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">        &lt;meta-data
android:name=\"com.google.android.awareness.API_KEY\"
android:value=\"YOUR_KEY\" /&gt;
&lt;meta-data
android:name=\"com.google.android.geo.API_KEY\"
android:value=\"YOUR_KEY\" /&gt;
&lt;meta-data
android:name=\"com.google.android.nearby.messages.API_KEY\"
android:value=\"YOUR_KEY\" /&gt;</pre>
<p>Don't forget to replace&nbsp;<strong>YOUR_KEY</strong>&nbsp;with <strong>API key</strong>&nbsp;acquired by the step above.</p>
<p>Please note that the first meta-data is mandatory but the rest are optional. The second one (geo) is needed if you want to access Place while the last one (nearby) is needed&nbsp;if you want to work with Beacon. If you have no plan to access those APIs, please feel free to remove the&nbsp;related meta-data anytime.</p>
<p>8) Add 2 permissions&nbsp;in the same&nbsp;<code>AndroidManifest.xml</code>&nbsp;file inside&nbsp;<code>&lt;manifest&gt;</code> tag.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">    &lt;uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" /&gt;
&lt;uses-permission android:name=\"com.google.android.gms.permission.ACTIVITY_RECOGNITION\" /&gt;</pre>
<p>The first one is used to access information related to GPS location (Beacon, Location, Place and Weather) while the latter is used to detect user's activity (Activity). Headphone and Time don't&nbsp;need any extra permission.</p>
<p>9) Open&nbsp;<code>MainActivity.java</code>&nbsp;file and let's initialize GoogleApiClient inside&nbsp;<code>onCreate</code>&nbsp;to enable&nbsp;Awareness API&nbsp;in your application.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">public class MainActivity extends AppCompatActivity {
private GoogleApiClient mGoogleApiClient;
@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_main);
mGoogleApiClient = new GoogleApiClient.Builder(MainActivity.this)
.addApi(Awareness.API)
.build();
mGoogleApiClient.connect();
}
}</pre>
<p>That's all. Your project is now set up and API is now ready to be called. After this I will give you a demo on how to access the data&nbsp;in Awareness API one by one. Please note that to testing device is needed to have Google Play Services 9.2 installed. Please update it to the latest or application may not be able to run on your device.</p>
<h2 class=\"section-heading\">Snapshot API</h2>
<p>Let's start with something easy like <strong>\"requesting an information\"</strong>, so let's start with Snapshot API.&nbsp;Here is the code structure I use in this demo.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    private static final String TAG = \"Awareness\";
@Override
protected void onCreate(Bundle savedInstanceState) {
...
initSnapshots();
}
private void initSnapshots() {
}
</pre>
<p>All codes below will be put inside <code>initSnapshots()</code> so it will be called immediately when the Activity is created.</p>
<p>First thing to know here is Snapshot API is accessible through&nbsp;<code>Awareness.SnapshotApi</code>. That's all.&nbsp;Let's go for the first one.</p>
<h2 class=\"subsection-heading\"><span style=\"color: #2980b9;\">Activity</span></h2>
<p>Detect user's activity. Here is the code snippet.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">        Awareness.SnapshotApi.getDetectedActivity(mGoogleApiClient)
.setResultCallback(new ResultCallback&lt;DetectedActivityResult&gt;() {
@Override
public void onResult(@NonNull DetectedActivityResult detectedActivityResult) {
if (!detectedActivityResult.getStatus().isSuccess()) {
Log.e(TAG, \"Could not get the current activity.\");
return;
}
ActivityRecognitionResult ar = detectedActivityResult.getActivityRecognitionResult();
DetectedActivity probableActivity = ar.getMostProbableActivity();
Log.i(TAG, probableActivity.toString());
}
});</pre>
<p>Code is quite straightforward. You could simply call <code>getDetectedActivity</code>&nbsp;and result will be sent through associated callback. Here is the&nbsp;example result from&nbsp;<code>Log.i</code>&nbsp;line:</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">I/Awareness: DetectedActivity [type=STILL, confidence=100]</pre>
<p>You will notice that we are&nbsp;able to detect user's current activity type (\"STILL\" in this case). You can get this information by calling&nbsp;<code>probableActivity.getType()</code>&nbsp;which will return as an&nbsp;integer listed below.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    public static final int IN_VEHICLE = 0;
public static final int ON_BICYCLE = 1;
public static final int ON_FOOT = 2;
public static final int STILL = 3;
public static final int UNKNOWN = 4;
public static final int TILTING = 5;
public static final int WALKING = 7;
public static final int RUNNING = 8;</pre>
<p>You will also be able to check the confidence of activity type by calling&nbsp;<code>probableActivity.getConfidence()</code>&nbsp;which will return an integer with value between 0-100.</p>
<p>Easy, huh? Another API in Snapshot API will also be called in the same way like this one.</p>
<h2 class=\"subsection-heading\"><span style=\"color: #2980b9;\">Headphones</span></h2>
<p>Check headphones plugged in state.&nbsp;Here is the code snippet.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">        Awareness.SnapshotApi.getHeadphoneState(mGoogleApiClient)
.setResultCallback(new ResultCallback&lt;HeadphoneStateResult&gt;() {
@Override
public void onResult(@NonNull HeadphoneStateResult headphoneStateResult) {
if (!headphoneStateResult.getStatus().isSuccess()) {
Log.e(TAG, \"Could not get headphone state.\");
return;
}
HeadphoneState headphoneState = headphoneStateResult.getHeadphoneState();
if (headphoneState.getState() == HeadphoneState.PLUGGED_IN) {
Log.i(TAG, \"Headphones are plugged in.\\n\");
} else {
Log.i(TAG, \"Headphones are NOT plugged in.\\n\");
}
}
});</pre>
<p>You will see that it is exactly the same way like we did to acquire user's activity. To get headphone's state, you could simply call&nbsp;<code>headphoneState.getState()</code>&nbsp;which will return two possible results:&nbsp;<code>HeadphoneState.PLUGGED_IN</code>&nbsp;or&nbsp;<code>HeadphoneState.UNPLUGGED</code>.</p>
<h2 class=\"subsection-heading\"><span style=\"color: #2980b9;\">Location</span></h2>
<p>Get device's lat/long coordinate.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">            Awareness.SnapshotApi.getLocation(mGoogleApiClient)
.setResultCallback(new ResultCallback&lt;LocationResult&gt;() {
@Override
public void onResult(@NonNull LocationResult locationResult) {
if (!locationResult.getStatus().isSuccess()) {
Log.e(TAG, \"Could not get location.\");
return;
}
Location location = locationResult.getLocation();
Log.i(TAG, \"Lat: \" + location.getLatitude() + \", Lon: \" + location.getLongitude());
}
});</pre>
<p>To get latitude and longitude, just simply call&nbsp;<code>location.getLatitude()</code>&nbsp;and&nbsp;<code>location.getLongitude()</code>&nbsp;respectively. There are also some another&nbsp;value that you can get, for example, altitude. You could read the related document,&nbsp;<a href=\"https://developer.android.com/reference/android/location/Location.html\" target=\"_blank\">Location</a>&nbsp;class, for more information.</p>
<p><strong><span style=\"color: #c0392b;\">* To make code above works on Android M and higher, you need to implement Runtime Permission to let user grants access to&nbsp;ACCESS_FINE_LOCATION permission or SecurityException will be raised. This part of code will look like this.</span></strong></p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">        if (ContextCompat.checkSelfPermission(
MainActivity.this,
android.Manifest.permission.ACCESS_FINE_LOCATION) !=
PackageManager.PERMISSION_GRANTED) {
ActivityCompat.requestPermissions(
MainActivity.this,
new String[]{android.Manifest.permission.ACCESS_FINE_LOCATION},
12345
);
}</pre>
<p><strong><span style=\"color: #c0392b;\">I will not write about Runtime Permission&nbsp;in details here. If you want to learn more about this, you could read my previous blog,&nbsp;<a href=\"../../../blog/things-you-need-to-know-about-android-m-permission-developer-edition/en\" target=\"_blank\">Everything every Android Developer must know about new Android's Runtime Permission</a></span></strong></p>
<h2 class=\"subsection-heading\"><span style=\"color: #2980b9;\">Places</span></h2>
<p>This function will return you places around user's location. To make this works, you need to enable&nbsp;<a href=\"https://console.developers.google.com/apis/api/placesandroid/overview\" target=\"_blank\">Google Places for Android</a>&nbsp;in&nbsp;<strong>Google Developer Console</strong>&nbsp;first. Code snippet below will list you 5 top possible&nbsp;places.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">            Awareness.SnapshotApi.getPlaces(mGoogleApiClient)
.setResultCallback(new ResultCallback&lt;PlacesResult&gt;() {
@Override
public void onResult(@NonNull PlacesResult placesResult) {
if (!placesResult.getStatus().isSuccess()) {
Log.e(TAG, \"Could not get places.\");
return;
}
List&lt;PlaceLikelihood&gt; placeLikelihoodList = placesResult.getPlaceLikelihoods();
// Show the top 5 possible location results.
if (placeLikelihoodList != null) {
for (int i = 0; i &lt; 5 &amp;&amp; i &lt; placeLikelihoodList.size(); i++) {
PlaceLikelihood p = placeLikelihoodList.get(i);
Log.i(TAG, p.getPlace().getName().toString() + \", likelihood: \" + p.getLikelihood());
}
} else {
Log.e(TAG, \"Place is null.\");
}
}
});</pre>
<p>Place details could be acquired from&nbsp;<code>p.getPlace()</code>&nbsp;which contains many useful information like&nbsp;<code>getAddress()</code>, <code>getPhoneNumber()</code>&nbsp;or <code>getPlaceTypes()</code>. You could find&nbsp;more about these functions at related document,&nbsp;<a href=\"https://developers.google.com/android/reference/com/google/android/gms/location/places/Place\" target=\"_blank\">Place</a>.</p>
<p><span style=\"color: #c0392b;\"><strong>* Runtime Permission is also needed to implement to make Places works on Android M and higher.</strong></span></p>
<h2 class=\"subsection-heading\"><span style=\"color: #2980b9;\">Weather</span></h2>
<p>Code snippet below allows you to&nbsp;get the weather conditions.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">            Awareness.SnapshotApi.getWeather(mGoogleApiClient)
.setResultCallback(new ResultCallback&lt;WeatherResult&gt;() {
@Override
public void onResult(@NonNull WeatherResult weatherResult) {
if (!weatherResult.getStatus().isSuccess()) {
Log.e(TAG, \"Could not get weather.\");
return;
}
Weather weather = weatherResult.getWeather();
Log.i(TAG, \"Weather: \" + weather);
}
});</pre>
<p>There are so many useful information you can retrieve, for example,</p>
<p style=\"padding-left: 30px;\"><code>getTemperature()</code>&nbsp;-&nbsp;Current temperature at the device's current location.</p>
<p style=\"padding-left: 30px;\"><code>getFeelsLikeTemperature()</code>&nbsp;-&nbsp;What temperature a person would feel is at the device's current location.</p>
<p style=\"padding-left: 30px;\"><code>getHumidity()</code>&nbsp;- Humidity level at the device's current location</p>
<p style=\"padding-left: 30px;\"><code>getDewPoint()</code>&nbsp;-&nbsp;Dew point at the device's current location</p>
<p style=\"padding-left: 30px;\"><code>getConditions()</code>&nbsp;-&nbsp;Current weather conditions as an array of values that best describe the current conditions&nbsp;(something like&nbsp;Clear, Cloudy, Foggy, etc.)</p>
<p>You can find more about these functions at related document,&nbsp;<a href=\"https://developers.google.com/android/reference/com/google/android/gms/awareness/state/Weather\" target=\"_blank\">Weather</a>.</p>
<p><span style=\"color: #c0392b;\"><strong>* Runtime Permission is also needed to implement to make Weather&nbsp;works on Android M and higher.</strong></span></p>
<h2 class=\"subsection-heading\"><span style=\"color: #2980b9;\">Beacon</span></h2>
<p>Detect the state of nearby beacon devices. To make Beacon works, you need to&nbsp;enable <a href=\"https://console.developers.google.com/apis/api/copresence/overview\" target=\"_blank\">Nearby Messages API</a>&nbsp;in&nbsp;<strong>Google Developer Console</strong>&nbsp;first. Please make sure that&nbsp;your&nbsp;beacon has already been registerd to your Google API project and attachment is already added to that beacon. In case you don't know how to do so, <a href=\"https://play.google.com/store/apps/details?id=com.google.android.apps.location.beacon.beacontools&amp;hl=en\" target=\"_blank\">Beacon Tools</a> app developed by Google is being quite a useful tools.</p>
<p>After things have already set up.&nbsp;Declare all the possible attachment's namespaces and types in the code below.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">            List BEACON_TYPE_FILTERS = Arrays.asList(
BeaconState.TypeFilter.with(
\"my.beacon.namespace\",
\"my-attachment-type\"),
BeaconState.TypeFilter.with(
\"my.other.namespace\",
\"my-attachment-type\"));</pre>
<p>If your beacon's attachment&nbsp;<strong>namespaceType</strong> is <code>my-sample-project/mydata</code>&nbsp;, my.beacon.namespace would be <strong>my-sample-project</strong> while my-attachment-type would be <strong>mydata</strong>.</p>
<p>To get the beacon state, call&nbsp;<code>getBeaconState</code></p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">            Awareness.SnapshotApi.getBeaconState(mGoogleApiClient, BEACON_TYPE_FILTERS)
.setResultCallback(new ResultCallback&lt;BeaconStateResult&gt;() {
@Override
public void onResult(@NonNull BeaconStateResult beaconStateResult) {
if (!beaconStateResult.getStatus().isSuccess()) {
Log.e(TAG, \"Could not get beacon state.\");
return;
}
BeaconState beaconState = beaconStateResult.getBeaconState();
// Get info from the BeaconState.
}
});</pre>
<p>The state result of each beacon device could be retrieved through&nbsp;<code>beaconState.getBeaconInfo()</code>. You could find more information about the result at related document,&nbsp;<a href=\"https://developers.google.com/android/reference/com/google/android/gms/awareness/state/BeaconState.BeaconInfo\" target=\"_blank\">BeaconState.BeaconInfo</a>.</p>
<p><span style=\"color: #c0392b;\"><strong>* Runtime Permission is also needed to implement to make Beacon&nbsp;works on Android M and higher.</strong></span></p>
<h2 class=\"subsection-heading\"><span style=\"color: #2980b9;\">Time</span></h2>
<p>There is no Time function available in Snapshot API since you could simply get the local time with Android's standard API.</p>
<p><br />That's all about Snapshot API. You can see that although it is straightforward and pretty easy to use but it is still very useful. Please give it a try.</p>
<h2 class=\"section-heading\">Fence API</h2>
<p>\"Fence\" here comes from the well-known word \"Geo-fencing\" which means the virtual barrier of&nbsp;real-world geographic area. But for Fence, you could do a lot more besides location detection.&nbsp;You could set the condition related to working context in Awareness API and get the callback when condition is reached.</p>
<p>Let's see what it could do by real code. First of all, let's set the code structure. Basically Fence will collect a <strong>PendingIntent</strong> and whenever the condition is reached, Intent contained inside would&nbsp;be fired. So in this example, I will create a <strong>BroadcastReceiver</strong> to handle that&nbsp;<strong>Intent</strong>. Here is the code.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">public class MainActivity extends AppCompatActivity {
private static final String FENCE_RECEIVER_ACTION = \"FENCE_RECEIVE\";
private HeadphoneFenceBroadcastReceiver fenceReceiver;
private PendingIntent mFencePendingIntent;
@Override
protected void onCreate(Bundle savedInstanceState) {
...
fenceReceiver = new HeadphoneFenceBroadcastReceiver();
Intent intent = new Intent(FENCE_RECEIVER_ACTION);
mFencePendingIntent = PendingIntent.getBroadcast(MainActivity.this,
10001,
intent,
0);
}
private void registerFences() {
// Create a fence.
}
private void unregisterFence() {
}
@Override
protected void onStart() {
super.onStart();
registerFences();
registerReceiver(fenceReceiver, new IntentFilter(FENCE_RECEIVER_ACTION));
}
@Override
protected void onStop() {
super.onStop();
unregisterFences();
unregisterReceiver(fenceReceiver);
}
class HeadphoneFenceBroadcastReceiver extends BroadcastReceiver {
@Override
public void onReceive(Context context, Intent intent) {
}
}</pre>
<p>Code that does the Fence registration will be placed inside&nbsp;<code>registerFences()</code>&nbsp;while the unregistration one will be placed inside&nbsp;<code>unregisterFences()</code>.</p>
<h2 class=\"subsection-heading\"><span style=\"color: #2980b9;\">Detect Headphones Plugged-In State Change</span></h2>
<p>The easiest example to demo Fence API would be to detect the change of Headphones plugged-in state. To do so, declare the condition as an <code>AwarenessFence</code> variable which in this case, <code>HeadphoneFence</code> will be used to create the Fence condition. Put code below inside <code>registerFences()</code>.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">        AwarenessFence headphoneFence = HeadphoneFence.during(HeadphoneState.PLUGGED_IN);</pre>
<p>And then call <code>Awareness.FenceApi.updateFences(...)</code>&nbsp;to register the Fence.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">        Awareness.FenceApi.updateFences(
mGoogleApiClient,
new FenceUpdateRequest.Builder()
.addFence(\"headphoneFenceKey\", headphoneFence, mFencePendingIntent)
.build())
.setResultCallback(new ResultCallback&lt;Status&gt;() {
@Override
public void onResult(@NonNull Status status) {
if (status.isSuccess()) {
Log.i(TAG, \"Fence was successfully registered.\");
} else {
Log.e(TAG, \"Fence could not be registered: \" + status);
}
}
});</pre>
<p>The important line is the&nbsp;<code>.addFence()</code>&nbsp;one which asks for the Fence and associated PendingIntent which are <code>headphoneFence</code> and <code>mFencePendingIntent</code> respectively in this example. Whenever condition defined in headphoneFence&nbsp;is reached, an Intent inside mFencePendingIntent would be fired and the registered&nbsp;BroadcastReceiver like&nbsp;<code>fenceReceiver</code> would receive the Intent.</p>
<p>To prevent the memory leak, unregistration is also needed. Put code below inside&nbsp;<code>unregisterFences()</code>&nbsp;to do the job.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    private void unregisterFences() {
Awareness.FenceApi.updateFences(
mGoogleApiClient,
new FenceUpdateRequest.Builder()
.removeFence(\"headphoneFenceKey\")
.build()).setResultCallback(new ResultCallbacks&lt;Status&gt;() {
@Override
public void onSuccess(@NonNull Status status) {
Log.i(TAG, \"Fence \" + \"headphoneFenceKey\" + \" successfully removed.\");
}
@Override
public void onFailure(@NonNull Status status) {
Log.i(TAG, \"Fence \" + \"headphoneFenceKey\" + \" could NOT be removed.\");
}
});
}</pre>
<p>Now let's handle the Intent in&nbsp;<code>HeadphoneFenceBroadcastReceiver</code>. Modify&nbsp;<code>onReceive</code>&nbsp;function as code below.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    class HeadphoneFenceBroadcastReceiver extends BroadcastReceiver {
@Override
public void onReceive(Context context, Intent intent) {
FenceState fenceState = FenceState.extract(intent);
Log.d(TAG, \"Fence Receiver Received\");
if (TextUtils.equals(fenceState.getFenceKey(), \"headphoneFenceKey\")) {
switch (fenceState.getCurrentState()) {
case FenceState.TRUE:
Log.i(TAG, \"Fence &gt; Headphones are plugged in.\");
break;
case FenceState.FALSE:
Log.i(TAG, \"Fence &gt; Headphones are NOT plugged in.\");
break;
case FenceState.UNKNOWN:
Log.i(TAG, \"Fence &gt; The headphone fence is in an unknown state.\");
break;
}
}
}
}</pre>
<p>It is pretty straightforward. Once Intent is&nbsp;received, you could extract the FenceState with <code>FenceState.extract(intent)</code>&nbsp;function.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">FenceState fenceState = FenceState.extract(intent);</pre>
<p>And since a single BroadcastReceiver may be set to receive more than one type of Fence, FenceKey is needed to be checked to do anything next.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">if (TextUtils.equals(fenceState.getFenceKey(), \"headphoneFenceKey\")) {</pre>
<p>Please note that FenceKey here is the key that we give it in&nbsp;<code>addFence</code>&nbsp;function above. Don't forget to use constant instead of hardcoding in your production code.</p>
<p>The final step is to check the FenceState if the condition is TRUE&nbsp;of FALSE from <code>fenceState.getFenceState()</code>&nbsp;function and then do whatever you want. It's&nbsp;all done !</p>
<h2 class=\"subsection-heading\"><span style=\"color: #2980b9;\">Test</span></h2>
<p>Code above should now works properly. Please run your application and plug your headphones in. Logcat should show something like this:</p>
<pre class=\"brush:ps;auto-links:false;toolbar:false\" contenteditable=\"false\">D/Awareness: Fence Receiver Received
I/Awareness: Fence &gt; Headphones are plugged in.</pre>
<p>And&nbsp;logs below should be shown when you unplug your headphones.</p>
<pre class=\"brush:ps;auto-links:false;toolbar:false\" contenteditable=\"false\">D/Awareness: Fence Receiver Received
I/Awareness: Fence &gt; Headphones are NOT plugged in.</pre>
<p>As I said before. It is easy but outcome is very awesome !</p>
<h2 class=\"subsection-heading\"><span style=\"color: #2980b9;\">All Possible&nbsp;Fences</span></h2>
<p>5 contexts in Awareness API could be set as a condition by using class listed below:</p>
<p style=\"padding-left: 30px;\"><span style=\"font-family: 'courier new', courier, monospace;\"><strong><a href=\"https://developers.google.com/android/reference/com/google/android/gms/awareness/fence/DetectedActivityFence\" target=\"_blank\">DetectedActivityFence</a> </strong></span>- Detect condition based on user's activity.</p>
<p style=\"padding-left: 30px;\"><span style=\"font-family: 'courier new', courier, monospace;\"><strong><a href=\"https://developers.google.com/android/reference/com/google/android/gms/awareness/fence/HeadphoneFence\" target=\"_blank\">HeadphoneFence</a> </strong></span>- Detect condition based on headphones plugging in state.</p>
<p style=\"padding-left: 30px;\"><strong><span style=\"font-family: 'courier new', courier, monospace;\"><a href=\"https://developers.google.com/android/reference/com/google/android/gms/awareness/fence/TimeFence\" target=\"_blank\">TimeFence</a></span> </strong>- Detect condition based on local time at user's location.</p>
<p style=\"padding-left: 30px;\"><span style=\"font-family: 'courier new', courier, monospace;\"><strong><a href=\"https://developers.google.com/android/reference/com/google/android/gms/awareness/fence/LocationFence\" target=\"_blank\">LocationFence</a> </strong></span>- Detect condition based on user's location.</p>
<p style=\"padding-left: 30px;\"><strong><span style=\"font-family: 'courier new', courier, monospace;\"><a href=\"https://developers.google.com/android/reference/com/google/android/gms/awareness/fence/BeaconFence\" target=\"_blank\">BeaconFence</a></span></strong> - Detect condition based on nearby Beacons' state.</p>
<p>Each Fence has its own way to define the condition. I could not put them all here since there are too many. You could find more information by clicking at the class name. Anyway it supposes not to be a problem since if you understand the concept of HeadphoneFence code above, you would be able to apply and learn how to use another Fence by your own.</p>
<p>Please note that&nbsp;Weather and Places&nbsp;are not available in&nbsp;the&nbsp;Fence API.</p>
<h2 class=\"subsection-heading\"><span style=\"color: #2980b9;\">Detect Multiple Fences Condition</span></h2>
<p>In many cases it is useful to combine multiple conditions as a single&nbsp;Fence with and/or logic, for example,</p>
<p style=\"padding-left: 30px;\">- If user is running and has headphone plugged in.</p>
<p style=\"padding-left: 30px;\">- If user move closed to the specific location in the afternoon.</p>
<p>Don't worry. Fence API would do you a job. You could do it in the fancy way&nbsp;by&nbsp;declaring all the&nbsp;<code>AwarenessFence</code>s, for example,</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">        AwarenessFence headphoneFence = HeadphoneFence.during(HeadphoneState.PLUGGED_IN);
AwarenessFence detectedActivityFence = DetectedActivityFence.during(DetectedActivityFence.RUNNING);
</pre>
<p>And combine them with <code>AwarenessFence.and</code>&nbsp;like this:</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">        AwarenessFence andFence = AwarenessFence.and(headphoneFence, detectedActivityFence);</pre>
<p>And then pass <code>andFence</code> to&nbsp;<code>addFence(...)</code> command and everything would works like desired.</p>
<p>Besides <span style=\"font-family: 'courier new', courier, monospace;\">and</span>, <span style=\"font-family: 'courier new', courier, monospace;\">or</span> and <span style=\"font-family: 'courier new', courier, monospace;\">not</span> are also be able to be done with&nbsp;<code>AwarenessFence.or</code>&nbsp;and&nbsp;<code>AwarenessFence.not</code>&nbsp;respectively. Please feel free to apply the logic as you want.</p>
<h2 class=\"section-heading\">Use Case</h2>
<p>There are some application that utilize the benifit of Awareness API. Here are two examples.</p>
<p style=\"padding-left: 30px;\"><span style=\"color: #2980b9;\"><strong>Superplayer Music</strong></span>&nbsp;- It could suggests you a song based on weather at user's location. Imagine, sad song in the rainy season ... That's cruel !</p>
<p style=\"padding-left: 30px;\"><span style=\"color: #2980b9;\"><strong>Trulia</strong></span>&nbsp;- Real estate application that could notify user when user is walking near&nbsp;the listed house and the weather is nice.</p>
<p>As you can see from the use cases above. With Awareness API, you could implement quite a lot of amazing rich features like you have never thought it is possible before. Only barrier now is your imagination ! Working with user's context is really awesome and can cause your application get the higher retention and positive feedback.</p>
<h2 class=\"section-heading\">Conclusion</h2>
<p>That's all about Awareness API in details. I found that it is very useful and I must say that I am very impressed with its capability. Anyway please note that Awareness API is a part of Google Play Services so it will work on device with GMS installed only. Always be reminded that your application might not be able to run on those Chinese devices out there.</p>
<p>I hope that you find this blog post&nbsp;useful. Have fun playing with user's context ! =D</p>" "http://inthecheesefactory.com/blog/google-awareness-api-in-action/en" (22387 62588) old 4 nil nil ((title nil "
				Google's Awareness API in action. Make your application be User's Context-Aware.			") (description nil "
				<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/awareness/cover4.jpg\" /></p> 
<p>In the passed Google I/O 2016, the biggest annual developer conference organized by Google, very promising&nbsp;API named Awareness API was announced. Here is the 35 mins recorded session in the event.</p>
<p style=\"text-align: center;\">[youtube]37ia7S4Lsv4[/youtube]</p>
<p>Good news ! API has just been publicly released&nbsp;few days ago. After playing around in many possible ways, I must say that&nbsp;Awareness API is very interesting and give you a chance to enable rich feature to your application with just few lines of code. This blog will give you information about this amazing API in details. Here we go !</p>
<h2 class=\"section-heading\">What is&nbsp;Awareness API?</h2>
<p>Here is the definition of&nbsp;Awareness API&nbsp;given by Google</p>
<blockquote><span style=\"font-size: 18pt;\">A unified sensing platform enabling applications to be aware of multiple aspects of a users context, while managing battery and memory health.</span></blockquote>
<p>Sounds confusing? Yup, may be. Anyway, actually this API is pretty easy and straightforward. It was made to bring you a capability to <strong>work with data related to user's current context</strong>, for example,</p>
<p style=\"padding-left: 30px;\">- Local time of user's current&nbsp;location</p>
<p style=\"padding-left: 30px;\">- Weather information&nbsp;of place where user currently is</p>
<p style=\"padding-left: 30px;\">- User activity: Walking, biking, running, etc.</p>
<p style=\"padding-left: 30px;\">- Do something when user moves close to&nbsp;the specific&nbsp;coordinate</p>
<p style=\"padding-left: 30px;\">-&nbsp;Check if headphones are&nbsp;plugged in or not</p>
<p>It is true that some task could be done with currently-available set of API, for example, you could pull weather information&nbsp;of current location&nbsp;by passing user's coordinate to Weather API, and since you can get user's coordinate periodically so you could calculate user's velocity to guess user activity as well.</p>
<p>Although it is possible to do so but I must say that&nbsp;it is&nbsp;not an easy job and an implementation easily causes an error in practical. But with Awareness API you can gain these advantages:</p>
<p style=\"padding-left: 30px;\">- You can do those amazing things with just few lines of code.</p>
<p style=\"padding-left: 30px;\">- Data got from this API is more accurate since it is already processed in the proper way.</p>
<p style=\"padding-left: 30px;\">- No more worries about battery consumption since Awareness API is already optimized. It will manage all of those for you.</p>
<p>In conclusion, Awareness API allows you to get data based on user's context&nbsp;easier, more accurate with better performance.</p>
<h2 class=\"section-heading\">Context Types</h2>
<p>There are 7&nbsp;kinds of context that we can work with in Awareness API such as</p>
<p style=\"padding-left: 30px;\"><strong>Time</strong> -&nbsp;Local time at current user's&nbsp;location</p>
<p style=\"padding-left: 30px;\"><strong>Location</strong> -&nbsp;Latitude/Longitude</p>
<p style=\"padding-left: 30px;\"><strong>Place</strong> -&nbsp;Places around user</p>
<p style=\"padding-left: 30px;\"><strong>Activity</strong> - Detected user activity (biking, walking, running, etc.)</p>
<p style=\"padding-left: 30px;\"><strong>Beacons</strong> -&nbsp;Check nearby beacon(s)</p>
<p style=\"padding-left: 30px;\"><strong>Headphones</strong> -&nbsp;Are headphones plugged in?</p>
<p style=\"padding-left: 30px;\"><strong>Weather</strong> -&nbsp;Current weather conditions</p>
<p>Although these sets of information cover&nbsp;most of the use case&nbsp;in general already but I believe that more will come in the near future.</p>
<h2 class=\"section-heading\">Two set of APIs in&nbsp;Awareness API</h2>
<p>There are two sets of API available in Awareness API&nbsp;such as</p>
<p style=\"padding-left: 30px;\"><strong>Snapshot API</strong> - Allows you to&nbsp;<strong>\"<span style=\"text-decoration: underline;\">request&nbsp;an information based on user's context</span>\"</strong>&nbsp;as listed above.</p>
<p style=\"padding-left: 30px;\"><strong>Fence API</strong> - Allows you to <strong>\"<span style=\"text-decoration: underline;\">receive a signal when user's context has changed and reaches the condition</span>\"</strong>&nbsp;through callback function, for example, if user moves closed to the specific coordinate with headphones plugged in, Fench API will call the registered BroadcastReceiver and let you do your job.</p>
<p>Actually those two sets of API work&nbsp;with the exact same set of data. Google just seperates it into two to make it easier to communicate. Snapshot to get data, Fence to detect change. That's all.</p>
<h2 class=\"section-heading\">Get Started</h2>
<p>Awareness API is part of&nbsp;Google Play Services 9.2. To use it, you need to&nbsp;set up your project to enable GMS. First of all, a project in&nbsp;<strong>Google Developer Console</strong>&nbsp;is needed.</p>
<p>1) Create a project in&nbsp;<a href=\"https://console.developers.google.com\">https://console.developers.google.com</a>&nbsp;(or in case you already have one, you can use it instead)</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/awareness/createproject.png\" alt=\"\" width=\"560\" height=\"500\" /></p>
<p>2) And then&nbsp;browse to&nbsp;<a href=\"https://console.developers.google.com/apis/library\" target=\"_blank\">API Manager</a>&nbsp;page and search for&nbsp;<strong>Awareness&nbsp;</strong>and click at&nbsp;<strong>Awareness API</strong></p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/awareness/apimanager.png\" alt=\"\" width=\"800\" height=\"400\" /></p>
<p>3) Click&nbsp;<strong>Enable </strong>and wait until it finishes enabling</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/awareness/enable.png\" alt=\"\" width=\"800\" height=\"400\" /></p>
<p>4) Go to&nbsp;<a href=\"https://console.developers.google.com/apis/credentials\" target=\"_blank\">Credentials</a>&nbsp;tab and click at <strong>Create credentials -&gt; API key -&gt; Android key</strong>. Enter the name you project, for example, Android key&nbsp;and click&nbsp;<strong>Create</strong>&nbsp;(or if you have already created&nbsp;Android key previously, you could skip this step and use the existed one)</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/awareness/createandroidkey.png\" alt=\"\" width=\"950\" height=\"540\" /></p>
<p>5) <strong>API key</strong>&nbsp;will be generated&nbsp;with format like this:&nbsp;<code>AIzaSyBdVl-cTICSwYKrZ95LoVuw7dbMuDt1KG0</code>. <span style=\"text-decoration: underline;\">Copy it</span> somewhere. We need it in the further step.</p>
<p>6) Launch&nbsp;<strong>Android SDK Manager</strong>&nbsp;and update <strong>Google Play Services</strong>&nbsp;and&nbsp;<strong>Google Repository</strong>&nbsp;to the latest version.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/awareness/gms.png\" alt=\"\" width=\"552\" height=\"321\" /></p>
<p>7) Launch <strong>Android Studio</strong>, create a new project and then open application module's&nbsp;<code>build.gradle</code>&nbsp;and add dependency for Awareness API like below.</p>
<pre class=\"brush:groovy;auto-links:false;toolbar:false\" contenteditable=\"false\">dependencies {
    compile 'com.google.android.gms:play-services-contextmanager:9.2.0'
}</pre>
<p>Sync Gradle&nbsp;once done.</p>
<p>7) Open&nbsp;<code>AndroidManifest.xml</code>&nbsp;file&nbsp;and add meta-data&nbsp;to&nbsp;<code>&lt;application&gt;</code> tag like this:</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">        &lt;meta-data
            android:name=\"com.google.android.awareness.API_KEY\"
            android:value=\"YOUR_KEY\" /&gt;
        &lt;meta-data
            android:name=\"com.google.android.geo.API_KEY\"
            android:value=\"YOUR_KEY\" /&gt;
        &lt;meta-data
            android:name=\"com.google.android.nearby.messages.API_KEY\"
            android:value=\"YOUR_KEY\" /&gt;</pre>
<p>Don't forget to replace&nbsp;<strong>YOUR_KEY</strong>&nbsp;with <strong>API key</strong>&nbsp;acquired by the step above.</p>
<p>Please note that the first meta-data is mandatory but the rest are optional. The second one (geo) is needed if you want to access Place while the last one (nearby) is needed&nbsp;if you want to work with Beacon. If you have no plan to access those APIs, please feel free to remove the&nbsp;related meta-data anytime.</p>
<p>8) Add 2 permissions&nbsp;in the same&nbsp;<code>AndroidManifest.xml</code>&nbsp;file inside&nbsp;<code>&lt;manifest&gt;</code> tag.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">    &lt;uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" /&gt;
    &lt;uses-permission android:name=\"com.google.android.gms.permission.ACTIVITY_RECOGNITION\" /&gt;</pre>
<p>The first one is used to access information related to GPS location (Beacon, Location, Place and Weather) while the latter is used to detect user's activity (Activity). Headphone and Time don't&nbsp;need any extra permission.</p>
<p>9) Open&nbsp;<code>MainActivity.java</code>&nbsp;file and let's initialize GoogleApiClient inside&nbsp;<code>onCreate</code>&nbsp;to enable&nbsp;Awareness API&nbsp;in your application.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">public class MainActivity extends AppCompatActivity {

    private GoogleApiClient mGoogleApiClient;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        mGoogleApiClient = new GoogleApiClient.Builder(MainActivity.this)
                .addApi(Awareness.API)
                .build();
        mGoogleApiClient.connect();
    }
}</pre>
<p>That's all. Your project is now set up and API is now ready to be called. After this I will give you a demo on how to access the data&nbsp;in Awareness API one by one. Please note that to testing device is needed to have Google Play Services 9.2 installed. Please update it to the latest or application may not be able to run on your device.</p>
<h2 class=\"section-heading\">Snapshot API</h2>
<p>Let's start with something easy like <strong>\"requesting an information\"</strong>, so let's start with Snapshot API.&nbsp;Here is the code structure I use in this demo.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    private static final String TAG = \"Awareness\";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        ...

        initSnapshots();
    }

    private void initSnapshots() {

    }
</pre>
<p>All codes below will be put inside <code>initSnapshots()</code> so it will be called immediately when the Activity is created.</p>
<p>First thing to know here is Snapshot API is accessible through&nbsp;<code>Awareness.SnapshotApi</code>. That's all.&nbsp;Let's go for the first one.</p>
<h2 class=\"subsection-heading\"><span style=\"color: #2980b9;\">Activity</span></h2>
<p>Detect user's activity. Here is the code snippet.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">        Awareness.SnapshotApi.getDetectedActivity(mGoogleApiClient)
                .setResultCallback(new ResultCallback&lt;DetectedActivityResult&gt;() {
                    @Override
                    public void onResult(@NonNull DetectedActivityResult detectedActivityResult) {
                        if (!detectedActivityResult.getStatus().isSuccess()) {
                            Log.e(TAG, \"Could not get the current activity.\");
                            return;
                        }
                        ActivityRecognitionResult ar = detectedActivityResult.getActivityRecognitionResult();
                        DetectedActivity probableActivity = ar.getMostProbableActivity();
                        Log.i(TAG, probableActivity.toString());
                    }
                });</pre>
<p>Code is quite straightforward. You could simply call <code>getDetectedActivity</code>&nbsp;and result will be sent through associated callback. Here is the&nbsp;example result from&nbsp;<code>Log.i</code>&nbsp;line:</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">I/Awareness: DetectedActivity [type=STILL, confidence=100]</pre>
<p>You will notice that we are&nbsp;able to detect user's current activity type (\"STILL\" in this case). You can get this information by calling&nbsp;<code>probableActivity.getType()</code>&nbsp;which will return as an&nbsp;integer listed below.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    public static final int IN_VEHICLE = 0;
    public static final int ON_BICYCLE = 1;
    public static final int ON_FOOT = 2;
    public static final int STILL = 3;
    public static final int UNKNOWN = 4;
    public static final int TILTING = 5;
    public static final int WALKING = 7;
    public static final int RUNNING = 8;</pre>
<p>You will also be able to check the confidence of activity type by calling&nbsp;<code>probableActivity.getConfidence()</code>&nbsp;which will return an integer with value between 0-100.</p>
<p>Easy, huh? Another API in Snapshot API will also be called in the same way like this one.</p>
<h2 class=\"subsection-heading\"><span style=\"color: #2980b9;\">Headphones</span></h2>
<p>Check headphones plugged in state.&nbsp;Here is the code snippet.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">        Awareness.SnapshotApi.getHeadphoneState(mGoogleApiClient)
                .setResultCallback(new ResultCallback&lt;HeadphoneStateResult&gt;() {
                    @Override
                    public void onResult(@NonNull HeadphoneStateResult headphoneStateResult) {
                        if (!headphoneStateResult.getStatus().isSuccess()) {
                            Log.e(TAG, \"Could not get headphone state.\");
                            return;
                        }
                        HeadphoneState headphoneState = headphoneStateResult.getHeadphoneState();
                        if (headphoneState.getState() == HeadphoneState.PLUGGED_IN) {
                            Log.i(TAG, \"Headphones are plugged in.\\n\");
                        } else {
                            Log.i(TAG, \"Headphones are NOT plugged in.\\n\");
                        }
                    }
                });</pre>
<p>You will see that it is exactly the same way like we did to acquire user's activity. To get headphone's state, you could simply call&nbsp;<code>headphoneState.getState()</code>&nbsp;which will return two possible results:&nbsp;<code>HeadphoneState.PLUGGED_IN</code>&nbsp;or&nbsp;<code>HeadphoneState.UNPLUGGED</code>.</p>
<h2 class=\"subsection-heading\"><span style=\"color: #2980b9;\">Location</span></h2>
<p>Get device's lat/long coordinate.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">            Awareness.SnapshotApi.getLocation(mGoogleApiClient)
                    .setResultCallback(new ResultCallback&lt;LocationResult&gt;() {
                        @Override
                        public void onResult(@NonNull LocationResult locationResult) {
                            if (!locationResult.getStatus().isSuccess()) {
                                Log.e(TAG, \"Could not get location.\");
                                return;
                            }
                            Location location = locationResult.getLocation();
                            Log.i(TAG, \"Lat: \" + location.getLatitude() + \", Lon: \" + location.getLongitude());
                        }
                    });</pre>
<p>To get latitude and longitude, just simply call&nbsp;<code>location.getLatitude()</code>&nbsp;and&nbsp;<code>location.getLongitude()</code>&nbsp;respectively. There are also some another&nbsp;value that you can get, for example, altitude. You could read the related document,&nbsp;<a href=\"https://developer.android.com/reference/android/location/Location.html\" target=\"_blank\">Location</a>&nbsp;class, for more information.</p>
<p><strong><span style=\"color: #c0392b;\">* To make code above works on Android M and higher, you need to implement Runtime Permission to let user grants access to&nbsp;ACCESS_FINE_LOCATION permission or SecurityException will be raised. This part of code will look like this.</span></strong></p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">        if (ContextCompat.checkSelfPermission(
                MainActivity.this,
                android.Manifest.permission.ACCESS_FINE_LOCATION) !=
                PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(
                    MainActivity.this,
                    new String[]{android.Manifest.permission.ACCESS_FINE_LOCATION},
                    12345
            );
        }</pre>
<p><strong><span style=\"color: #c0392b;\">I will not write about Runtime Permission&nbsp;in details here. If you want to learn more about this, you could read my previous blog,&nbsp;<a href=\"../../../blog/things-you-need-to-know-about-android-m-permission-developer-edition/en\" target=\"_blank\">Everything every Android Developer must know about new Android's Runtime Permission</a></span></strong></p>
<h2 class=\"subsection-heading\"><span style=\"color: #2980b9;\">Places</span></h2>
<p>This function will return you places around user's location. To make this works, you need to enable&nbsp;<a href=\"https://console.developers.google.com/apis/api/placesandroid/overview\" target=\"_blank\">Google Places for Android</a>&nbsp;in&nbsp;<strong>Google Developer Console</strong>&nbsp;first. Code snippet below will list you 5 top possible&nbsp;places.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">            Awareness.SnapshotApi.getPlaces(mGoogleApiClient)
                    .setResultCallback(new ResultCallback&lt;PlacesResult&gt;() {
                        @Override
                        public void onResult(@NonNull PlacesResult placesResult) {
                            if (!placesResult.getStatus().isSuccess()) {
                                Log.e(TAG, \"Could not get places.\");
                                return;
                            }
                            List&lt;PlaceLikelihood&gt; placeLikelihoodList = placesResult.getPlaceLikelihoods();
                            // Show the top 5 possible location results.
                            if (placeLikelihoodList != null) {
                                for (int i = 0; i &lt; 5 &amp;&amp; i &lt; placeLikelihoodList.size(); i++) {
                                    PlaceLikelihood p = placeLikelihoodList.get(i);
                                    Log.i(TAG, p.getPlace().getName().toString() + \", likelihood: \" + p.getLikelihood());
                                }
                            } else {
                                Log.e(TAG, \"Place is null.\");
                            }
                        }
                    });</pre>
<p>Place details could be acquired from&nbsp;<code>p.getPlace()</code>&nbsp;which contains many useful information like&nbsp;<code>getAddress()</code>, <code>getPhoneNumber()</code>&nbsp;or <code>getPlaceTypes()</code>. You could find&nbsp;more about these functions at related document,&nbsp;<a href=\"https://developers.google.com/android/reference/com/google/android/gms/location/places/Place\" target=\"_blank\">Place</a>.</p>
<p><span style=\"color: #c0392b;\"><strong>* Runtime Permission is also needed to implement to make Places works on Android M and higher.</strong></span></p>
<h2 class=\"subsection-heading\"><span style=\"color: #2980b9;\">Weather</span></h2>
<p>Code snippet below allows you to&nbsp;get the weather conditions.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">            Awareness.SnapshotApi.getWeather(mGoogleApiClient)
                    .setResultCallback(new ResultCallback&lt;WeatherResult&gt;() {
                        @Override
                        public void onResult(@NonNull WeatherResult weatherResult) {
                            if (!weatherResult.getStatus().isSuccess()) {
                                Log.e(TAG, \"Could not get weather.\");
                                return;
                            }
                            Weather weather = weatherResult.getWeather();
                            Log.i(TAG, \"Weather: \" + weather);
                        }
                    });</pre>
<p>There are so many useful information you can retrieve, for example,</p>
<p style=\"padding-left: 30px;\"><code>getTemperature()</code>&nbsp;-&nbsp;Current temperature at the device's current location.</p>
<p style=\"padding-left: 30px;\"><code>getFeelsLikeTemperature()</code>&nbsp;-&nbsp;What temperature a person would feel is at the device's current location.</p>
<p style=\"padding-left: 30px;\"><code>getHumidity()</code>&nbsp;- Humidity level at the device's current location</p>
<p style=\"padding-left: 30px;\"><code>getDewPoint()</code>&nbsp;-&nbsp;Dew point at the device's current location</p>
<p style=\"padding-left: 30px;\"><code>getConditions()</code>&nbsp;-&nbsp;Current weather conditions as an array of values that best describe the current conditions&nbsp;(something like&nbsp;Clear, Cloudy, Foggy, etc.)</p>
<p>You can find more about these functions at related document,&nbsp;<a href=\"https://developers.google.com/android/reference/com/google/android/gms/awareness/state/Weather\" target=\"_blank\">Weather</a>.</p>
<p><span style=\"color: #c0392b;\"><strong>* Runtime Permission is also needed to implement to make Weather&nbsp;works on Android M and higher.</strong></span></p>
<h2 class=\"subsection-heading\"><span style=\"color: #2980b9;\">Beacon</span></h2>
<p>Detect the state of nearby beacon devices. To make Beacon works, you need to&nbsp;enable <a href=\"https://console.developers.google.com/apis/api/copresence/overview\" target=\"_blank\">Nearby Messages API</a>&nbsp;in&nbsp;<strong>Google Developer Console</strong>&nbsp;first. Please make sure that&nbsp;your&nbsp;beacon has already been registerd to your Google API project and attachment is already added to that beacon. In case you don't know how to do so, <a href=\"https://play.google.com/store/apps/details?id=com.google.android.apps.location.beacon.beacontools&amp;hl=en\" target=\"_blank\">Beacon Tools</a> app developed by Google is being quite a useful tools.</p>
<p>After things have already set up.&nbsp;Declare all the possible attachment's namespaces and types in the code below.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">            List BEACON_TYPE_FILTERS = Arrays.asList(
                    BeaconState.TypeFilter.with(
                            \"my.beacon.namespace\",
                            \"my-attachment-type\"),
                    BeaconState.TypeFilter.with(
                            \"my.other.namespace\",
                            \"my-attachment-type\"));</pre>
<p>If your beacon's attachment&nbsp;<strong>namespaceType</strong> is <code>my-sample-project/mydata</code>&nbsp;, my.beacon.namespace would be <strong>my-sample-project</strong> while my-attachment-type would be <strong>mydata</strong>.</p>
<p>To get the beacon state, call&nbsp;<code>getBeaconState</code></p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">            Awareness.SnapshotApi.getBeaconState(mGoogleApiClient, BEACON_TYPE_FILTERS)
                    .setResultCallback(new ResultCallback&lt;BeaconStateResult&gt;() {
                        @Override
                        public void onResult(@NonNull BeaconStateResult beaconStateResult) {
                            if (!beaconStateResult.getStatus().isSuccess()) {
                                Log.e(TAG, \"Could not get beacon state.\");
                                return;
                            }
                            BeaconState beaconState = beaconStateResult.getBeaconState();
                            // Get info from the BeaconState.
                        }
                    });</pre>
<p>The state result of each beacon device could be retrieved through&nbsp;<code>beaconState.getBeaconInfo()</code>. You could find more information about the result at related document,&nbsp;<a href=\"https://developers.google.com/android/reference/com/google/android/gms/awareness/state/BeaconState.BeaconInfo\" target=\"_blank\">BeaconState.BeaconInfo</a>.</p>
<p><span style=\"color: #c0392b;\"><strong>* Runtime Permission is also needed to implement to make Beacon&nbsp;works on Android M and higher.</strong></span></p>
<h2 class=\"subsection-heading\"><span style=\"color: #2980b9;\">Time</span></h2>
<p>There is no Time function available in Snapshot API since you could simply get the local time with Android's standard API.</p>
<p><br />That's all about Snapshot API. You can see that although it is straightforward and pretty easy to use but it is still very useful. Please give it a try.</p>
<h2 class=\"section-heading\">Fence API</h2>
<p>\"Fence\" here comes from the well-known word \"Geo-fencing\" which means the virtual barrier of&nbsp;real-world geographic area. But for Fence, you could do a lot more besides location detection.&nbsp;You could set the condition related to working context in Awareness API and get the callback when condition is reached.</p>
<p>Let's see what it could do by real code. First of all, let's set the code structure. Basically Fence will collect a <strong>PendingIntent</strong> and whenever the condition is reached, Intent contained inside would&nbsp;be fired. So in this example, I will create a <strong>BroadcastReceiver</strong> to handle that&nbsp;<strong>Intent</strong>. Here is the code.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">public class MainActivity extends AppCompatActivity {

    private static final String FENCE_RECEIVER_ACTION = \"FENCE_RECEIVE\";

    private HeadphoneFenceBroadcastReceiver fenceReceiver;
    private PendingIntent mFencePendingIntent;


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        ...

        fenceReceiver = new HeadphoneFenceBroadcastReceiver();
        Intent intent = new Intent(FENCE_RECEIVER_ACTION);
        mFencePendingIntent = PendingIntent.getBroadcast(MainActivity.this,
                10001,
                intent,
                0);
    }

    private void registerFences() {
        // Create a fence.
    }

    private void unregisterFence() {
    }

    @Override
    protected void onStart() {
        super.onStart();
        registerFences();
        registerReceiver(fenceReceiver, new IntentFilter(FENCE_RECEIVER_ACTION));
    }

    @Override
    protected void onStop() {
        super.onStop();
        unregisterFences();
        unregisterReceiver(fenceReceiver);
    }

    class HeadphoneFenceBroadcastReceiver extends BroadcastReceiver {

        @Override
        public void onReceive(Context context, Intent intent) {

        }

    }</pre>
<p>Code that does the Fence registration will be placed inside&nbsp;<code>registerFences()</code>&nbsp;while the unregistration one will be placed inside&nbsp;<code>unregisterFences()</code>.</p>
<h2 class=\"subsection-heading\"><span style=\"color: #2980b9;\">Detect Headphones Plugged-In State Change</span></h2>
<p>The easiest example to demo Fence API would be to detect the change of Headphones plugged-in state. To do so, declare the condition as an <code>AwarenessFence</code> variable which in this case, <code>HeadphoneFence</code> will be used to create the Fence condition. Put code below inside <code>registerFences()</code>.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">        AwarenessFence headphoneFence = HeadphoneFence.during(HeadphoneState.PLUGGED_IN);</pre>
<p>And then call <code>Awareness.FenceApi.updateFences(...)</code>&nbsp;to register the Fence.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">        Awareness.FenceApi.updateFences(
                mGoogleApiClient,
                new FenceUpdateRequest.Builder()
                        .addFence(\"headphoneFenceKey\", headphoneFence, mFencePendingIntent)
                        .build())
                .setResultCallback(new ResultCallback&lt;Status&gt;() {
                    @Override
                    public void onResult(@NonNull Status status) {
                        if (status.isSuccess()) {
                            Log.i(TAG, \"Fence was successfully registered.\");
                        } else {
                            Log.e(TAG, \"Fence could not be registered: \" + status);
                        }
                    }
                });</pre>
<p>The important line is the&nbsp;<code>.addFence()</code>&nbsp;one which asks for the Fence and associated PendingIntent which are <code>headphoneFence</code> and <code>mFencePendingIntent</code> respectively in this example. Whenever condition defined in headphoneFence&nbsp;is reached, an Intent inside mFencePendingIntent would be fired and the registered&nbsp;BroadcastReceiver like&nbsp;<code>fenceReceiver</code> would receive the Intent.</p>
<p>To prevent the memory leak, unregistration is also needed. Put code below inside&nbsp;<code>unregisterFences()</code>&nbsp;to do the job.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    private void unregisterFences() {
        Awareness.FenceApi.updateFences(
                mGoogleApiClient,
                new FenceUpdateRequest.Builder()
                        .removeFence(\"headphoneFenceKey\")
                        .build()).setResultCallback(new ResultCallbacks&lt;Status&gt;() {
            @Override
            public void onSuccess(@NonNull Status status) {
                Log.i(TAG, \"Fence \" + \"headphoneFenceKey\" + \" successfully removed.\");
            }

            @Override
            public void onFailure(@NonNull Status status) {
                Log.i(TAG, \"Fence \" + \"headphoneFenceKey\" + \" could NOT be removed.\");
            }
        });
    }</pre>
<p>Now let's handle the Intent in&nbsp;<code>HeadphoneFenceBroadcastReceiver</code>. Modify&nbsp;<code>onReceive</code>&nbsp;function as code below.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    class HeadphoneFenceBroadcastReceiver extends BroadcastReceiver {

        @Override
        public void onReceive(Context context, Intent intent) {
            FenceState fenceState = FenceState.extract(intent);

            Log.d(TAG, \"Fence Receiver Received\");

            if (TextUtils.equals(fenceState.getFenceKey(), \"headphoneFenceKey\")) {
                switch (fenceState.getCurrentState()) {
                    case FenceState.TRUE:
                        Log.i(TAG, \"Fence &gt; Headphones are plugged in.\");
                        break;
                    case FenceState.FALSE:
                        Log.i(TAG, \"Fence &gt; Headphones are NOT plugged in.\");
                        break;
                    case FenceState.UNKNOWN:
                        Log.i(TAG, \"Fence &gt; The headphone fence is in an unknown state.\");
                        break;
                }
            }
        }
        
    }</pre>
<p>It is pretty straightforward. Once Intent is&nbsp;received, you could extract the FenceState with <code>FenceState.extract(intent)</code>&nbsp;function.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">FenceState fenceState = FenceState.extract(intent);</pre>
<p>And since a single BroadcastReceiver may be set to receive more than one type of Fence, FenceKey is needed to be checked to do anything next.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">if (TextUtils.equals(fenceState.getFenceKey(), \"headphoneFenceKey\")) {</pre>
<p>Please note that FenceKey here is the key that we give it in&nbsp;<code>addFence</code>&nbsp;function above. Don't forget to use constant instead of hardcoding in your production code.</p>
<p>The final step is to check the FenceState if the condition is TRUE&nbsp;of FALSE from <code>fenceState.getFenceState()</code>&nbsp;function and then do whatever you want. It's&nbsp;all done !</p>
<h2 class=\"subsection-heading\"><span style=\"color: #2980b9;\">Test</span></h2>
<p>Code above should now works properly. Please run your application and plug your headphones in. Logcat should show something like this:</p>
<pre class=\"brush:ps;auto-links:false;toolbar:false\" contenteditable=\"false\">D/Awareness: Fence Receiver Received
I/Awareness: Fence &gt; Headphones are plugged in.</pre>
<p>And&nbsp;logs below should be shown when you unplug your headphones.</p>
<pre class=\"brush:ps;auto-links:false;toolbar:false\" contenteditable=\"false\">D/Awareness: Fence Receiver Received
I/Awareness: Fence &gt; Headphones are NOT plugged in.</pre>
<p>As I said before. It is easy but outcome is very awesome !</p>
<h2 class=\"subsection-heading\"><span style=\"color: #2980b9;\">All Possible&nbsp;Fences</span></h2>
<p>5 contexts in Awareness API could be set as a condition by using class listed below:</p>
<p style=\"padding-left: 30px;\"><span style=\"font-family: 'courier new', courier, monospace;\"><strong><a href=\"https://developers.google.com/android/reference/com/google/android/gms/awareness/fence/DetectedActivityFence\" target=\"_blank\">DetectedActivityFence</a> </strong></span>- Detect condition based on user's activity.</p>
<p style=\"padding-left: 30px;\"><span style=\"font-family: 'courier new', courier, monospace;\"><strong><a href=\"https://developers.google.com/android/reference/com/google/android/gms/awareness/fence/HeadphoneFence\" target=\"_blank\">HeadphoneFence</a> </strong></span>- Detect condition based on headphones plugging in state.</p>
<p style=\"padding-left: 30px;\"><strong><span style=\"font-family: 'courier new', courier, monospace;\"><a href=\"https://developers.google.com/android/reference/com/google/android/gms/awareness/fence/TimeFence\" target=\"_blank\">TimeFence</a></span> </strong>- Detect condition based on local time at user's location.</p>
<p style=\"padding-left: 30px;\"><span style=\"font-family: 'courier new', courier, monospace;\"><strong><a href=\"https://developers.google.com/android/reference/com/google/android/gms/awareness/fence/LocationFence\" target=\"_blank\">LocationFence</a> </strong></span>- Detect condition based on user's location.</p>
<p style=\"padding-left: 30px;\"><strong><span style=\"font-family: 'courier new', courier, monospace;\"><a href=\"https://developers.google.com/android/reference/com/google/android/gms/awareness/fence/BeaconFence\" target=\"_blank\">BeaconFence</a></span></strong> - Detect condition based on nearby Beacons' state.</p>
<p>Each Fence has its own way to define the condition. I could not put them all here since there are too many. You could find more information by clicking at the class name. Anyway it supposes not to be a problem since if you understand the concept of HeadphoneFence code above, you would be able to apply and learn how to use another Fence by your own.</p>
<p>Please note that&nbsp;Weather and Places&nbsp;are not available in&nbsp;the&nbsp;Fence API.</p>
<h2 class=\"subsection-heading\"><span style=\"color: #2980b9;\">Detect Multiple Fences Condition</span></h2>
<p>In many cases it is useful to combine multiple conditions as a single&nbsp;Fence with and/or logic, for example,</p>
<p style=\"padding-left: 30px;\">- If user is running and has headphone plugged in.</p>
<p style=\"padding-left: 30px;\">- If user move closed to the specific location in the afternoon.</p>
<p>Don't worry. Fence API would do you a job. You could do it in the fancy way&nbsp;by&nbsp;declaring all the&nbsp;<code>AwarenessFence</code>s, for example,</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">        AwarenessFence headphoneFence = HeadphoneFence.during(HeadphoneState.PLUGGED_IN);
        AwarenessFence detectedActivityFence = DetectedActivityFence.during(DetectedActivityFence.RUNNING);
</pre>
<p>And combine them with <code>AwarenessFence.and</code>&nbsp;like this:</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">        AwarenessFence andFence = AwarenessFence.and(headphoneFence, detectedActivityFence);</pre>
<p>And then pass <code>andFence</code> to&nbsp;<code>addFence(...)</code> command and everything would works like desired.</p>
<p>Besides <span style=\"font-family: 'courier new', courier, monospace;\">and</span>, <span style=\"font-family: 'courier new', courier, monospace;\">or</span> and <span style=\"font-family: 'courier new', courier, monospace;\">not</span> are also be able to be done with&nbsp;<code>AwarenessFence.or</code>&nbsp;and&nbsp;<code>AwarenessFence.not</code>&nbsp;respectively. Please feel free to apply the logic as you want.</p>
<h2 class=\"section-heading\">Use Case</h2>
<p>There are some application that utilize the benifit of Awareness API. Here are two examples.</p>
<p style=\"padding-left: 30px;\"><span style=\"color: #2980b9;\"><strong>Superplayer Music</strong></span>&nbsp;- It could suggests you a song based on weather at user's location. Imagine, sad song in the rainy season ... That's cruel !</p>
<p style=\"padding-left: 30px;\"><span style=\"color: #2980b9;\"><strong>Trulia</strong></span>&nbsp;- Real estate application that could notify user when user is walking near&nbsp;the listed house and the weather is nice.</p>
<p>As you can see from the use cases above. With Awareness API, you could implement quite a lot of amazing rich features like you have never thought it is possible before. Only barrier now is your imagination ! Working with user's context is really awesome and can cause your application get the higher retention and positive feedback.</p>
<h2 class=\"section-heading\">Conclusion</h2>
<p>That's all about Awareness API in details. I found that it is very useful and I must say that I am very impressed with its capability. Anyway please note that Awareness API is a part of Google Play Services so it will work on device with GMS installed only. Always be reminded that your application might not be able to run on those Chinese devices out there.</p>
<p>I hope that you find this blog post&nbsp;useful. Have fun playing with user's context ! =D</p>			") (link nil "http://inthecheesefactory.com/blog/google-awareness-api-in-action/en") (pubDate nil "
				Wed, 29 Jun 2016 16:17:00 +0000			") (guid nil "http://inthecheesefactory.com/blog/google-awareness-api-in-action/en"))) ("Say goodbye to findViewById. Say hello to Data Binding Library." "<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/databinding/coverfv.jpg\" /></p>
<p><code>findViewById</code> is one of the most annoying boilerplate code in Android application development. This part of code unnecessarily requires bunch&nbsp;of line of codes and can easily cause an expected behavior unintentionally.</p>
<p>Some library was invented to reduce this part of code's size, for example,&nbsp;the popular&nbsp;<a href=\"http://jakewharton.github.io/butterknife/\" target=\"_blank\">Butter Knife</a>&nbsp;which adopts Annotation processing to help mapping between Java's variable and ID declared inside layout XML file.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">class ExampleActivity extends Activity {
@BindView(R.id.title) TextView title;
@BindView(R.id.subtitle) TextView subtitle;
@BindView(R.id.footer) TextView footer;
@Override public void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.simple_activity);
ButterKnife.bind(this);
// TODO Use fields...
}
}</pre>
<p>Anyway, although it could help reducing a signifant number of line of codes but it still requires some effort and can still cause some mistake since&nbsp;you still have to declare <code>@BindView</code> manually one by one.</p>
<p>Here we go. This blog will introduce you the perfect solution to totally eliminate these annoying codes away using god-level&nbsp;<strong>Data Binding Library</strong>.</p>
<h2 class=\"section-heading\">Tools Preparation</h2>
<p>To use Data Binding Library, you need to use&nbsp;<strong>Android Studio 1.5</strong>&nbsp;or higher version. Anyway I believe that most of you have already upgraded to version 2.0 already so this should not be a problem.</p>
<p>And then open module's&nbsp;<code>build.gradle</code>&nbsp;and add the following line in <code>android</code> block to enable Data Binding.</p>
<pre class=\"brush:groovy;auto-links:false;toolbar:false\" contenteditable=\"false\">android {
...
dataBinding {
enabled true
}
}</pre>
<p>Sync Gradle to finish the process and done. Your project has now gained access to Data Binding Library. Easy, huh? =)</p>
<h2 class=\"section-heading\">Inflate Layout in Data Binding's way</h2>
<p>Layout is required some change&nbsp;to let Data Binding be usable.&nbsp;Here is the original one:</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;
&lt;RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"
xmlns:app=\"http://schemas.android.com/apk/res-auto\"
xmlns:tools=\"http://schemas.android.com/tools\"
android:id=\"@+id/activity_main\"
android:layout_width=\"match_parent\"
android:layout_height=\"match_parent\"
tools:context=\"com.inthecheesefactory.lab.databinding.MainActivity\"&gt;
&lt;TextView
android:id=\"@+id/tvHello\"
android:layout_width=\"wrap_content\"
android:layout_height=\"wrap_content\"
android:layout_centerInParent=\"true\"
android:text=\"Hello World!\" /&gt;
&lt;/RelativeLayout&gt;</pre>
<p><code>&lt;layout&gt;...&lt;/layout&gt;</code>&nbsp;tag is required to be&nbsp;a Root Element and then move everything inside it. Here is the modified version:</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;
&lt;layout xmlns:android=\"http://schemas.android.com/apk/res/android\"
xmlns:app=\"http://schemas.android.com/apk/res-auto\"
xmlns:tools=\"http://schemas.android.com/tools\"&gt;
&lt;RelativeLayout
android:id=\"@+id/activity_main\"
android:layout_width=\"match_parent\"
android:layout_height=\"match_parent\"
tools:context=\"com.inthecheesefactory.lab.databinding.MainActivity\"&gt;
&lt;TextView
android:id=\"@+id/tvHello\"
android:layout_width=\"wrap_content\"
android:layout_height=\"wrap_content\"
android:layout_centerInParent=\"true\"
android:text=\"Hello World!\" /&gt;
&lt;/RelativeLayout&gt;
&lt;/layout&gt;
</pre>
<p><span style=\"color: #2980b9;\">At this step, please <span style=\"text-decoration: underline;\">build your project</span>&nbsp;to let Data Binding Library auto generating neccessary files for you. You need those for the further steps.</span></p>
<p>After build is done, open your Activity's java file and change&nbsp;<code>setContentView</code>&nbsp;part of code from:</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">public class MainActivity extends AppCompatActivity {
@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_main);
}
}</pre>
<p>into:</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">public class MainActivity extends AppCompatActivity {
ActivityMainBinding binding;
@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
binding = DataBindingUtil.setContentView(this, R.layout.activity_main);
}
}</pre>
<p>You may notice that <code>ActivityMainBinding</code> is used here although you didn't declare it anywhere. There is nothing magical here. <code>ActivityMainBinding.java</code> was previously auto generated by Data Binding Library when you built your app minutes ago. Its class name comes from <code>activity_main.xml</code> file's name which is turned into <strong>Upper CamelCase</strong> before appending with <strong>Binding, </strong><code>ActivityMainBinding</code>. This is the way this library use to turn file's name into class name. You can use this logic in every single case.</p>
<p>And now it's time to access View inside <code>activity_main.xml</code>. Well ... you can simply access it through&nbsp;<code>binding</code> variable using its ID like this !</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">binding.tvHello.setText(\"Hello from Data Binding\");</pre>
<p>Here is the result.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/databinding/screenshot117.jpg\" alt=\"\" width=\"1080\" height=\"672\" /></p>
<p>As you can see, boilerplate <code>findViewById</code> code are all eliminated. Moreover, you have no need to declare even a single variable to access&nbsp;View. The code will still be the same although you add more 100 Views to this layout. Cool, isn't it ?!?</p>
<h2 class=\"section-heading\">Inflating into&nbsp;Custom ViewGroup</h2>
<p>The way to inflate your layout&nbsp;into&nbsp;Activity has already shown above. And how's about inflating into Custom ViewGroup or Layout to create your Custom&nbsp;View. Can we do it? Definitely yes ! And it is as easy as above sample.</p>
<p>First of all, you need to modify your layout XML file by adding&nbsp;<code>&lt;layout&gt;...&lt;/layout&gt;</code>&nbsp;as&nbsp;a Root Element.</p>
<p><span style=\"font-family: 'courier new', courier, monospace;\"><strong>item_bloglist.xml</strong></span></p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;
&lt;layout xmlns:android=\"http://schemas.android.com/apk/res/android\"&gt;
&lt;LinearLayout
android:layout_width=\"match_parent\"
android:layout_height=\"match_parent\"
android:orientation=\"vertical\"
android:padding=\"16dp\"&gt;
&lt;TextView
android:id=\"@+id/tvTitle\"
style=\"@style/TextAppearance.AppCompat.Title\"
android:layout_width=\"wrap_content\"
android:layout_height=\"wrap_content\"
android:text=\"Title\" /&gt;
&lt;TextView
android:id=\"@+id/tvCaption\"
style=\"@style/TextAppearance.AppCompat.Caption\"
android:layout_width=\"wrap_content\"
android:layout_height=\"wrap_content\"
android:text=\"Caption\" /&gt;
&lt;/LinearLayout&gt;
&lt;/layout&gt;</pre>
<p>And then use this line of code to inflate the layout.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">ItemBloglistBinding binding = ItemBloglistBinding.inflate(layoutInflater, root, attachToRoot);</pre>
<p>Code pattern is still be the same as the way we normally do layout inflation. The only change is you need to inflate using the auto-generated Binding class instead, which is <code>ItemBloglistBinding</code> in this example. Again, its name is converted&nbsp;from <code>item_bloglist.xml</code>.</p>
<p>Here is the full code snippet how to inflate <code>item_bloglist.xml</code> into <strong>FrameLayout</strong> and automatically gain access to all Views indie.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">package com.inthecheesefactory.lab.databinding;
import android.annotation.TargetApi;
import android.content.Context;
import android.os.Build;
import android.util.AttributeSet;
import android.view.LayoutInflater;
import android.widget.FrameLayout;
import com.inthecheesefactory.lab.databinding.databinding.ItemBloglistBinding;
/**
* Created by nuuneoi on 6/28/2016.
*/
public class BlogListItem extends FrameLayout {
ItemBloglistBinding binding;
public BlogListItem(Context context) {
super(context);
initInflate();
initInstances();
}
public BlogListItem(Context context, AttributeSet attrs) {
super(context, attrs);
initInflate();
initInstances();
}
public BlogListItem(Context context, AttributeSet attrs, int defStyleAttr) {
super(context, attrs, defStyleAttr);
initInflate();
initInstances();
}
@TargetApi(Build.VERSION_CODES.LOLLIPOP)
public BlogListItem(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {
super(context, attrs, defStyleAttr, defStyleRes);
initInflate();
initInstances();
}
private void initInflate() {
LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
binding = ItemBloglistBinding.inflate(inflater, this, true);
}
private void initInstances() {
}
}
</pre>
<p>Yah, you now have a Custom ViewGroup containing <code>item_bloglist.xml</code> layout inside.&nbsp;To access any View inside, you could simply do the same fancy way:</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    private void initInstances() {
binding.tvTitle.setText(\"I am the Title\");
}
</pre>
<p>Now let's try to place it somewhere in <code>activity_main.xml</code>.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;
&lt;layout
...&gt;
&lt;RelativeLayout
...&gt;
...
&lt;com.inthecheesefactory.lab.databinding.BlogListItem
android:layout_width=\"match_parent\"
android:layout_height=\"wrap_content\" /&gt;
&lt;/RelativeLayout&gt;
&lt;/layout&gt;
</pre>
<p>Here is the result.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/databinding/screenshot669.jpg\" alt=\"\" width=\"1080\" height=\"672\" /></p>
<p>I must say that code is pretty short and really nice =)</p>
<h2 class=\"section-heading\">How Data Binding Library convert ID&nbsp;into variable name</h2>
<p>You can notice in the sample above that every single @+id declared in XML file are automatically turned into Java variables as XXXBinding's member variable. We should know more in details on how&nbsp;this library uses to convert the id to variable name to prevent the further problem.</p>
<p>Actually the way this library use to convert id to variable name is as simple as: <strong>\"Turn every&nbsp;id(s)&nbsp;into camelCase\"</strong></p>
<p>for instance,</p>
<p><code>@+id/tvHello</code></p>
<p style=\"padding-left: 30px;\">This is already in camelCase format so the variable name in Java is simply be&nbsp;<code>tvHello</code></p>
<p><code>@+id/tv_hello</code></p>
<p style=\"padding-left: 30px;\">This is in Underscores format. It will be converted&nbsp;into camelCase first to match the rule so it will also be&nbsp;<code>tvHello</code>&nbsp;as above</p>
<p>And what will happen if those two ids are declared into same XML files like this?:</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">        &lt;TextView
android:id=\"@+id/tvHello\"
android:layout_width=\"wrap_content\"
android:layout_height=\"wrap_content\"
android:layout_centerInParent=\"true\"
android:text=\"Hello World!\" /&gt;
&lt;TextView
android:id=\"@+id/tv_hello\"
android:layout_width=\"wrap_content\"
android:layout_height=\"wrap_content\"
android:layout_centerInParent=\"true\"
android:text=\"Hello World!\" /&gt;
</pre>
<p>Don't worry that there would be a problem. Data Bind Library is smart enough to seperate those two apart. But since those variable names are just the same so at the final, you will get two variables:&nbsp;<code>tvHello</code> and <code>tvHello1</code> instead to access those two TextView respectively.</p>
<p>Anyway, although it is usable but it may cause some confusion. To prevent this, it is recommended to set id in only a single format, either camelCase or Underscores. Choose just only one and everything will be good.</p>
<h2 class=\"section-heading\">Conclusion</h2>
<p>This is only a&nbsp;small part of Data Binding Library's potential but I must say that it is the killer feature which&nbsp;could improve your code's quality quite a lot. There are still be a lot that this library is really useful for your application. If you have time, I suggest you to study more about this Data Binding Library. It's a game changer =)</p>
<h2 class=\"section-heading\">Bonus: Kotlin Android Extensions</h2>
<p>If you are developing your Android application using Kotlin. There is also the similar thing named&nbsp;<a href=\"https://kotlinlang.org/docs/tutorials/android-plugin.html\" target=\"_blank\">Kotlin Android Extensions</a>&nbsp;available. It is even easier since you have no need to modify the layout even bit. If you are Kotlin's fan, go for it =)</p>" "http://inthecheesefactory.com/blog/say-goodbye-to-findviewbyid-with-data-binding-library/en" (22386 7764) old 5 nil nil ((title nil "
				Say goodbye to findViewById. Say hello to Data Binding Library.			") (description nil "
				<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/databinding/coverfv.jpg\" /></p> 
<p><code>findViewById</code> is one of the most annoying boilerplate code in Android application development. This part of code unnecessarily requires bunch&nbsp;of line of codes and can easily cause an expected behavior unintentionally.</p>
<p>Some library was invented to reduce this part of code's size, for example,&nbsp;the popular&nbsp;<a href=\"http://jakewharton.github.io/butterknife/\" target=\"_blank\">Butter Knife</a>&nbsp;which adopts Annotation processing to help mapping between Java's variable and ID declared inside layout XML file.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">class ExampleActivity extends Activity {
    @BindView(R.id.title) TextView title;
    @BindView(R.id.subtitle) TextView subtitle;
    @BindView(R.id.footer) TextView footer;

    @Override public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.simple_activity);
        ButterKnife.bind(this);
        // TODO Use fields...
    }
}</pre>
<p>Anyway, although it could help reducing a signifant number of line of codes but it still requires some effort and can still cause some mistake since&nbsp;you still have to declare <code>@BindView</code> manually one by one.</p>
<p>Here we go. This blog will introduce you the perfect solution to totally eliminate these annoying codes away using god-level&nbsp;<strong>Data Binding Library</strong>.</p>
<h2 class=\"section-heading\">Tools Preparation</h2>
<p>To use Data Binding Library, you need to use&nbsp;<strong>Android Studio 1.5</strong>&nbsp;or higher version. Anyway I believe that most of you have already upgraded to version 2.0 already so this should not be a problem.</p>
<p>And then open module's&nbsp;<code>build.gradle</code>&nbsp;and add the following line in <code>android</code> block to enable Data Binding.</p>
<pre class=\"brush:groovy;auto-links:false;toolbar:false\" contenteditable=\"false\">android {
    ...
    dataBinding {
        enabled true
    }
}</pre>
<p>Sync Gradle to finish the process and done. Your project has now gained access to Data Binding Library. Easy, huh? =)</p>
<h2 class=\"section-heading\">Inflate Layout in Data Binding's way</h2>
<p>Layout is required some change&nbsp;to let Data Binding be usable.&nbsp;Here is the original one:</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;
&lt;RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"
    xmlns:app=\"http://schemas.android.com/apk/res-auto\"
    xmlns:tools=\"http://schemas.android.com/tools\"
    android:id=\"@+id/activity_main\"
    android:layout_width=\"match_parent\"
    android:layout_height=\"match_parent\"
    tools:context=\"com.inthecheesefactory.lab.databinding.MainActivity\"&gt;

    &lt;TextView
        android:id=\"@+id/tvHello\"
        android:layout_width=\"wrap_content\"
        android:layout_height=\"wrap_content\"
        android:layout_centerInParent=\"true\"
        android:text=\"Hello World!\" /&gt;

&lt;/RelativeLayout&gt;</pre>
<p><code>&lt;layout&gt;...&lt;/layout&gt;</code>&nbsp;tag is required to be&nbsp;a Root Element and then move everything inside it. Here is the modified version:</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;
&lt;layout xmlns:android=\"http://schemas.android.com/apk/res/android\"
    xmlns:app=\"http://schemas.android.com/apk/res-auto\"
    xmlns:tools=\"http://schemas.android.com/tools\"&gt;

    &lt;RelativeLayout
        android:id=\"@+id/activity_main\"
        android:layout_width=\"match_parent\"
        android:layout_height=\"match_parent\"
        tools:context=\"com.inthecheesefactory.lab.databinding.MainActivity\"&gt;

        &lt;TextView
            android:id=\"@+id/tvHello\"
            android:layout_width=\"wrap_content\"
            android:layout_height=\"wrap_content\"
            android:layout_centerInParent=\"true\"
            android:text=\"Hello World!\" /&gt;

    &lt;/RelativeLayout&gt;
&lt;/layout&gt;
</pre>
<p><span style=\"color: #2980b9;\">At this step, please <span style=\"text-decoration: underline;\">build your project</span>&nbsp;to let Data Binding Library auto generating neccessary files for you. You need those for the further steps.</span></p>
<p>After build is done, open your Activity's java file and change&nbsp;<code>setContentView</code>&nbsp;part of code from:</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">public class MainActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
    }

}</pre>
<p>into:</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">public class MainActivity extends AppCompatActivity {

    ActivityMainBinding binding;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        binding = DataBindingUtil.setContentView(this, R.layout.activity_main);
    }

}</pre>
<p>You may notice that <code>ActivityMainBinding</code> is used here although you didn't declare it anywhere. There is nothing magical here. <code>ActivityMainBinding.java</code> was previously auto generated by Data Binding Library when you built your app minutes ago. Its class name comes from <code>activity_main.xml</code> file's name which is turned into <strong>Upper CamelCase</strong> before appending with <strong>Binding, </strong><code>ActivityMainBinding</code>. This is the way this library use to turn file's name into class name. You can use this logic in every single case.</p>
<p>And now it's time to access View inside <code>activity_main.xml</code>. Well ... you can simply access it through&nbsp;<code>binding</code> variable using its ID like this !</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">binding.tvHello.setText(\"Hello from Data Binding\");</pre>
<p>Here is the result.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/databinding/screenshot117.jpg\" alt=\"\" width=\"1080\" height=\"672\" /></p>
<p>As you can see, boilerplate <code>findViewById</code> code are all eliminated. Moreover, you have no need to declare even a single variable to access&nbsp;View. The code will still be the same although you add more 100 Views to this layout. Cool, isn't it ?!?</p>
<h2 class=\"section-heading\">Inflating into&nbsp;Custom ViewGroup</h2>
<p>The way to inflate your layout&nbsp;into&nbsp;Activity has already shown above. And how's about inflating into Custom ViewGroup or Layout to create your Custom&nbsp;View. Can we do it? Definitely yes ! And it is as easy as above sample.</p>
<p>First of all, you need to modify your layout XML file by adding&nbsp;<code>&lt;layout&gt;...&lt;/layout&gt;</code>&nbsp;as&nbsp;a Root Element.</p>
<p><span style=\"font-family: 'courier new', courier, monospace;\"><strong>item_bloglist.xml</strong></span></p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;
&lt;layout xmlns:android=\"http://schemas.android.com/apk/res/android\"&gt;

    &lt;LinearLayout
        android:layout_width=\"match_parent\"
        android:layout_height=\"match_parent\"
        android:orientation=\"vertical\"
        android:padding=\"16dp\"&gt;

        &lt;TextView
            android:id=\"@+id/tvTitle\"
            style=\"@style/TextAppearance.AppCompat.Title\"
            android:layout_width=\"wrap_content\"
            android:layout_height=\"wrap_content\"
            android:text=\"Title\" /&gt;

        &lt;TextView
            android:id=\"@+id/tvCaption\"
            style=\"@style/TextAppearance.AppCompat.Caption\"
            android:layout_width=\"wrap_content\"
            android:layout_height=\"wrap_content\"
            android:text=\"Caption\" /&gt;

    &lt;/LinearLayout&gt;

&lt;/layout&gt;</pre>
<p>And then use this line of code to inflate the layout.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">ItemBloglistBinding binding = ItemBloglistBinding.inflate(layoutInflater, root, attachToRoot);</pre>
<p>Code pattern is still be the same as the way we normally do layout inflation. The only change is you need to inflate using the auto-generated Binding class instead, which is <code>ItemBloglistBinding</code> in this example. Again, its name is converted&nbsp;from <code>item_bloglist.xml</code>.</p>
<p>Here is the full code snippet how to inflate <code>item_bloglist.xml</code> into <strong>FrameLayout</strong> and automatically gain access to all Views indie.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">package com.inthecheesefactory.lab.databinding;

import android.annotation.TargetApi;
import android.content.Context;
import android.os.Build;
import android.util.AttributeSet;
import android.view.LayoutInflater;
import android.widget.FrameLayout;

import com.inthecheesefactory.lab.databinding.databinding.ItemBloglistBinding;

/**
 * Created by nuuneoi on 6/28/2016.
 */

public class BlogListItem extends FrameLayout {

    ItemBloglistBinding binding;

    public BlogListItem(Context context) {
        super(context);
        initInflate();
        initInstances();
    }

    public BlogListItem(Context context, AttributeSet attrs) {
        super(context, attrs);
        initInflate();
        initInstances();
    }

    public BlogListItem(Context context, AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
        initInflate();
        initInstances();
    }

    @TargetApi(Build.VERSION_CODES.LOLLIPOP)
    public BlogListItem(Context context, AttributeSet attrs, int defStyleAttr, int defStyleRes) {
        super(context, attrs, defStyleAttr, defStyleRes);
        initInflate();
        initInstances();
    }

    private void initInflate() {
        LayoutInflater inflater = (LayoutInflater) getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        binding = ItemBloglistBinding.inflate(inflater, this, true);
    }

    private void initInstances() {

    }

}
</pre>
<p>Yah, you now have a Custom ViewGroup containing <code>item_bloglist.xml</code> layout inside.&nbsp;To access any View inside, you could simply do the same fancy way:</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    private void initInstances() {
        binding.tvTitle.setText(\"I am the Title\");
    }
</pre>
<p>Now let's try to place it somewhere in <code>activity_main.xml</code>.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;
&lt;layout
    ...&gt;

    &lt;RelativeLayout
        ...&gt;

        ...

        &lt;com.inthecheesefactory.lab.databinding.BlogListItem
            android:layout_width=\"match_parent\"
            android:layout_height=\"wrap_content\" /&gt;

    &lt;/RelativeLayout&gt;
&lt;/layout&gt;
</pre>
<p>Here is the result.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/databinding/screenshot669.jpg\" alt=\"\" width=\"1080\" height=\"672\" /></p>
<p>I must say that code is pretty short and really nice =)</p>
<h2 class=\"section-heading\">How Data Binding Library convert ID&nbsp;into variable name</h2>
<p>You can notice in the sample above that every single @+id declared in XML file are automatically turned into Java variables as XXXBinding's member variable. We should know more in details on how&nbsp;this library uses to convert the id to variable name to prevent the further problem.</p>
<p>Actually the way this library use to convert id to variable name is as simple as: <strong>\"Turn every&nbsp;id(s)&nbsp;into camelCase\"</strong></p>
<p>for instance,</p>
<p><code>@+id/tvHello</code></p>
<p style=\"padding-left: 30px;\">This is already in camelCase format so the variable name in Java is simply be&nbsp;<code>tvHello</code></p>
<p><code>@+id/tv_hello</code></p>
<p style=\"padding-left: 30px;\">This is in Underscores format. It will be converted&nbsp;into camelCase first to match the rule so it will also be&nbsp;<code>tvHello</code>&nbsp;as above</p>
<p>And what will happen if those two ids are declared into same XML files like this?:</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">        &lt;TextView
            android:id=\"@+id/tvHello\"
            android:layout_width=\"wrap_content\"
            android:layout_height=\"wrap_content\"
            android:layout_centerInParent=\"true\"
            android:text=\"Hello World!\" /&gt;

        &lt;TextView
            android:id=\"@+id/tv_hello\"
            android:layout_width=\"wrap_content\"
            android:layout_height=\"wrap_content\"
            android:layout_centerInParent=\"true\"
            android:text=\"Hello World!\" /&gt;
</pre>
<p>Don't worry that there would be a problem. Data Bind Library is smart enough to seperate those two apart. But since those variable names are just the same so at the final, you will get two variables:&nbsp;<code>tvHello</code> and <code>tvHello1</code> instead to access those two TextView respectively.</p>
<p>Anyway, although it is usable but it may cause some confusion. To prevent this, it is recommended to set id in only a single format, either camelCase or Underscores. Choose just only one and everything will be good.</p>
<h2 class=\"section-heading\">Conclusion</h2>
<p>This is only a&nbsp;small part of Data Binding Library's potential but I must say that it is the killer feature which&nbsp;could improve your code's quality quite a lot. There are still be a lot that this library is really useful for your application. If you have time, I suggest you to study more about this Data Binding Library. It's a game changer =)</p>
<h2 class=\"section-heading\">Bonus: Kotlin Android Extensions</h2>
<p>If you are developing your Android application using Kotlin. There is also the similar thing named&nbsp;<a href=\"https://kotlinlang.org/docs/tutorials/android-plugin.html\" target=\"_blank\">Kotlin Android Extensions</a>&nbsp;available. It is even easier since you have no need to modify the layout even bit. If you are Kotlin's fan, go for it =)</p>			") (link nil "http://inthecheesefactory.com/blog/say-goodbye-to-findviewbyid-with-data-binding-library/en") (pubDate nil "
				Tue, 28 Jun 2016 06:51:00 +0000			") (guid nil "http://inthecheesefactory.com/blog/say-goodbye-to-findviewbyid-with-data-binding-library/en"))) ("onActivityResult() inside Nested Fragment is now called on Support Library rev 23.2 and above" "<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/nestedfragment/cover2.png\" /></p>
<p>One of the most annoying problem of Nested Fragment (a Fragment that is attached on another Fragment) is although we can call <code>startActivityForResult(...)</code> but <code>onActivityResult(...)</code> will not be called on the way back. You can find the reason behind in this blog post <a href=\"../../../blog/how-to-fix-nested-fragment-onactivityresult-issue/en\" target=\"_blank\">\"How to make onActivityResult get called on Nested Fragment\"</a>.</p>
<p>Previously if you&nbsp;want to make it work, you&nbsp;need to do some workaround, for example, NestedFragment introduced by me last year. Anyway good news is here. No any extra workaround is needed&nbsp;anymore since the problem has already been fixed&nbsp;with Fragment brought in&nbsp;Android Support Library rev 23.2 onwards.&nbsp;<code>onActivityResult</code>&nbsp;is now called in Nested Fragment !</p>
<h2 class=\"section-heading\">Testing</h2>
<p>I did some experiment by creating two types of Fragment: <code>MainFragment</code> and <code>SecondFragment</code>. MainFragment is placed on Activity while SecondFragment is placed on MainFragment like shown in diagram below.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/nestedfragment/fragments.png\" alt=\"\" width=\"960\" height=\"533\" /></p>
<p>SecondFragment is a very simple Fragment contains just a single&nbsp;button named <code>btnGo</code>&nbsp;with simple logic shown in&nbsp;code below.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">// SecondFragment.java
// Calling to SecondActivity
@Override
public View onCreateView(LayoutInflater inflater, ViewGroup container,
Bundle savedInstanceState) {
...
btnGo = (Button) rootView.findViewById(R.id.btnGo);
btnGo.setOnClickListener(new View.OnClickListener() {
@Override
public void onClick(View v) {
Intent intent = new Intent(getContext(), SecondActivity.class);
startActivityForResult(intent, 12345);
}
});
}
// Get Result Back
@Override
public void onActivityResult(int requestCode, int resultCode, Intent data) {
super.onActivityResult(requestCode, resultCode, data);
Log.d(\"onActivityResult\", \"requestCode = \" + requestCode);
}</pre>
<p>As you can see in the code shown above. When btnGo is clicked, <code>SecondActivity</code> will be launched by&nbsp;<code>startActivityForResult</code>&nbsp; command. And here is the source code of&nbsp;<code>SecondActivity</code>.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">// SecondActivity.java
public class SecondActivity extends AppCompatActivity {
@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_second);
Intent intent = new Intent();
setResult(RESULT_OK, intent);
finish();
}
}
</pre>
<p>SecondActivity does nothing but just simply&nbsp;immediately finish itself right after it is launched and result will be delivered back to the caller.</p>
<p><strong>Expectation:</strong>&nbsp;When btnGo is clicked, <code>onActivityResult</code> inside <code>SecondFragment</code> must be called and a line of log must be shown inside logcat window.</p>
<p>And here is the result when tested with <strong>rev 23.1.1</strong> and <strong>rev 23.2.1</strong></p>
<h2 class=\"subsection-heading\">With Android Support Library revision 23.1.1</h2>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">com.inthecheesefactory.lab.nestedfragment I/OpenGLRenderer: Initialized EGL, version 1.4
com.inthecheesefactory.lab.nestedfragment W/EGL_emulation: eglSurfaceAttrib not implemented
com.inthecheesefactory.lab.nestedfragment W/OpenGLRenderer: Failed to set EGL_SWAP_BEHAVIOR on surface 0xaf853600, error=EGL_SUCCESS</pre>
<h2 class=\"subsection-heading\">With Android Support Library revision 23.2.1</h2>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">com.inthecheesefactory.lab.nestedfragment I/OpenGLRenderer: Initialized EGL, version 1.4
com.inthecheesefactory.lab.nestedfragment W/EGL_emulation: eglSurfaceAttrib not implemented
com.inthecheesefactory.lab.nestedfragment W/OpenGLRenderer: Failed to set EGL_SWAP_BEHAVIOR on surface 0xaf853600, error=EGL_SUCCESS
com.inthecheesefactory.lab.nestedfragment D/onActivityResult: requestCode = 12345
</pre>
<p>As you can see, <span style=\"color: #e74c3c;\"><strong>onActivityResult on SecondFragment is not called&nbsp;</strong><strong>on Android Support Library rev 23.1 and below</strong></span>&nbsp;<span style=\"text-decoration: underline; color: #16a085;\"><strong>while it is called perfectly on&nbsp;rev 23.2 and above</strong></span>.</p>
<p>Personally&nbsp;this is a little big change which could change the way we code. Let's start switching to Android Support Library rev 23.2+ now and make your code more clean ! =D</p>" "http://inthecheesefactory.com/blog/onactivityresult-nested-fragment-support-library-v23.2/en" (22262 33928) old 6 nil nil ((title nil "
				onActivityResult() inside Nested Fragment is now called on Support Library rev 23.2 and above			") (description nil "
				<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/nestedfragment/cover2.png\" /></p> 
<p>One of the most annoying problem of Nested Fragment (a Fragment that is attached on another Fragment) is although we can call <code>startActivityForResult(...)</code> but <code>onActivityResult(...)</code> will not be called on the way back. You can find the reason behind in this blog post <a href=\"../../../blog/how-to-fix-nested-fragment-onactivityresult-issue/en\" target=\"_blank\">\"How to make onActivityResult get called on Nested Fragment\"</a>.</p>
<p>Previously if you&nbsp;want to make it work, you&nbsp;need to do some workaround, for example, NestedFragment introduced by me last year. Anyway good news is here. No any extra workaround is needed&nbsp;anymore since the problem has already been fixed&nbsp;with Fragment brought in&nbsp;Android Support Library rev 23.2 onwards.&nbsp;<code>onActivityResult</code>&nbsp;is now called in Nested Fragment !</p>
<h2 class=\"section-heading\">Testing</h2>
<p>I did some experiment by creating two types of Fragment: <code>MainFragment</code> and <code>SecondFragment</code>. MainFragment is placed on Activity while SecondFragment is placed on MainFragment like shown in diagram below.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/nestedfragment/fragments.png\" alt=\"\" width=\"960\" height=\"533\" /></p>
<p>SecondFragment is a very simple Fragment contains just a single&nbsp;button named <code>btnGo</code>&nbsp;with simple logic shown in&nbsp;code below.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">// SecondFragment.java

// Calling to SecondActivity
@Override
public View onCreateView(LayoutInflater inflater, ViewGroup container,
                         Bundle savedInstanceState) {
    ...
    btnGo = (Button) rootView.findViewById(R.id.btnGo);
    btnGo.setOnClickListener(new View.OnClickListener() {
        @Override
        public void onClick(View v) {
            Intent intent = new Intent(getContext(), SecondActivity.class);
            startActivityForResult(intent, 12345);
        }
    });
}

// Get Result Back
@Override
public void onActivityResult(int requestCode, int resultCode, Intent data) {
    super.onActivityResult(requestCode, resultCode, data);
    Log.d(\"onActivityResult\", \"requestCode = \" + requestCode);
}</pre>
<p>As you can see in the code shown above. When btnGo is clicked, <code>SecondActivity</code> will be launched by&nbsp;<code>startActivityForResult</code>&nbsp; command. And here is the source code of&nbsp;<code>SecondActivity</code>.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">// SecondActivity.java
public class SecondActivity extends AppCompatActivity {

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_second);

        Intent intent = new Intent();
        setResult(RESULT_OK, intent);
        finish();
    }
}
</pre>
<p>SecondActivity does nothing but just simply&nbsp;immediately finish itself right after it is launched and result will be delivered back to the caller.</p>
<p><strong>Expectation:</strong>&nbsp;When btnGo is clicked, <code>onActivityResult</code> inside <code>SecondFragment</code> must be called and a line of log must be shown inside logcat window.</p>
<p>And here is the result when tested with <strong>rev 23.1.1</strong> and <strong>rev 23.2.1</strong></p>
<h2 class=\"subsection-heading\">With Android Support Library revision 23.1.1</h2>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">com.inthecheesefactory.lab.nestedfragment I/OpenGLRenderer: Initialized EGL, version 1.4
com.inthecheesefactory.lab.nestedfragment W/EGL_emulation: eglSurfaceAttrib not implemented
com.inthecheesefactory.lab.nestedfragment W/OpenGLRenderer: Failed to set EGL_SWAP_BEHAVIOR on surface 0xaf853600, error=EGL_SUCCESS</pre>
<h2 class=\"subsection-heading\">With Android Support Library revision 23.2.1</h2>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">com.inthecheesefactory.lab.nestedfragment I/OpenGLRenderer: Initialized EGL, version 1.4
com.inthecheesefactory.lab.nestedfragment W/EGL_emulation: eglSurfaceAttrib not implemented
com.inthecheesefactory.lab.nestedfragment W/OpenGLRenderer: Failed to set EGL_SWAP_BEHAVIOR on surface 0xaf853600, error=EGL_SUCCESS
com.inthecheesefactory.lab.nestedfragment D/onActivityResult: requestCode = 12345
</pre>
<p>As you can see, <span style=\"color: #e74c3c;\"><strong>onActivityResult on SecondFragment is not called&nbsp;</strong><strong>on Android Support Library rev 23.1 and below</strong></span>&nbsp;<span style=\"text-decoration: underline; color: #16a085;\"><strong>while it is called perfectly on&nbsp;rev 23.2 and above</strong></span>.</p>
<p>Personally&nbsp;this is a little big change which could change the way we code. Let's start switching to Android Support Library rev 23.2+ now and make your code more clean ! =D</p>			") (link nil "http://inthecheesefactory.com/blog/onactivityresult-nested-fragment-support-library-v23.2/en") (pubDate nil "
				Sat, 26 Mar 2016 12:46:00 +0000			") (guid nil "http://inthecheesefactory.com/blog/onactivityresult-nested-fragment-support-library-v23.2/en"))) ("How to setup a Private Maven Repository for in-house Android libraries distribution" "<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/verify_1.png\" /></p>
<p>Yesterday I got a question: <span style=\"color: #2980b9;\"><strong>\"In the end, there will be ton of library modules placed&nbsp;inside the android project. What is the best and sustainable way to organize these libraries for both current and future uses?\".</strong></span></p>
<p>Well, I think the question&nbsp;was quite great and I believe that many of you might have the same doubtfulness&nbsp;in mind so I decide to write this blog giving you an instruction how to <span style=\"color: #27ae60;\"><strong>\"setup your own Private Maven Repository\"</strong></span> for the internal use.</p>
<p>Let's get started.</p>
<h2 class=\"section-heading\">Why should we setup a&nbsp;Private&nbsp;Maven Repository?</h2>
<p>It's true that an Android Library module is actually just a bunch of source codes grouped in the same directory. If you want to let other developers&nbsp;use your library, you could simply send them&nbsp;the whole directory and let them include it in&nbsp;their project.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/libmodule.png\" alt=\"\" width=\"1281\" /></p>
<p>Sounds easy but it doesn't mean it is good.&nbsp;The question is&nbsp;<span style=\"color: #2980b9;\"><strong>\"If company starts to grow and amount&nbsp;of project starts to increase continously. Is it good if we still pass the library as source code like this?\"</strong></span></p>
<p>The answer is a very big <strong><span style=\"color: #e74c3c;\">NO</span>.</strong> Don't do that ! Here are some big reasons you need to concern:</p>
<p style=\"padding-left: 30px;\">1) Let's imagine. If you have about 10 projects sharing the same library module. At the final, you will find copies of source code scattering around in those&nbsp;projects which is totally not good for code controlling.</p>
<p style=\"padding-left: 30px;\">2) It's quite not convenient&nbsp;to update library to the newer version. Here is the process:&nbsp;download the source code, copy it, replace the old one with the new one, check if there is something wrong, etc... And you have to do every single step <em>manually</em>.</p>
<p style=\"padding-left: 30px;\">3) And if your day is bad enough, the updated version of library may cause your has-ever-worked-great-before application&nbsp;into the&nbsp;junky state. In that case, you need to roll the library back to the previous version. Wahhhh, that means we need to keep every single version of source code as a backup in case we might meet the jackpot someday.</p>
<p style=\"padding-left: 30px;\">4) In term of usage, we need to distribute the library to let other developers <strong>\"use\"</strong> it. So there is no need to let them see the source code. Just a legible document how to use the library is more than enough.</p>
<p style=\"padding-left: 30px;\">5) Library distributed to other developers should <span style=\"text-decoration: underline;\">not</span> be modifiable. In case there is some problem, issue should be reported to developer involved to let them fix. Letting other developers directly access the source code might cause them accidentally doing a quick fix by themselves&nbsp;which will cause&nbsp;a big problem afterwards.</p>
<p>And that's the reason why we shouldn't ever distribute the library as source code. <span style=\"color: #2980b9;\"><strong>The better way is to distribute the built-version of library instead which is&nbsp;<span style=\"text-decoration: underline;\">.jar</span> or <span style=\"text-decoration: underline;\">.aar</span>&nbsp;file in this case.</strong></span></p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/flow01.png\" alt=\"\" width=\"960\" /></p>
<p>Although it looks better but it's not perfect yet. Most of the&nbsp;problem listed above are solved except one:<span style=\"color: #e74c3c;\"><strong>&nbsp;it's still hard to update and roll back over the&nbsp;version</strong></span>. We still need to download, copy, replace, backup, blah blah blah. Developer's time is valueable and shouldn't be wasted from these things.</p>
<p>Is&nbsp;it better if we could just add a line of code in <code>build.gradle</code>'s dependencies area just like we do to&nbsp;include the 3rd party library, for example,</p>
<pre class=\"brush:groovy;auto-links:false;toolbar:false\" contenteditable=\"false\">compile 'my.company:library:1.1.0'</pre>
<p>If you have any problem with the new version of library, you could just simply change the version number back to the worked one in a second.</p>
<pre class=\"brush:groovy;auto-links:false;toolbar:false\" contenteditable=\"false\">compile 'my.company:library:1.0.0'</pre>
<p>I found this as the perfect choice in every single dimension. It's easy to distribute the library, if you want to use, just add a line of code and done!&nbsp;It's also very&nbsp;easy to update and roll back to whichever version you want. And the source code is also unmodifiable.</p>
<p>So I encourage every company to have a Maven Repository to use internally for this. And since we use it internally then these libraries should be kept private, so Public Repository is not a choice. We must go for a <strong>Private Maven Repository</strong> with full access control system so that there will be nobody except team members gain an&nbsp;access to the library.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/flow02.png\" alt=\"\" width=\"960\" /></p>
<p>To achieve that, we have two choices:</p>
<p style=\"padding-left: 30px;\">1) <strong>To use private repository hosted service</strong>&nbsp;- There are quite a lot service like this out there.&nbsp;The most popular one are&nbsp;<a href=\"https://www.jfrog.com/bintray/bintray-private-repo/\" target=\"_blank\">Bintray&nbsp;Premium</a>&nbsp;and&nbsp;<a href=\"https://jitpack.io/private\" target=\"_blank\">JitPack Private Repositories</a>. Anyway it's quite pricey (at least for&nbsp;me). Moreover you will be charged more&nbsp;by the number of library artifact&nbsp;you need to host there. For me, it's not a good choice for the long term usage which amount of library artifact may increase to&nbsp;10 within a year.</p>
<p style=\"padding-left: 30px;\">2) <strong>Setup your own dedicated server</strong>&nbsp;- There are so many choices of Open Source software providing you the&nbsp;perfect solution, for example, Artifactory and&nbsp;Nexus. You could put as many&nbsp;library artifacts as you want. Only bill you have to pay is the hosting fee which is not a big concern anymore&nbsp;these days. With DigitalOcean, you can pay just $10/month. That's all. Sounds cool, right?</p>
<p>Alright, I will give you an instruction how to set up our own Private Maven Repository as a dedicated server. The open source software I choose is <strong>Artifactory</strong>&nbsp;since it is incredibly&nbsp;easy to install despite its countless&nbsp;promising features and its stability.</p>
<h2 class=\"section-heading\">Artifactory Installation</h2>
<p>I know that you all must have your own favorite operating system in mind but to make it easy, let me control the hosting environment a little bit. In this blog entry,&nbsp;I will guide you how to setup Artifactory on<strong> Ubuntu 14.04 LTS</strong> on DigitalOcean. If you don't want to pay any buck, VM on VirtualBox might be a choice for you as well. Choose one, it's your choice.</p>
<h2 class=\"subsection-heading\">Create&nbsp;Ubuntu 14.04 LTS&nbsp;droplet</h2>
<p>Initially,&nbsp;let's create an droplet&nbsp;on DigitalOcean&nbsp;with these specifications:</p>
<p style=\"padding-left: 30px;\"><strong>OS:</strong> Ubuntu 14.04 LTS</p>
<p style=\"padding-left: 30px;\"><strong>Size:</strong>&nbsp;$10/month</p>
<p style=\"padding-left: 30px;\"><strong>Region:</strong>&nbsp;Any region but I recommend you to choose the server closed to you most.&nbsp;</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/createdroplet.png\" alt=\"\" width=\"699\" /></p>
<p>After droplet is created, please <strong>ssh</strong>&nbsp;into the created server&nbsp;with <code>root</code> user and password sent to your email.</p>
<h2 class=\"subsection-heading\">Install&nbsp;Java 8</h2>
<p>Java 8 doesn't come with Ubuntu 14.04 LTS' default repository. We need to install it through PPA repository. You can do so with these command lines:</p>
<pre class=\"brush:bash;auto-links:false;toolbar:false\" contenteditable=\"false\"># add-apt-repository ppa:webupd8team/java
# apt-get update
# apt-get install oracle-java8-installer</pre>
<p>You could verify the installation by typing this command.</p>
<pre class=\"brush:bash;auto-links:false;toolbar:false\" contenteditable=\"false\"># java -version
java version \"1.8.0_72\"
Java(TM) SE Runtime Environment (build 1.8.0_72-b15)
Java HotSpot(TM) 64-Bit Server VM (build 25.72-b15, mixed mode)</pre>
<p>Done.</p>
<h2 class=\"subsection-heading\">Install Artifactory</h2>
<p>Installation is easy. First, you need to&nbsp;download the&nbsp;debian package&nbsp;of Artifactory&nbsp;from bintray:</p>
<pre class=\"brush:bash;auto-links:false;toolbar:false\" contenteditable=\"false\">$ wget https://bintray.com/artifact/download/jfrog/artifactory-debs/pool/main/j/jfrog-artifactory-oss-deb/jfrog-artifactory-oss-4.5.1.deb</pre>
<p>Version used in this tutorial is 4.5.1 since it is the latest version at the moment I write this blog entry. Feel free to use any other version you prefer. A&nbsp;list of Artifactory version number is available&nbsp;in&nbsp;<a href=\"https://bintray.com/jfrog/artifactory-debs/jfrog-artifactory-oss-deb/view\" target=\"_blank\">Bintray</a>&nbsp;site.</p>
<p>Now it's time to install it with these 4 line of codes. And of course, if you use another version besides 4.5.1, don't forget to change the number of deb package to what you are using.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">$ gpg --keyserver pgpkeys.mit.edu --recv-key 6B219DCCD7639232
$ gpg -a --export 6B219DCCD7639232 | sudo apt-key add -
$ apt-get update
$ dpkg -i jfrog-artifactory-oss-4.5.1.deb</pre>
<p>Installation will be done in&nbsp;a minute. You could start the service immediately with this command.</p>
<pre class=\"brush:as3;auto-links:false;toolbar:false\" contenteditable=\"false\"># service artifactory start</pre>
<p>Tomcat is already embedded in&nbsp;Artifactory package so you have no need to install anything else. It&nbsp;is now ready to use as a standalone.</p>
<h2 class=\"section-heading\">Configure Artifactory</h2>
<p>Open your preferred browser and browse to this url:&nbsp;<code><a href=\"http://IPADDRESS:8081/artifactory/\">http://IPADDRESS:8081/artifactory/</a></code>&nbsp;(replace IPADDRESS with your server's IP Address). You will see the login screen like this:</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/login.png\" alt=\"\" width=\"960\" /></p>
<p>Login with <strong>Username:</strong> &nbsp;<code>admin</code>&nbsp;and <strong>Password:</strong>&nbsp;<code>password</code>&nbsp;</p>
<p>The first thing I suggest you to do immediately after logged in is <span style=\"text-decoration: underline;\">to change your admin password to prevent furthur security issue</span>. To&nbsp;do so, browse to&nbsp;<span style=\"color: #2980b9;\"><strong>Admin -&gt; Security -&gt; Users -&gt; admin&nbsp;</strong></span>change the password to what your want.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/changepassword.png\" alt=\"\" width=\"960\" /></p>
<p>Anyway we shouldn't work with the library as admin. So we will leave the account like this and create a new one&nbsp;instead.&nbsp;Here is how to do it step-by-step.</p>
<h2 class=\"subsection-heading\">Create a&nbsp;Group</h2>
<p>Browse into&nbsp;<span style=\"color: #2980b9;\"><strong>Admin -&gt; Security -&gt; Groups</strong></span>&nbsp;and click at&nbsp;<strong>+New</strong>&nbsp;at the upper right.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/group01.jpg\" alt=\"\" width=\"960\" /></p>
<p>We are going to&nbsp;create a group of user who gain a capability to upload and download any library to/from the system. So I will name the group as <strong>\"contributors\"</strong> with description <strong>\"A group for library contributors\"</strong>.&nbsp;For the Users pane, leave it untouch.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/group02.jpg\" alt=\"\" width=\"960\" /></p>
<p>Click&nbsp;<strong>Save</strong>&nbsp;to create&nbsp;the group.</p>
<h2 class=\"subsection-heading\">Create a&nbsp;Permission</h2>
<p>Next step is to assign permissions for user in contributors group. Browse into&nbsp;<span style=\"color: #2980b9;\"><strong>Admin -&gt; Security -&gt; Permissions</strong></span>&nbsp;and click&nbsp;<strong>+New</strong>&nbsp;at the upper right.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/permission01.jpg\" alt=\"\" width=\"960\" /></p>
<p>Name the&nbsp;Permission as&nbsp;<strong>Contribute to Anything</strong>&nbsp;and check both&nbsp;<strong>Any Local Repository</strong>&nbsp;and&nbsp;<strong>Any Remote Repository</strong>&nbsp;box to gain an access to any repository in the system to the <em>contributors</em>.&nbsp;Click&nbsp;<strong>Next.</strong></p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/permission03.jpg\" alt=\"\" width=\"960\" /></p>
<p>In&nbsp;Groups tab, add&nbsp;<strong>contributors</strong>&nbsp;to the right area and <strong>assign the permission</strong>&nbsp;like below. Click&nbsp;<strong>Save &amp; Finish.</strong></p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/permission04.jpg\" alt=\"\" width=\"960\" /></p>
<p>Permissions are now&nbsp;assigned to the contributors group.</p>
<h2 class=\"subsection-heading\">Create a new&nbsp;User Account</h2>
<p>The last step is to create a new user account with contributors permission assigned. Click at&nbsp;<strong>+New</strong>&nbsp;at the upper right of&nbsp;<span style=\"color: #2980b9;\"><strong>Admin -&gt; Security -&gt; Users</strong></span> page<span style=\"color: #2980b9;\"><strong>.</strong></span></p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/user01.jpg\" alt=\"\" width=\"960\" /></p>
<p>Enter<strong>&nbsp;Username</strong>, <strong>Password</strong>&nbsp;and&nbsp;<strong>Email Address</strong>. In&nbsp;<strong>Related Groups</strong>&nbsp;area, please add <em>only</em>&nbsp;<strong>contributors</strong>&nbsp;group to the right pane.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/user03.jpg\" alt=\"\" width=\"960\" /></p>
<p>Click&nbsp;Save and ... done ! We now got an account with the proper permission.</p>
<p>If you want to create more user account after this with the same access, you could do it by creating a new user and add it to the contributors group.</p>
<p>But if you want to create a user account with a read-only access. <strong>readers</strong>&nbsp;is the group you need to assign to that account in&nbsp;this case.</p>
<h2 class=\"subsection-heading\">Get an Encrypted Password</h2>
<p>In the next step, password is need to be used in gradle script and it's not good to use the clear text version of password. Fortunately Artifactory provides a way to use an encrypted password instead and to acquire this piece of information, you need to <span style=\"color: #d35400;\"><strong>logout from admin and login with the account created in previous step</strong></span>.</p>
<p>Once logged in, click on your username at the upper right of the page.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/encryptedpassword_01.png\" alt=\"\" width=\"960\" /></p>
<p>Enter your password and click <strong>Unlock.</strong></p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/encryptedpassword_02.png\" alt=\"\" width=\"960\" /></p>
<p>Some data will be revealed.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/encryptedpassword_03.png\" alt=\"\" width=\"960\" /></p>
<p>Copy text inside&nbsp;<strong>Encrypted Password</strong>&nbsp;box and keep it somewhere. We&nbsp;will use it in the near future.</p>
<h2 class=\"section-heading subsection-heading\">Switch&nbsp;Artifactory to&nbsp;Private mode</h2>
<p>In default settings, the repositories hosted in Artifactory are publicly&nbsp;accessible. We need to switch to Private mode and let&nbsp;only allowed user(s) to access the repository.</p>
<p>To turn on Private Mode, just simply uncheck <strong>Allow Anonymous Access</strong> in&nbsp;<span style=\"color: #2980b9;\"><strong>Admin -&gt; Security -&gt; General</strong></span>&nbsp;page.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/private.jpg\" alt=\"\" width=\"960\" /></p>
<p>Server is now configured and ready to use !</p>
<h2 class=\"section-heading\">How to upload Android library to Artifactory from&nbsp;Android Studio</h2>
<p>Now it's time to start working on&nbsp;Android Studio. To upload a library to Artifactory, we need to modify some&nbsp;gradle script. First step is to define <strong>username</strong> and <strong>encrypted&nbsp;password</strong> for the account on Artifactory set up in previous step. Since these information&nbsp;will be&nbsp;visible in the gradle script so we better put them in the file that will not be uploaded to version control. Let's put&nbsp;them into&nbsp; <code>HOME_DIR/.gradle/gradle.properties</code></p>
<p>For those who are not familiar with this file. It is a global gradle script used&nbsp;in every single gradle project's compilation step. So if we declare anything in this file, those datas will be accessible&nbsp;in Android project's gradle script as well.</p>
<p>I believe that you, developers, must know already that what the&nbsp;<strong>HOME_DIR</strong>&nbsp;is for each operating system. For&nbsp;<strong>Mac OS X</strong>&nbsp;and&nbsp;<strong>Linux</strong>, it is&nbsp;<code>~</code>&nbsp;while in&nbsp;<strong>Windows</strong>, it is&nbsp;<code>C:\\Users\\USERNAME</code>&nbsp;for&nbsp;the general case. Try to browse into that folder, you will see <code>.gradle</code> directory there. If there is not, you go to the wrong directory.</p>
<p>Create a&nbsp;<code>gradle.properties</code>&nbsp;file inside&nbsp;<code>HOME_DIR/.gradle/</code>&nbsp;directory if it doesn't exist or modify it if it does.&nbsp;Adding two lines of script like below and replace&nbsp;<strong>YOUR_USERNAME</strong> à¹à¸¥à¸° <strong>YOUR_ENCRYPTED_PASSWORD</strong>&nbsp;with your <span style=\"text-decoration: underline;\">username</span> and <span style=\"text-decoration: underline;\">encrypted password</span>&nbsp;obtaind in previous step.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\"># HOME_DIR/.gradle/gradle.properties
artifactory_username=YOUR_USERNAME
artifactory_password=YOUR_ENCRYPTED_PASSWORD</pre>
<p>Now open&nbsp;<code>build.gradle</code>&nbsp;file placed at the top level in your Android project. Add a line of <code>classpath</code> code like below.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">buildscript {
dependencies {
// Add this line
classpath \"org.jfrog.buildinfo:build-info-extractor-gradle:4.0.1\"
}
}</pre>
<p>Open <code>build.gradle</code>&nbsp;<span style=\"text-decoration: underline;\">placed&nbsp;inside your&nbsp;Library Module&nbsp;that you need to upload to Artifactory</span>. Insert two lines of code shown below at the very first line of the file.</p>
<pre class=\"brush:groovy;auto-links:false;toolbar:false\" contenteditable=\"false\">apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'</pre>
<p>And add these lines <span style=\"text-decoration: underline;\">at the end</span> of the same working file.</p>
<pre class=\"brush:groovy;auto-links:false;toolbar:false\" contenteditable=\"false\">def libraryGroupId = 'my.group.package'
def libraryArtifactId = 'thelibrary'
def libraryVersion = '1.0.0'</pre>
<p>Code shown above will result the form of dependency as&nbsp;<code>compile 'my.group.package:thelibrary:1.0.0'</code>&nbsp;when it's available on&nbsp;repository. <span style=\"color: #2980b9;\"><strong>Please feel free to change&nbsp;<span style=\"text-decoration: underline;\">libraryGroupId</span>, <span style=\"text-decoration: underline;\">libraryArtifactId</span>&nbsp;and&nbsp;<span style=\"text-decoration: underline;\">libraryVersion</span>&nbsp;to anything you want.</strong></span></p>
<p>In the same working file, add&nbsp;these lines <span style=\"text-decoration: underline;\">at the end</span> of file.</p>
<pre class=\"brush:groovy;auto-links:false;toolbar:false\" contenteditable=\"false\">publishing {
publications {
aar(MavenPublication) {
groupId libraryGroupId
version libraryVersion
artifactId libraryArtifactId
artifact(\"$buildDir/outputs/aar/${artifactId}-release.aar\")
}
}
}
artifactory {
contextUrl = 'http://IPADDRESS:8081/artifactory'
publish {
repository {
repoKey = 'libs-release-local'
username = artifactory_username
password = artifactory_password
}
defaults {
publications('aar')
publishArtifacts = true
properties = ['qa.level': 'basic', 'q.os': 'android', 'dev.team': 'core']
publishPom = true
}
}
}
</pre>
<p>And don't forget to change <strong>IPADDRESS</strong> to your server's IP address.</p>
<p>Well done. Now scripts are&nbsp;ready !</p>
<h2 class=\"subsection-heading\">Upload the library</h2>
<p>It is incredibly easy to upload the library. Just open <strong>Terminal</strong> inside Android Studio.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/term01.png\" alt=\"\" width=\"951\" /></p>
<p>And type to following command.</p>
<p><span style=\"color: #e67e22;\"><strong>Windows:</strong></span></p>
<pre class=\"brush:bash;auto-links:false;toolbar:false\" contenteditable=\"false\">gradlew.bat assembleRelease artifactoryPublish</pre>
<p><span style=\"color: #e67e22;\"><strong>Mac OS X &amp; Linux:</strong></span></p>
<pre class=\"brush:bash;auto-links:false;toolbar:false\" contenteditable=\"false\">./gradlew assembleRelease artifactoryPublish</pre>
<p>Let it does its job and wait until&nbsp;<span style=\"color: #2980b9;\"><strong>BUILD SUCCESSFUL</strong></span>&nbsp;is shown on the screen.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/term02.png\" alt=\"\" width=\"951\" /></p>
<p>At this step, your library is now successfully uploaded to your private Maven Repository. Congrats !</p>
<h2 class=\"subsection-heading\">Verify the upload binary</h2>
<p>Browse into&nbsp;your Artifactory control panel&nbsp;<code><a href=\"http://IPADDRESS:8081/artifactory\">http://IPADDRESS:8081/artifactory</a></code>&nbsp;and click at&nbsp;<span style=\"color: #2980b9;\"><strong>Artifacts -&gt; libs-release-local</strong></span>. You will see the library uploaded shown inside there&nbsp;with some metadata like deployer's&nbsp;username.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/verify_1.png\" alt=\"\" width=\"960\" /></p>
<p>The repository can be accessed through browser at&nbsp;<code>http://IPADDRESS:8081/artifactory/libs-release-local/</code>. Please feel free to give a check.</p>
<h2 class=\"section-heading\">Library Usage</h2>
<p>Library artifact is now ready to be used. To use it in your project, you need to declare the&nbsp;maven url that points&nbsp;to your repository's address along with the credentials inside <span style=\"text-decoration: underline;\">project level</span>&nbsp;<code>build.gradle</code>.</p>
<p>Add&nbsp;<strong>maven { ... }</strong> part of code like below: (And sure, don't forget to change IPADDRESS to your server's IP address)</p>
<pre class=\"brush:groovy;auto-links:false;toolbar:false\" contenteditable=\"false\">allprojects {
repositories {
jcenter()
// Add these lines
maven {
url \"http://IPADDRESS:8081/artifactory/libs-release-local\"
credentials {
username = \"${artifactory_username}\"
password = \"${artifactory_password}\"
}
}
}
}</pre>
<p>Open&nbsp;<code>build.gradle</code>&nbsp;inside module that you want to use the library and simply add a dependency with the very familiar form.</p>
<pre class=\"brush:groovy;auto-links:false;toolbar:false\" contenteditable=\"false\">dependencies {
compile ''my.group.package:thelibrary:1.0.0\"
}</pre>
<p>Now it's all done. You can now:</p>
<p style=\"padding-left: 30px;\">- Setup your own Maven Repository (either&nbsp;private or&nbsp;public one)</p>
<p style=\"padding-left: 30px;\">- Upload a library to repository with full user access control.</p>
<p style=\"padding-left: 30px;\">- Download a library from repository with full user access control.</p>
<p>Library distribution is now far more systematic than any other distribution method&nbsp;and it now doesn't matter how many libraries or how many version of libraries you have. Things are now well organized. =)</p>
<p>Hope that&nbsp;you will find this blog useful&nbsp;!</p>
<p>Ah ... as a gift. If this blog&nbsp;has your interest, this <a href=\"../../../blog/how-to-upload-library-to-jcenter-maven-central-as-dependency/en\" target=\"_blank\">\"How to distribute your own Android library through jCenter and Maven Central from Android Studio\"</a> might has too. If you want to upload your own library to the public standard Maven Repository like jcenter or Maven Central, that blog will show you how. And again, hope you find it useful =)</p>
<p>Cheers.</p>" "http://inthecheesefactory.com/blog/how-to-setup-private-maven-repository/en" (22216 31424) old 7 nil nil ((title nil "
				How to setup a Private Maven Repository for in-house Android libraries distribution			") (description nil "
				<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/verify_1.png\" /></p> 
<p>Yesterday I got a question: <span style=\"color: #2980b9;\"><strong>\"In the end, there will be ton of library modules placed&nbsp;inside the android project. What is the best and sustainable way to organize these libraries for both current and future uses?\".</strong></span></p>
<p>Well, I think the question&nbsp;was quite great and I believe that many of you might have the same doubtfulness&nbsp;in mind so I decide to write this blog giving you an instruction how to <span style=\"color: #27ae60;\"><strong>\"setup your own Private Maven Repository\"</strong></span> for the internal use.</p>
<p>Let's get started.</p>
<h2 class=\"section-heading\">Why should we setup a&nbsp;Private&nbsp;Maven Repository?</h2>
<p>It's true that an Android Library module is actually just a bunch of source codes grouped in the same directory. If you want to let other developers&nbsp;use your library, you could simply send them&nbsp;the whole directory and let them include it in&nbsp;their project.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/libmodule.png\" alt=\"\" width=\"1281\" /></p>
<p>Sounds easy but it doesn't mean it is good.&nbsp;The question is&nbsp;<span style=\"color: #2980b9;\"><strong>\"If company starts to grow and amount&nbsp;of project starts to increase continously. Is it good if we still pass the library as source code like this?\"</strong></span></p>
<p>The answer is a very big <strong><span style=\"color: #e74c3c;\">NO</span>.</strong> Don't do that ! Here are some big reasons you need to concern:</p>
<p style=\"padding-left: 30px;\">1) Let's imagine. If you have about 10 projects sharing the same library module. At the final, you will find copies of source code scattering around in those&nbsp;projects which is totally not good for code controlling.</p>
<p style=\"padding-left: 30px;\">2) It's quite not convenient&nbsp;to update library to the newer version. Here is the process:&nbsp;download the source code, copy it, replace the old one with the new one, check if there is something wrong, etc... And you have to do every single step <em>manually</em>.</p>
<p style=\"padding-left: 30px;\">3) And if your day is bad enough, the updated version of library may cause your has-ever-worked-great-before application&nbsp;into the&nbsp;junky state. In that case, you need to roll the library back to the previous version. Wahhhh, that means we need to keep every single version of source code as a backup in case we might meet the jackpot someday.</p>
<p style=\"padding-left: 30px;\">4) In term of usage, we need to distribute the library to let other developers <strong>\"use\"</strong> it. So there is no need to let them see the source code. Just a legible document how to use the library is more than enough.</p>
<p style=\"padding-left: 30px;\">5) Library distributed to other developers should <span style=\"text-decoration: underline;\">not</span> be modifiable. In case there is some problem, issue should be reported to developer involved to let them fix. Letting other developers directly access the source code might cause them accidentally doing a quick fix by themselves&nbsp;which will cause&nbsp;a big problem afterwards.</p>
<p>And that's the reason why we shouldn't ever distribute the library as source code. <span style=\"color: #2980b9;\"><strong>The better way is to distribute the built-version of library instead which is&nbsp;<span style=\"text-decoration: underline;\">.jar</span> or <span style=\"text-decoration: underline;\">.aar</span>&nbsp;file in this case.</strong></span></p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/flow01.png\" alt=\"\" width=\"960\" /></p>
<p>Although it looks better but it's not perfect yet. Most of the&nbsp;problem listed above are solved except one:<span style=\"color: #e74c3c;\"><strong>&nbsp;it's still hard to update and roll back over the&nbsp;version</strong></span>. We still need to download, copy, replace, backup, blah blah blah. Developer's time is valueable and shouldn't be wasted from these things.</p>
<p>Is&nbsp;it better if we could just add a line of code in <code>build.gradle</code>'s dependencies area just like we do to&nbsp;include the 3rd party library, for example,</p>
<pre class=\"brush:groovy;auto-links:false;toolbar:false\" contenteditable=\"false\">compile 'my.company:library:1.1.0'</pre>
<p>If you have any problem with the new version of library, you could just simply change the version number back to the worked one in a second.</p>
<pre class=\"brush:groovy;auto-links:false;toolbar:false\" contenteditable=\"false\">compile 'my.company:library:1.0.0'</pre>
<p>I found this as the perfect choice in every single dimension. It's easy to distribute the library, if you want to use, just add a line of code and done!&nbsp;It's also very&nbsp;easy to update and roll back to whichever version you want. And the source code is also unmodifiable.</p>
<p>So I encourage every company to have a Maven Repository to use internally for this. And since we use it internally then these libraries should be kept private, so Public Repository is not a choice. We must go for a <strong>Private Maven Repository</strong> with full access control system so that there will be nobody except team members gain an&nbsp;access to the library.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/flow02.png\" alt=\"\" width=\"960\" /></p>
<p>To achieve that, we have two choices:</p>
<p style=\"padding-left: 30px;\">1) <strong>To use private repository hosted service</strong>&nbsp;- There are quite a lot service like this out there.&nbsp;The most popular one are&nbsp;<a href=\"https://www.jfrog.com/bintray/bintray-private-repo/\" target=\"_blank\">Bintray&nbsp;Premium</a>&nbsp;and&nbsp;<a href=\"https://jitpack.io/private\" target=\"_blank\">JitPack Private Repositories</a>. Anyway it's quite pricey (at least for&nbsp;me). Moreover you will be charged more&nbsp;by the number of library artifact&nbsp;you need to host there. For me, it's not a good choice for the long term usage which amount of library artifact may increase to&nbsp;10 within a year.</p>
<p style=\"padding-left: 30px;\">2) <strong>Setup your own dedicated server</strong>&nbsp;- There are so many choices of Open Source software providing you the&nbsp;perfect solution, for example, Artifactory and&nbsp;Nexus. You could put as many&nbsp;library artifacts as you want. Only bill you have to pay is the hosting fee which is not a big concern anymore&nbsp;these days. With DigitalOcean, you can pay just $10/month. That's all. Sounds cool, right?</p>
<p>Alright, I will give you an instruction how to set up our own Private Maven Repository as a dedicated server. The open source software I choose is <strong>Artifactory</strong>&nbsp;since it is incredibly&nbsp;easy to install despite its countless&nbsp;promising features and its stability.</p>
<h2 class=\"section-heading\">Artifactory Installation</h2>
<p>I know that you all must have your own favorite operating system in mind but to make it easy, let me control the hosting environment a little bit. In this blog entry,&nbsp;I will guide you how to setup Artifactory on<strong> Ubuntu 14.04 LTS</strong> on DigitalOcean. If you don't want to pay any buck, VM on VirtualBox might be a choice for you as well. Choose one, it's your choice.</p>
<h2 class=\"subsection-heading\">Create&nbsp;Ubuntu 14.04 LTS&nbsp;droplet</h2>
<p>Initially,&nbsp;let's create an droplet&nbsp;on DigitalOcean&nbsp;with these specifications:</p>
<p style=\"padding-left: 30px;\"><strong>OS:</strong> Ubuntu 14.04 LTS</p>
<p style=\"padding-left: 30px;\"><strong>Size:</strong>&nbsp;$10/month</p>
<p style=\"padding-left: 30px;\"><strong>Region:</strong>&nbsp;Any region but I recommend you to choose the server closed to you most.&nbsp;</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/createdroplet.png\" alt=\"\" width=\"699\" /></p>
<p>After droplet is created, please <strong>ssh</strong>&nbsp;into the created server&nbsp;with <code>root</code> user and password sent to your email.</p>
<h2 class=\"subsection-heading\">Install&nbsp;Java 8</h2>
<p>Java 8 doesn't come with Ubuntu 14.04 LTS' default repository. We need to install it through PPA repository. You can do so with these command lines:</p>
<pre class=\"brush:bash;auto-links:false;toolbar:false\" contenteditable=\"false\"># add-apt-repository ppa:webupd8team/java
# apt-get update
# apt-get install oracle-java8-installer</pre>
<p>You could verify the installation by typing this command.</p>
<pre class=\"brush:bash;auto-links:false;toolbar:false\" contenteditable=\"false\"># java -version
java version \"1.8.0_72\"
Java(TM) SE Runtime Environment (build 1.8.0_72-b15)
Java HotSpot(TM) 64-Bit Server VM (build 25.72-b15, mixed mode)</pre>
<p>Done.</p>
<h2 class=\"subsection-heading\">Install Artifactory</h2>
<p>Installation is easy. First, you need to&nbsp;download the&nbsp;debian package&nbsp;of Artifactory&nbsp;from bintray:</p>
<pre class=\"brush:bash;auto-links:false;toolbar:false\" contenteditable=\"false\">$ wget https://bintray.com/artifact/download/jfrog/artifactory-debs/pool/main/j/jfrog-artifactory-oss-deb/jfrog-artifactory-oss-4.5.1.deb</pre>
<p>Version used in this tutorial is 4.5.1 since it is the latest version at the moment I write this blog entry. Feel free to use any other version you prefer. A&nbsp;list of Artifactory version number is available&nbsp;in&nbsp;<a href=\"https://bintray.com/jfrog/artifactory-debs/jfrog-artifactory-oss-deb/view\" target=\"_blank\">Bintray</a>&nbsp;site.</p>
<p>Now it's time to install it with these 4 line of codes. And of course, if you use another version besides 4.5.1, don't forget to change the number of deb package to what you are using.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">$ gpg --keyserver pgpkeys.mit.edu --recv-key 6B219DCCD7639232 
$ gpg -a --export 6B219DCCD7639232 | sudo apt-key add -
$ apt-get update
$ dpkg -i jfrog-artifactory-oss-4.5.1.deb</pre>
<p>Installation will be done in&nbsp;a minute. You could start the service immediately with this command.</p>
<pre class=\"brush:as3;auto-links:false;toolbar:false\" contenteditable=\"false\"># service artifactory start</pre>
<p>Tomcat is already embedded in&nbsp;Artifactory package so you have no need to install anything else. It&nbsp;is now ready to use as a standalone.</p>
<h2 class=\"section-heading\">Configure Artifactory</h2>
<p>Open your preferred browser and browse to this url:&nbsp;<code><a href=\"http://IPADDRESS:8081/artifactory/\">http://IPADDRESS:8081/artifactory/</a></code>&nbsp;(replace IPADDRESS with your server's IP Address). You will see the login screen like this:</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/login.png\" alt=\"\" width=\"960\" /></p>
<p>Login with <strong>Username:</strong> &nbsp;<code>admin</code>&nbsp;and <strong>Password:</strong>&nbsp;<code>password</code>&nbsp;</p>
<p>The first thing I suggest you to do immediately after logged in is <span style=\"text-decoration: underline;\">to change your admin password to prevent furthur security issue</span>. To&nbsp;do so, browse to&nbsp;<span style=\"color: #2980b9;\"><strong>Admin -&gt; Security -&gt; Users -&gt; admin&nbsp;</strong></span>change the password to what your want.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/changepassword.png\" alt=\"\" width=\"960\" /></p>
<p>Anyway we shouldn't work with the library as admin. So we will leave the account like this and create a new one&nbsp;instead.&nbsp;Here is how to do it step-by-step.</p>
<h2 class=\"subsection-heading\">Create a&nbsp;Group</h2>
<p>Browse into&nbsp;<span style=\"color: #2980b9;\"><strong>Admin -&gt; Security -&gt; Groups</strong></span>&nbsp;and click at&nbsp;<strong>+New</strong>&nbsp;at the upper right.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/group01.jpg\" alt=\"\" width=\"960\" /></p>
<p>We are going to&nbsp;create a group of user who gain a capability to upload and download any library to/from the system. So I will name the group as <strong>\"contributors\"</strong> with description <strong>\"A group for library contributors\"</strong>.&nbsp;For the Users pane, leave it untouch.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/group02.jpg\" alt=\"\" width=\"960\" /></p>
<p>Click&nbsp;<strong>Save</strong>&nbsp;to create&nbsp;the group.</p>
<h2 class=\"subsection-heading\">Create a&nbsp;Permission</h2>
<p>Next step is to assign permissions for user in contributors group. Browse into&nbsp;<span style=\"color: #2980b9;\"><strong>Admin -&gt; Security -&gt; Permissions</strong></span>&nbsp;and click&nbsp;<strong>+New</strong>&nbsp;at the upper right.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/permission01.jpg\" alt=\"\" width=\"960\" /></p>
<p>Name the&nbsp;Permission as&nbsp;<strong>Contribute to Anything</strong>&nbsp;and check both&nbsp;<strong>Any Local Repository</strong>&nbsp;and&nbsp;<strong>Any Remote Repository</strong>&nbsp;box to gain an access to any repository in the system to the <em>contributors</em>.&nbsp;Click&nbsp;<strong>Next.</strong></p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/permission03.jpg\" alt=\"\" width=\"960\" /></p>
<p>In&nbsp;Groups tab, add&nbsp;<strong>contributors</strong>&nbsp;to the right area and <strong>assign the permission</strong>&nbsp;like below. Click&nbsp;<strong>Save &amp; Finish.</strong></p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/permission04.jpg\" alt=\"\" width=\"960\" /></p>
<p>Permissions are now&nbsp;assigned to the contributors group.</p>
<h2 class=\"subsection-heading\">Create a new&nbsp;User Account</h2>
<p>The last step is to create a new user account with contributors permission assigned. Click at&nbsp;<strong>+New</strong>&nbsp;at the upper right of&nbsp;<span style=\"color: #2980b9;\"><strong>Admin -&gt; Security -&gt; Users</strong></span> page<span style=\"color: #2980b9;\"><strong>.</strong></span></p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/user01.jpg\" alt=\"\" width=\"960\" /></p>
<p>Enter<strong>&nbsp;Username</strong>, <strong>Password</strong>&nbsp;and&nbsp;<strong>Email Address</strong>. In&nbsp;<strong>Related Groups</strong>&nbsp;area, please add <em>only</em>&nbsp;<strong>contributors</strong>&nbsp;group to the right pane.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/user03.jpg\" alt=\"\" width=\"960\" /></p>
<p>Click&nbsp;Save and ... done ! We now got an account with the proper permission.</p>
<p>If you want to create more user account after this with the same access, you could do it by creating a new user and add it to the contributors group.</p>
<p>But if you want to create a user account with a read-only access. <strong>readers</strong>&nbsp;is the group you need to assign to that account in&nbsp;this case.</p>
<h2 class=\"subsection-heading\">Get an Encrypted Password</h2>
<p>In the next step, password is need to be used in gradle script and it's not good to use the clear text version of password. Fortunately Artifactory provides a way to use an encrypted password instead and to acquire this piece of information, you need to <span style=\"color: #d35400;\"><strong>logout from admin and login with the account created in previous step</strong></span>.</p>
<p>Once logged in, click on your username at the upper right of the page.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/encryptedpassword_01.png\" alt=\"\" width=\"960\" /></p>
<p>Enter your password and click <strong>Unlock.</strong></p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/encryptedpassword_02.png\" alt=\"\" width=\"960\" /></p>
<p>Some data will be revealed.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/encryptedpassword_03.png\" alt=\"\" width=\"960\" /></p>
<p>Copy text inside&nbsp;<strong>Encrypted Password</strong>&nbsp;box and keep it somewhere. We&nbsp;will use it in the near future.</p>
<h2 class=\"section-heading subsection-heading\">Switch&nbsp;Artifactory to&nbsp;Private mode</h2>
<p>In default settings, the repositories hosted in Artifactory are publicly&nbsp;accessible. We need to switch to Private mode and let&nbsp;only allowed user(s) to access the repository.</p>
<p>To turn on Private Mode, just simply uncheck <strong>Allow Anonymous Access</strong> in&nbsp;<span style=\"color: #2980b9;\"><strong>Admin -&gt; Security -&gt; General</strong></span>&nbsp;page.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/private.jpg\" alt=\"\" width=\"960\" /></p>
<p>Server is now configured and ready to use !</p>
<h2 class=\"section-heading\">How to upload Android library to Artifactory from&nbsp;Android Studio</h2>
<p>Now it's time to start working on&nbsp;Android Studio. To upload a library to Artifactory, we need to modify some&nbsp;gradle script. First step is to define <strong>username</strong> and <strong>encrypted&nbsp;password</strong> for the account on Artifactory set up in previous step. Since these information&nbsp;will be&nbsp;visible in the gradle script so we better put them in the file that will not be uploaded to version control. Let's put&nbsp;them into&nbsp; <code>HOME_DIR/.gradle/gradle.properties</code></p>
<p>For those who are not familiar with this file. It is a global gradle script used&nbsp;in every single gradle project's compilation step. So if we declare anything in this file, those datas will be accessible&nbsp;in Android project's gradle script as well.</p>
<p>I believe that you, developers, must know already that what the&nbsp;<strong>HOME_DIR</strong>&nbsp;is for each operating system. For&nbsp;<strong>Mac OS X</strong>&nbsp;and&nbsp;<strong>Linux</strong>, it is&nbsp;<code>~</code>&nbsp;while in&nbsp;<strong>Windows</strong>, it is&nbsp;<code>C:\\Users\\USERNAME</code>&nbsp;for&nbsp;the general case. Try to browse into that folder, you will see <code>.gradle</code> directory there. If there is not, you go to the wrong directory.</p>
<p>Create a&nbsp;<code>gradle.properties</code>&nbsp;file inside&nbsp;<code>HOME_DIR/.gradle/</code>&nbsp;directory if it doesn't exist or modify it if it does.&nbsp;Adding two lines of script like below and replace&nbsp;<strong>YOUR_USERNAME</strong> à¹à¸¥à¸° <strong>YOUR_ENCRYPTED_PASSWORD</strong>&nbsp;with your <span style=\"text-decoration: underline;\">username</span> and <span style=\"text-decoration: underline;\">encrypted password</span>&nbsp;obtaind in previous step.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\"># HOME_DIR/.gradle/gradle.properties

artifactory_username=YOUR_USERNAME
artifactory_password=YOUR_ENCRYPTED_PASSWORD</pre>
<p>Now open&nbsp;<code>build.gradle</code>&nbsp;file placed at the top level in your Android project. Add a line of <code>classpath</code> code like below.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">buildscript {
    dependencies {
        // Add this line
        classpath \"org.jfrog.buildinfo:build-info-extractor-gradle:4.0.1\"
    }
}</pre>
<p>Open <code>build.gradle</code>&nbsp;<span style=\"text-decoration: underline;\">placed&nbsp;inside your&nbsp;Library Module&nbsp;that you need to upload to Artifactory</span>. Insert two lines of code shown below at the very first line of the file.</p>
<pre class=\"brush:groovy;auto-links:false;toolbar:false\" contenteditable=\"false\">apply plugin: 'com.jfrog.artifactory'
apply plugin: 'maven-publish'</pre>
<p>And add these lines <span style=\"text-decoration: underline;\">at the end</span> of the same working file.</p>
<pre class=\"brush:groovy;auto-links:false;toolbar:false\" contenteditable=\"false\">def libraryGroupId = 'my.group.package'
def libraryArtifactId = 'thelibrary'
def libraryVersion = '1.0.0'</pre>
<p>Code shown above will result the form of dependency as&nbsp;<code>compile 'my.group.package:thelibrary:1.0.0'</code>&nbsp;when it's available on&nbsp;repository. <span style=\"color: #2980b9;\"><strong>Please feel free to change&nbsp;<span style=\"text-decoration: underline;\">libraryGroupId</span>, <span style=\"text-decoration: underline;\">libraryArtifactId</span>&nbsp;and&nbsp;<span style=\"text-decoration: underline;\">libraryVersion</span>&nbsp;to anything you want.</strong></span></p>
<p>In the same working file, add&nbsp;these lines <span style=\"text-decoration: underline;\">at the end</span> of file.</p>
<pre class=\"brush:groovy;auto-links:false;toolbar:false\" contenteditable=\"false\">publishing {
    publications {
        aar(MavenPublication) {
            groupId libraryGroupId
            version libraryVersion
            artifactId libraryArtifactId

            artifact(\"$buildDir/outputs/aar/${artifactId}-release.aar\")
        }
    }
}

artifactory {
    contextUrl = 'http://IPADDRESS:8081/artifactory'
    publish {
        repository {
            repoKey = 'libs-release-local'

            username = artifactory_username
            password = artifactory_password
        }
        defaults {
            publications('aar')
            publishArtifacts = true

            properties = ['qa.level': 'basic', 'q.os': 'android', 'dev.team': 'core']
            publishPom = true
        }
    }
}
</pre>
<p>And don't forget to change <strong>IPADDRESS</strong> to your server's IP address.</p>
<p>Well done. Now scripts are&nbsp;ready !</p>
<h2 class=\"subsection-heading\">Upload the library</h2>
<p>It is incredibly easy to upload the library. Just open <strong>Terminal</strong> inside Android Studio.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/term01.png\" alt=\"\" width=\"951\" /></p>
<p>And type to following command.</p>
<p><span style=\"color: #e67e22;\"><strong>Windows:</strong></span></p>
<pre class=\"brush:bash;auto-links:false;toolbar:false\" contenteditable=\"false\">gradlew.bat assembleRelease artifactoryPublish</pre>
<p><span style=\"color: #e67e22;\"><strong>Mac OS X &amp; Linux:</strong></span></p>
<pre class=\"brush:bash;auto-links:false;toolbar:false\" contenteditable=\"false\">./gradlew assembleRelease artifactoryPublish</pre>
<p>Let it does its job and wait until&nbsp;<span style=\"color: #2980b9;\"><strong>BUILD SUCCESSFUL</strong></span>&nbsp;is shown on the screen.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/term02.png\" alt=\"\" width=\"951\" /></p>
<p>At this step, your library is now successfully uploaded to your private Maven Repository. Congrats !</p>
<h2 class=\"subsection-heading\">Verify the upload binary</h2>
<p>Browse into&nbsp;your Artifactory control panel&nbsp;<code><a href=\"http://IPADDRESS:8081/artifactory\">http://IPADDRESS:8081/artifactory</a></code>&nbsp;and click at&nbsp;<span style=\"color: #2980b9;\"><strong>Artifacts -&gt; libs-release-local</strong></span>. You will see the library uploaded shown inside there&nbsp;with some metadata like deployer's&nbsp;username.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/artifactory/verify_1.png\" alt=\"\" width=\"960\" /></p>
<p>The repository can be accessed through browser at&nbsp;<code>http://IPADDRESS:8081/artifactory/libs-release-local/</code>. Please feel free to give a check.</p>
<h2 class=\"section-heading\">Library Usage</h2>
<p>Library artifact is now ready to be used. To use it in your project, you need to declare the&nbsp;maven url that points&nbsp;to your repository's address along with the credentials inside <span style=\"text-decoration: underline;\">project level</span>&nbsp;<code>build.gradle</code>.</p>
<p>Add&nbsp;<strong>maven { ... }</strong> part of code like below: (And sure, don't forget to change IPADDRESS to your server's IP address)</p>
<pre class=\"brush:groovy;auto-links:false;toolbar:false\" contenteditable=\"false\">allprojects {
    repositories {
        jcenter()
        // Add these lines
        maven {
            url \"http://IPADDRESS:8081/artifactory/libs-release-local\"
            credentials {
                username = \"${artifactory_username}\"
                password = \"${artifactory_password}\"
            }
        }
    }
}</pre>
<p>Open&nbsp;<code>build.gradle</code>&nbsp;inside module that you want to use the library and simply add a dependency with the very familiar form.</p>
<pre class=\"brush:groovy;auto-links:false;toolbar:false\" contenteditable=\"false\">dependencies {
    compile ''my.group.package:thelibrary:1.0.0\"
}</pre>
<p>Now it's all done. You can now:</p>
<p style=\"padding-left: 30px;\">- Setup your own Maven Repository (either&nbsp;private or&nbsp;public one)</p>
<p style=\"padding-left: 30px;\">- Upload a library to repository with full user access control.</p>
<p style=\"padding-left: 30px;\">- Download a library from repository with full user access control.</p>
<p>Library distribution is now far more systematic than any other distribution method&nbsp;and it now doesn't matter how many libraries or how many version of libraries you have. Things are now well organized. =)</p>
<p>Hope that&nbsp;you will find this blog useful&nbsp;!</p>
<p>Ah ... as a gift. If this blog&nbsp;has your interest, this <a href=\"../../../blog/how-to-upload-library-to-jcenter-maven-central-as-dependency/en\" target=\"_blank\">\"How to distribute your own Android library through jCenter and Maven Central from Android Studio\"</a> might has too. If you want to upload your own library to the public standard Maven Repository like jcenter or Maven Central, that blog will show you how. And again, hope you find it useful =)</p>
<p>Cheers.</p>			") (link nil "http://inthecheesefactory.com/blog/how-to-setup-private-maven-repository/en") (pubDate nil "
				Sat, 20 Feb 2016 14:40:00 +0000			") (guid nil "http://inthecheesefactory.com/blog/how-to-setup-private-maven-repository/en"))) ("First Look at Android Emulator 2.0, the biggest and the best update yet in years" "<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/blog/androidemulator2/cover.jpg\" /></p>
<p>I believe that all Android developers would agree that the biggest thing announced in Android Dev Summit 2015 was Android Studio 2.0 and <strong>Android Emulator 2.0</strong> which was advertised that it could run and deploy the application incredibly much faster than the first revision.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/androidemulator2/fastapk.jpg\" alt=\"\" width=\"784\" height=\"441\" /></p>
<p>Few hours ago, Android development team just launched this latest emulator to the public. Let us give you a tour to this biggest update yet on Android Emulator you wouldn't wanna miss.</p>
<h2 class=\"section-heading\">Installation</h2>
<p>Let's start with the installation so we could play along with it together.</p>
<p>The first thing to be installed is <strong>Android Studio 2.0 Preview 3b</strong> which is now available on Canary Channel. To switch the update channel to Canary, just click at <strong>Help -&gt; Check for Update...</strong> and change the top-most dropdown menu to <strong>Canary Channel</strong>. After that, check for the update again and Android Studio 2.0 will be installed on your machine.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/androidemulator2/canary.png\" alt=\"\" width=\"439\" height=\"330\" /></p>
<p>Android Emulator 2.0 comes together with Android SDK Tools v25 and newer. So the next thing you have to install is&nbsp;<strong>Android SDK Tools v25 rc1</strong>&nbsp;which could be done through <em>SDK Manager</em>. Or if there is the newer version available while you are reading this blog, update to the latest one would be always the best scenario.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/androidemulator2/asdktools.png\" alt=\"\" width=\"648\" height=\"311\" /></p>
<p>And the reason behind its speed is the latest version of <strong>Intel x86 Emulator Accelerator (HAXM installer).&nbsp;</strong>Just download the latest version available from the Extras section.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/androidemulator2/haxminstaller.png\" alt=\"\" width=\"646\" height=\"288\" /></p>
<p>As mentioned in the name, what that SDK Manager downloads is just an <em>installer.</em>&nbsp;It doesn't install the HAXM for you yet. You need to manually install it yourself by browsing into <strong>Android SDK Folder</strong>&nbsp;and follow with&nbsp;<code>extras/intel/Hardware_Accelerated_Execution_Manager</code>.&nbsp;You will see an installer laying down inside. Just do what you have to do.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/androidemulator2/haxminstaller2.png\" alt=\"\" width=\"767\" height=\"248\" /></p>
<p>The latest one to download is&nbsp;<strong>Android 5.0 - Google APIs Intel x86 Atom System Image rev 10</strong>&nbsp;to use it as an Emulator's ROM image.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/androidemulator2/gapisrev10.png\" alt=\"\" width=\"641\" height=\"291\" /></p>
<p>All done ! It's now ready&nbsp;!</p>
<h2 class=\"section-heading\">Give it a try</h2>
<p>Let me skip the Android Virtual Device creating part since I believe that every single Android developer could do that yourself through AVD Manager available inside Android Studio 2.0</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/androidemulator2/avdmanager.png\" alt=\"\" width=\"784\" height=\"346\" /></p>
<p>Please note that there is a new experimental feature available in this part. You could assign the number of CPU's Core for the emulator unless it will be automatically set to the default value, 1.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/androidemulator2/cpucores.png\" alt=\"\" width=\"571\" height=\"230\" /></p>
<p>Now it's a good time to launch a created AVD.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/androidemulator2/em2.jpg\" alt=\"\" width=\"784\" height=\"469\" /></p>
<p>Woo hooooo, Android Emulator 2.0 ! The change is obvious. You could see the new toolbar on the right side of Emulator screen.</p>
<p>After an hour of playing around, <strong>I found that Emulator started and operated much faster than the&nbsp;previous version</strong>. Anyway, I must say that I&nbsp;<em>feel</em>&nbsp;that it is still a little bit slower than Genymotion. But well, it is acceptable and very satisfiable.</p>
<p>There are quite a ton of new features available. The most obvious one is you could now easily resize the window!</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/androidemulator2/shrink.jpg\" alt=\"\" width=\"784\" height=\"468\" /></p>
<p>For those extra features just like GPS simulation, Fingerprint, Phone Calling, SMS Sending and etc which we have to do through the command line in the previous version is now available in GUI&nbsp;version. 100x easier I must say!</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/androidemulator2/settings.png\" alt=\"\" width=\"784\" height=\"602\" /></p>
<p>These extended controls are one of the most impressive features for me in this new update since it is very convenient and totally complete. And well ... it's FREE.</p>
<p>Now let's test the speed of apk deployment. I found that it could be transferred at the incredible speed, <strong>50MB/s</strong>.</p>
<pre class=\"brush:bash;auto-links:false;toolbar:false\" contenteditable=\"false\">$ adb -s emulator-5554 install app-release.apk
pkg: /data/local/tmp/app-release.apk
Success
51410 KB/s (6160590 bytes in 0.117s)
</pre>
<p>It's 10x faster than the transfer speed to Samsung Galaxy Note 3 LTE which could make it at 5MB/s. At this speed, it could significantly increase the speed of development as well.</p>
<p>In conclusion, Android Emulator 2.0 is really&nbsp;satisfiable. <span style=\"text-decoration: underline;\">I would consider switching my primary emulator from Genymotion to Android Emulator 2.0 by now since the completeness on its feature&nbsp;and it is also FREE of charge!</span></p>
<p>However, some weakness still persist. <span style=\"color: #e74c3c;\"><strong>It consumes quite a lot of memory.</strong></span></p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/androidemulator2/memoryconsumption.png\" alt=\"\" width=\"646\" height=\"221\" /></p>
<p>But it still works quite fine on 8GB+ RAM machine.</p>
<p>Generally, I am so happy with this large update. Please give it a try and feel free to share your opinion over this new big thing!</p>
<p>Have a nice weekend =)</p>" "http://inthecheesefactory.com/blog/first-look-at-android-emulator-2.0/en" (22122 55668) old 8 nil nil ((title nil "
				First Look at Android Emulator 2.0, the biggest and the best update yet in years			") (description nil "
				<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/blog/androidemulator2/cover.jpg\" /></p> 
<p>I believe that all Android developers would agree that the biggest thing announced in Android Dev Summit 2015 was Android Studio 2.0 and <strong>Android Emulator 2.0</strong> which was advertised that it could run and deploy the application incredibly much faster than the first revision.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/androidemulator2/fastapk.jpg\" alt=\"\" width=\"784\" height=\"441\" /></p>
<p>Few hours ago, Android development team just launched this latest emulator to the public. Let us give you a tour to this biggest update yet on Android Emulator you wouldn't wanna miss.</p>
<h2 class=\"section-heading\">Installation</h2>
<p>Let's start with the installation so we could play along with it together.</p>
<p>The first thing to be installed is <strong>Android Studio 2.0 Preview 3b</strong> which is now available on Canary Channel. To switch the update channel to Canary, just click at <strong>Help -&gt; Check for Update...</strong> and change the top-most dropdown menu to <strong>Canary Channel</strong>. After that, check for the update again and Android Studio 2.0 will be installed on your machine.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/androidemulator2/canary.png\" alt=\"\" width=\"439\" height=\"330\" /></p>
<p>Android Emulator 2.0 comes together with Android SDK Tools v25 and newer. So the next thing you have to install is&nbsp;<strong>Android SDK Tools v25 rc1</strong>&nbsp;which could be done through <em>SDK Manager</em>. Or if there is the newer version available while you are reading this blog, update to the latest one would be always the best scenario.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/androidemulator2/asdktools.png\" alt=\"\" width=\"648\" height=\"311\" /></p>
<p>And the reason behind its speed is the latest version of <strong>Intel x86 Emulator Accelerator (HAXM installer).&nbsp;</strong>Just download the latest version available from the Extras section.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/androidemulator2/haxminstaller.png\" alt=\"\" width=\"646\" height=\"288\" /></p>
<p>As mentioned in the name, what that SDK Manager downloads is just an <em>installer.</em>&nbsp;It doesn't install the HAXM for you yet. You need to manually install it yourself by browsing into <strong>Android SDK Folder</strong>&nbsp;and follow with&nbsp;<code>extras/intel/Hardware_Accelerated_Execution_Manager</code>.&nbsp;You will see an installer laying down inside. Just do what you have to do.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/androidemulator2/haxminstaller2.png\" alt=\"\" width=\"767\" height=\"248\" /></p>
<p>The latest one to download is&nbsp;<strong>Android 5.0 - Google APIs Intel x86 Atom System Image rev 10</strong>&nbsp;to use it as an Emulator's ROM image.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/androidemulator2/gapisrev10.png\" alt=\"\" width=\"641\" height=\"291\" /></p>
<p>All done ! It's now ready&nbsp;!</p>
<h2 class=\"section-heading\">Give it a try</h2>
<p>Let me skip the Android Virtual Device creating part since I believe that every single Android developer could do that yourself through AVD Manager available inside Android Studio 2.0</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/androidemulator2/avdmanager.png\" alt=\"\" width=\"784\" height=\"346\" /></p>
<p>Please note that there is a new experimental feature available in this part. You could assign the number of CPU's Core for the emulator unless it will be automatically set to the default value, 1.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/androidemulator2/cpucores.png\" alt=\"\" width=\"571\" height=\"230\" /></p>
<p>Now it's a good time to launch a created AVD.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/androidemulator2/em2.jpg\" alt=\"\" width=\"784\" height=\"469\" /></p>
<p>Woo hooooo, Android Emulator 2.0 ! The change is obvious. You could see the new toolbar on the right side of Emulator screen.</p>
<p>After an hour of playing around, <strong>I found that Emulator started and operated much faster than the&nbsp;previous version</strong>. Anyway, I must say that I&nbsp;<em>feel</em>&nbsp;that it is still a little bit slower than Genymotion. But well, it is acceptable and very satisfiable.</p>
<p>There are quite a ton of new features available. The most obvious one is you could now easily resize the window!</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/androidemulator2/shrink.jpg\" alt=\"\" width=\"784\" height=\"468\" /></p>
<p>For those extra features just like GPS simulation, Fingerprint, Phone Calling, SMS Sending and etc which we have to do through the command line in the previous version is now available in GUI&nbsp;version. 100x easier I must say!</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/androidemulator2/settings.png\" alt=\"\" width=\"784\" height=\"602\" /></p>
<p>These extended controls are one of the most impressive features for me in this new update since it is very convenient and totally complete. And well ... it's FREE.</p>
<p>Now let's test the speed of apk deployment. I found that it could be transferred at the incredible speed, <strong>50MB/s</strong>.</p>
<pre class=\"brush:bash;auto-links:false;toolbar:false\" contenteditable=\"false\">$ adb -s emulator-5554 install app-release.apk
        pkg: /data/local/tmp/app-release.apk
Success
51410 KB/s (6160590 bytes in 0.117s)
</pre>
<p>It's 10x faster than the transfer speed to Samsung Galaxy Note 3 LTE which could make it at 5MB/s. At this speed, it could significantly increase the speed of development as well.</p>
<p>In conclusion, Android Emulator 2.0 is really&nbsp;satisfiable. <span style=\"text-decoration: underline;\">I would consider switching my primary emulator from Genymotion to Android Emulator 2.0 by now since the completeness on its feature&nbsp;and it is also FREE of charge!</span></p>
<p>However, some weakness still persist. <span style=\"color: #e74c3c;\"><strong>It consumes quite a lot of memory.</strong></span></p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/androidemulator2/memoryconsumption.png\" alt=\"\" width=\"646\" height=\"221\" /></p>
<p>But it still works quite fine on 8GB+ RAM machine.</p>
<p>Generally, I am so happy with this large update. Please give it a try and feel free to share your opinion over this new big thing!</p>
<p>Have a nice weekend =)</p>			") (link nil "http://inthecheesefactory.com/blog/first-look-at-android-emulator-2.0/en") (pubDate nil "
				Fri, 11 Dec 2015 14:11:00 +0000			") (guid nil "http://inthecheesefactory.com/blog/first-look-at-android-emulator-2.0/en"))) ("Retrofit 2.0: The biggest update yet on the best HTTP Client Library for Android" "<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/blog/retrofit2/coverretrofit2black.png\" /></p>
<p>Retrofit is one of the most popular HTTP Client Library for Android as a result of&nbsp;its simplicity and its great&nbsp;performance compare to the others.</p>
<p>Anyway its weakness is there is no any straight way to&nbsp;cancel the ongoing transaction in Retrofit 1.x. If you want to do that you have to call it on Thread and kill it&nbsp;manually which is quite hard to manage.</p>
<p>Square gave a promise years ago that this feature will be available on Retrofit 2.0 but years passed, there is still no updated news on this.</p>
<p>Until last week,&nbsp;Retrofit 2.0 just passed its Release Candidate stage to Beta 1&nbsp;and has&nbsp;been publicly launched to everyone. After giving it a try, I must say that I am quite impressed on its new pattern and its new features. There are a lot of changes in the&nbsp;good way.&nbsp;I will describe those in this article. Let's get started !</p>
<h2 class=\"section-heading\">Same Old Package with New Version</h2>
<p>If you want to import Retrofit 2.0 into your project, add this line to your <code>build.gradle</code> in <code>dependencies</code>&nbsp;section.</p>
<pre class=\"brush:groovy;auto-links:false;toolbar:false\" contenteditable=\"false\">compile 'com.squareup.retrofit2:retrofit:2.0.0-beta4'</pre>
<p>Sync your gradle files and you can now use Retrofit 2.0 =)</p>
<p>And as you see, Retrofit 2 package name is not the same as the previous version. It's now&nbsp;<code>com.squareup.retrofit2</code>.</p>
<h2 class=\"section-heading\">New Service Declaration. No more Synchronous and&nbsp;Asynchronous.</h2>
<p>In regard to service interface declaration in Retrofit 1.9, if you want to declare a synchronous function, you have to declare like this:</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">/* Synchronous in Retrofit 1.9 */
public interface APIService {
@POST(\"/list\")
Repo loadRepo();
}</pre>
<p>And you have to declare an asynchronous&nbsp;one like this:</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">/* Asynchronous in Retrofit 1.9 */
public interface APIService {
@POST(\"/list\")
void loadRepo(Callback&lt;Repo&gt; cb);
}</pre>
<p>But on <strong>Retrofit 2.0</strong>, it is far more simple since you can declare with only just a single&nbsp;pattern.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">import retrofit.Call;
/* Retrofit 2.0 */
public interface APIService {
@POST(\"/list\")
Call&lt;Repo&gt; loadRepo();
}</pre>
<p>The way to call a created service is also changed into the same pattern&nbsp;as <a href=\"http://square.github.io/okhttp/\" target=\"_blank\">OkHttp</a>.&nbsp;To call is as a synchronous request, just call&nbsp;<code>execute</code>&nbsp;or&nbsp;call&nbsp;<code>enqueue</code>&nbsp;to make&nbsp;an asynchronous request.</p>
<p><strong>Synchronous Request</strong></p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">// Synchronous Call in Retrofit 2.0
Call&lt;Repo&gt; call = service.loadRepo();
Repo repo = call.execute();</pre>
<p>The source code above will block the thread so you <em>cannot</em> call it on Main Thread in Android or you will face <code>NetworkOnMainThreadException</code>. If you want to call <code>execute</code> method, you have to do it on background thread.</p>
<p><strong>Asynchronous Request</strong></p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">// Asynchronous Call in Retrofit 2.0
Call&lt;Repo&gt; call = service.loadRepo();
call.enqueue(new Callback&lt;Repo&gt;() {
@Override
public void onResponse(Response&lt;Repo&gt; response) {
// Get result Repo from response.body()
}
@Override
public void onFailure(Throwable t) {
}
});
</pre>
<p>The above code will make a request in the background thread and retreive a result as an Object which you can extract from response with <code>response.body()</code> method. Please note that those call methods:&nbsp;<code>onResponse</code> and <code>onFailure</code>&nbsp;will be called in <strong>Main Thread</strong>.</p>
<p>I suggest you to use <code>enqueue</code>. It fits Android OS behavior best.</p>
<h2 class=\"section-heading\">Ongoing Transaction Cancellation</h2>
<p>The reason behind the service pattern changing to&nbsp;<code>Call</code>&nbsp;is to make the ongoing transaction be able to be cancelled.&nbsp;To do so, just simply call&nbsp;<code>call.cancel()</code></p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">call.cancel();</pre>
<p>The transaction would be cancelled shortly after that. Easy, huh? =D</p>
<h2 class=\"section-heading\">New Service Creation. Converter is now excluded from Retrofit.</h2>
<p>In Retrofit 1.9, GsonConverter is included in the package and is automatically initiated upon <code>RestAdapter</code> creation. As a result, the json result from server would be automatically parsed to the defined Data Access Object (DAO).</p>
<p>But in Retrofit 2.0, Converter is <em><strong>not</strong></em> included in the package anymore.&nbsp;You need to plug a Converter in yourself or Retrofit will be able to accept only the String result. As a result,&nbsp;Retrofit 2.0 doesn't depend on Gson anymore.</p>
<p>If you want to accept json result and make it parse into DAO, you have to summon Gson Converter as a separate dependency.</p>
<pre class=\"brush:groovy;auto-links:false;toolbar:false\" contenteditable=\"false\">compile 'com.squareup.retrofit:converter-gson:2.0.0-beta2'</pre>
<p>And plug it in through&nbsp;<code>addConverterFactory</code>. Please note that <code>RestAdapter</code> is now also renamed to <code>Retrofit</code>.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">        Retrofit retrofit = new Retrofit.Builder()
.baseUrl(\"http://api.nuuneoi.com/base/\")
.addConverterFactory(GsonConverterFactory.create())
.build();
service = retrofit.create(APIService.class);
</pre>
<p>Here is the list of official Converter modules provided by Square. Choose one that fits your requirement best.</p>
<p style=\"padding-left: 30px;\"><strong>Gson:</strong> <span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt;\">com.squareup.retrofit:converter-gson</span><br /><strong>Jackson:</strong> <span style=\"font-size: 12pt; font-family: 'courier new', courier, monospace;\">com.squareup.retrofit:converter-jackson</span><br /><strong>Moshi:</strong> <span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt;\">com.squareup.retrofit:converter-moshi</span><br /><strong>Protobuf:</strong> <span style=\"font-size: 12pt; font-family: 'courier new', courier, monospace;\">com.squareup.retrofit:converter-protobuf</span><br /><strong>Wire:</strong> <span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt;\">com.squareup.retrofit:converter-wire</span><br /><strong>Simple XML:</strong> <span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt;\">com.squareup.retrofit:converter-simplexml</span></p>
<p>You also can create a custom converter yourself by implementing a <a href=\"https://github.com/square/retrofit/blob/master/retrofit/src/main/java/retrofit/Converter.java\" target=\"_blank\">Converter.Factory</a> interface.</p>
<p>I support this new pattern. It makes Retrofit more clear what it&nbsp;actually does.</p>
<h2 class=\"section-heading\">Custom Gson Object</h2>
<p>In case you need to adjust some format in json, for example, Date Format. You can do that by creating a Gson object and pass it to&nbsp;<code>GsonConverterFactory.create()</code></p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">        Gson gson = new GsonBuilder()
.setDateFormat(\"yyyy-MM-dd'T'HH:mm:ssZ\")
.create();
Retrofit retrofit = new Retrofit.Builder()
.baseUrl(\"http://api.nuuneoi.com/base/\")
.addConverterFactory(GsonConverterFactory.create(gson))
.build();
service = retrofit.create(APIService.class);
</pre>
<p>Done.</p>
<h2 class=\"section-heading\">New URL resolving concept. The&nbsp;same way as&nbsp;&lt;a href&gt;</h2>
<p>Retrofit 2.0 comes with new URL&nbsp;resolving concept. Base URL and @Url have&nbsp;not&nbsp;just simply been combined together but have been resolved&nbsp;the same way as what&nbsp;<code>&lt;a href=\"...\"&gt;</code>&nbsp;does instead.&nbsp;Please take a look for the examples&nbsp;below for the&nbsp;clarification.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/retrofit2/apiservice1.png\" alt=\"\" width=\"723\" height=\"222\" /></p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/retrofit2/apiservice2.png\" alt=\"\" width=\"723\" height=\"222\" /></p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/retrofit2/apiservice3.png\" alt=\"\" width=\"723\" height=\"222\" /></p>
<p>Here is my suggestion on the new URL declaration pattern in Retrofit 2.0:</p>
<p style=\"padding-left: 30px;\">- <strong>Base URL</strong>: always ends with&nbsp;/</p>
<p style=\"padding-left: 30px;\">- <strong>@Url</strong>: <span style=\"text-decoration: underline;\">DO NOT</span>&nbsp;start with /</p>
<p>for instance</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">public interface APIService {
@POST(\"user/list\")
Call&lt;Users&gt; loadUsers();
}
public void doSomething() {
Retrofit retrofit = new Retrofit.Builder()
.baseUrl(\"http://api.nuuneoi.com/base/\")
.addConverterFactory(GsonConverterFactory.create())
.build();
APIService service = retrofit.create(APIService.class);
}</pre>
<p><code>loadUsers</code> from code above will fetch data from&nbsp;<strong><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt;\">http://api.nuuneoi.com/base/user/list</span></strong></p>
<p>Moreover we also can declare a full URL in&nbsp;<code>@Url</code>&nbsp;in Retrofit 2.0:</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">public interface APIService {
@POST(\"http://api.nuuneoi.com/special/user/list\")
Call&lt;Users&gt; loadSpecialUsers();
}</pre>
<p>Base URL will be ignored for this case.</p>
<p>You will see that there is a major change on URL resolving. It is totally different from the previous version. If you want to move your code to Retrofit 2.0, don't forget to fix those URLs part of code.</p>
<h2 class=\"section-heading\">OkHttp&nbsp;is now required</h2>
<p>OkHttp is set to&nbsp;optional in Retrofit 1.9. If you want to let Retrofit use OkHttp as HTTP connection interface, you have to manually include <span style=\"font-family: 'courier new', courier, monospace;\">okhttp</span>&nbsp;as a dependency yourself.</p>
<p>But in Retrofit 2.0, OkHttp is now required and is automatically set as a dependency. The code below is snapped from pom file of Retrofit 2.0. You have no need to do anything.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">  &lt;dependencies&gt;
&lt;dependency&gt;
&lt;groupId&gt;com.squareup.okhttp&lt;/groupId&gt;
&lt;artifactId&gt;okhttp&lt;/artifactId&gt;
&lt;/dependency&gt;
...
&lt;/dependencies&gt;</pre>
<p>OkHttp is automatically used as a HTTP interface in Retrofit 2.0 in purpose to&nbsp;enabling the OkHttp's&nbsp;<code>Call</code>&nbsp;pattern as decribed above.</p>
<h2 class=\"section-heading\">onResponse is still called eventhough there is a problem with the response</h2>
<p>In Retrofit 1.9, if the fetched response couldn't be parsed into the defined Object, <code>failure</code> will be called. But in Retrofit 2.0, whether the response is be able to parse or not, <code>onResponse</code> will be always called. But in the case the result couldn't be parsed into the Object, <code>response.body()</code> will return as null. Don't forget to handle for the case.</p>
<p>If there is any problem&nbsp;on the response, for example, 404 Not Found. <code>onResponse</code> will also be called. You can retrieve&nbsp;the error body&nbsp;from <code>response.errorBody().string()</code>.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/retrofit2/response.jpg\" alt=\"\" width=\"784\" height=\"245\" /></p>
<p>Response/Failure logic is quite different from Retrofit 1.9. Be careful on handling for all the cases if you decide to move to Retrofit 2.0.</p>
<h2 class=\"section-heading\">Missing INTERNET Permission cause&nbsp;SecurityException throwing</h2>
<p>In&nbsp;Retrofit 1.9, if you forget to add INTERNET permission into your <code>AndroidManifest.xml</code> file. Asynchronous request will immediately fall into <code>failure</code> callback method with&nbsp;<strong>PERMISSION DENIED</strong>&nbsp;error message.&nbsp;None of&nbsp;exception is thrown.</p>
<p>But in Retrofit 2.0, when you call&nbsp;<code>call.enqueue</code> or&nbsp;<code>call.execute</code>,&nbsp;<code>SecurityException</code>&nbsp;will be immediately thrown and may cause crashing if you do not handle the case with&nbsp;try-catch.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/retrofit2/sec.png\" alt=\"\" width=\"784\" height=\"347\" /></p>
<p>The behavior is just like the same when you manually call&nbsp;<code>HttpURLConnection</code>. Anyway this issue is not a big deal since when INTERNET permission is added into AndroidManifest.xml, there is nothing to concern anymore.</p>
<h2 class=\"section-heading\">Use an&nbsp;Interceptor from&nbsp;OkHttp</h2>
<p>On Retrofit 1.9 you could use&nbsp;<code>RequestInterceptor</code>&nbsp;to intercept a Request but it is already removed on&nbsp;Retrofit 2.0 since the HTTP connection&nbsp;layer has been moved to OkHttp.</p>
<p>As a result, we have to switch to an&nbsp;<code>Interceptor</code>&nbsp;from&nbsp;<strong>OkHttp</strong>&nbsp;from now on. First you have to create a <code>OkHttpClient</code> object with an Interceptor like this:</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">        OkHttpClient client = new OkHttpClient();
client.interceptors().add(new Interceptor() {
@Override
public Response intercept(Chain chain) throws IOException {
Response response = chain.proceed(chain.request());
// Do anything with response here
return response;
}
});
</pre>
<p>And the pass the created <code>client</code> into Retrofit's Builder chain.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">        Retrofit retrofit = new Retrofit.Builder()
.baseUrl(\"http://api.nuuneoi.com/base/\")
.addConverterFactory(GsonConverterFactory.create())
.client(client)
.build();
</pre>
<p>That's all.</p>
<p>To learn more about what OkHttp Interceptor can do, please&nbsp;browse into&nbsp;<a href=\"https://github.com/square/okhttp/wiki/Interceptors\" target=\"_blank\">OkHttp Interceptors</a>.</p>
<h2 class=\"section-heading\">Certificate Pinning</h2>
<p>As same as an Interceptor, creation of an OkHttp client instance is required if you want to apply a Certificate Pinning with your connection. Here is the example code snippet. First, defines an OkHttp client instance with Certificate Pinning information:</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">OkHttpClient client = new OkHttpClient.Builder()
.certificatePinner(new CertificatePinner.Builder()
.add(\"publicobject.com\", \"sha1/DmxUShsZuNiqPQsX2Oi9uv2sCnw=\")
.add(\"publicobject.com\", \"sha1/SXxoaOSEzPC6BgGmxAt/EAcsajw=\")
.add(\"publicobject.com\", \"sha1/blhOM3W9V/bVQhsWAcLYwPU6n24=\")
.add(\"publicobject.com\", \"sha1/T5x9IXmcrQ7YuQxXnxoCmeeQ84c=\")
.build())
.build();
</pre>
<p>Assign&nbsp;the OkHttp client created within Retrofit builder chain.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">Retrofit retrofit = new Retrofit.Builder()
.baseUrl(\"http://api.nuuneoi.com/base/\")
.addConverterFactory(GsonConverterFactory.create())
.client(client)
.build();</pre>
<p>For more information about sha1 hash for Certificate Pinning ... Google would help a lot, just simple search for it how to achieve that piece of data.</p>
<h2 class=\"section-heading\">RxJava Integration with CallAdapter</h2>
<p>Beside declaring interface with <code>Call&lt;T&gt;</code>&nbsp;pattern, we also could declare our own type as well, for example,&nbsp;<code>MyCall&lt;T&gt;</code>. The mechanic is called \"<code>CallAdapter</code>\"&nbsp;which is available on Retrofit 2.0</p>
<p>There is some ready-to-use CallAdapter module available from Retrofit team. One of the most popular module might be CallAdapter for <strong>RxJava</strong> which will return as <code>Observable&lt;T&gt;</code>. To use it, two modules must be included as&nbsp;your project's&nbsp;dependencies.</p>
<pre class=\"brush:groovy;auto-links:false;toolbar:false\" contenteditable=\"false\">    compile 'com.squareup.retrofit:adapter-rxjava:2.0.0-beta2'
compile 'io.reactivex:rxandroid:1.0.1'
</pre>
<p>Sync Gradle and add&nbsp;<code>addCallAdapterFactory</code>&nbsp;in Retrofit Builder chain like this:</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">        Retrofit retrofit = new Retrofit.Builder()
.baseUrl(\"http://api.nuuneoi.com/base/\")
.addConverterFactory(GsonConverterFactory.create())
.addCallAdapterFactory(RxJavaCallAdapterFactory.create())
.build();
</pre>
<p>Your Service interface is now able to return&nbsp;as&nbsp;<code>Observable&lt;T&gt;</code>!</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">public interface APIService {
@POST(\"list\")
Call&lt;DessertItemCollectionDao&gt; loadDessertList();
@POST(\"list\")
Observable&lt;DessertItemCollectionDao&gt; loadDessertListRx();
}
</pre>
<p>You can use it in the exact same RxJava way. In addition, if you want to let code inside subscribe part called on Main Thread, <code>observeOn(AndroidSchedulers.mainThread())</code>&nbsp;is needed to be added to&nbsp;the chain.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">        Observable&lt;DessertItemCollectionDao&gt; observable = service.loadDessertListRx();
observable.subscribeOn(Schedulers.io())
.observeOn(AndroidSchedulers.mainThread())
.unsubscribeOn(Schedulers.io())
.subscribe(new Subscriber&lt;DessertItemCollectionDao&gt;() {
@Override
public void onCompleted() {
Toast.makeText(getApplicationContext(),
\"Completed\",
Toast.LENGTH_SHORT)
.show();
}
@Override
public void onError(Throwable e) {
Toast.makeText(getApplicationContext(),
e.getMessage(),
Toast.LENGTH_SHORT)
.show();
}
@Override
public void onNext(DessertItemCollectionDao dessertItemCollectionDao) {
Toast.makeText(getApplicationContext(),
dessertItemCollectionDao.getData().get(0).getName(),
Toast.LENGTH_SHORT)
.show();
}
});</pre>
<p>Done ! I believe that&nbsp;RxJava fan is very satisfying with this change =D</p>
<h2 class=\"section-heading\">Conclusion</h2>
<p>There are also some other changes, you can check for the official <a href=\"https://github.com/square/retrofit/blob/master/CHANGELOG.md\" target=\"_blank\">Change Log</a>&nbsp;for more details. Anyway&nbsp;I believe that I have already covered the main issues in this article.</p>
<p>You may be curious that is it time to move to Retrofit 2.0 yet? Since it is still in the&nbsp;beta stage so you may want to stay with 1.9 first except you are an early adopter like me, Retrofit 2.0 works pretty&nbsp;great and there is no any bug found yet based on&nbsp;my own&nbsp;experiment.</p>
<p>Please note that Retrofit 1.9 official document was already removed from Square github website. I suggest you to start studying for Retrofit 2.0 right now and consider moving to the latest version in very near future.&nbsp;=D</p>" "http://inthecheesefactory.com/blog/retrofit-2.0/en" (21995 53260) old 9 nil nil ((title nil "
				Retrofit 2.0: The biggest update yet on the best HTTP Client Library for Android			") (description nil "
				<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/blog/retrofit2/coverretrofit2black.png\" /></p> 
<p>Retrofit is one of the most popular HTTP Client Library for Android as a result of&nbsp;its simplicity and its great&nbsp;performance compare to the others.</p>
<p>Anyway its weakness is there is no any straight way to&nbsp;cancel the ongoing transaction in Retrofit 1.x. If you want to do that you have to call it on Thread and kill it&nbsp;manually which is quite hard to manage.</p>
<p>Square gave a promise years ago that this feature will be available on Retrofit 2.0 but years passed, there is still no updated news on this.</p>
<p>Until last week,&nbsp;Retrofit 2.0 just passed its Release Candidate stage to Beta 1&nbsp;and has&nbsp;been publicly launched to everyone. After giving it a try, I must say that I am quite impressed on its new pattern and its new features. There are a lot of changes in the&nbsp;good way.&nbsp;I will describe those in this article. Let's get started !</p>
<h2 class=\"section-heading\">Same Old Package with New Version</h2>
<p>If you want to import Retrofit 2.0 into your project, add this line to your <code>build.gradle</code> in <code>dependencies</code>&nbsp;section.</p>
<pre class=\"brush:groovy;auto-links:false;toolbar:false\" contenteditable=\"false\">compile 'com.squareup.retrofit2:retrofit:2.0.0-beta4'</pre>
<p>Sync your gradle files and you can now use Retrofit 2.0 =)</p>
<p>And as you see, Retrofit 2 package name is not the same as the previous version. It's now&nbsp;<code>com.squareup.retrofit2</code>.</p>
<h2 class=\"section-heading\">New Service Declaration. No more Synchronous and&nbsp;Asynchronous.</h2>
<p>In regard to service interface declaration in Retrofit 1.9, if you want to declare a synchronous function, you have to declare like this:</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">/* Synchronous in Retrofit 1.9 */

public interface APIService {

    @POST(\"/list\")
    Repo loadRepo();

}</pre>
<p>And you have to declare an asynchronous&nbsp;one like this:</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">/* Asynchronous in Retrofit 1.9 */

public interface APIService {

    @POST(\"/list\")
    void loadRepo(Callback&lt;Repo&gt; cb);

}</pre>
<p>But on <strong>Retrofit 2.0</strong>, it is far more simple since you can declare with only just a single&nbsp;pattern.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">import retrofit.Call;

/* Retrofit 2.0 */

public interface APIService {

    @POST(\"/list\")
    Call&lt;Repo&gt; loadRepo();

}</pre>
<p>The way to call a created service is also changed into the same pattern&nbsp;as <a href=\"http://square.github.io/okhttp/\" target=\"_blank\">OkHttp</a>.&nbsp;To call is as a synchronous request, just call&nbsp;<code>execute</code>&nbsp;or&nbsp;call&nbsp;<code>enqueue</code>&nbsp;to make&nbsp;an asynchronous request.</p>
<p><strong>Synchronous Request</strong></p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">// Synchronous Call in Retrofit 2.0

Call&lt;Repo&gt; call = service.loadRepo();
Repo repo = call.execute();</pre>
<p>The source code above will block the thread so you <em>cannot</em> call it on Main Thread in Android or you will face <code>NetworkOnMainThreadException</code>. If you want to call <code>execute</code> method, you have to do it on background thread.</p>
<p><strong>Asynchronous Request</strong></p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">// Asynchronous Call in Retrofit 2.0

Call&lt;Repo&gt; call = service.loadRepo();
call.enqueue(new Callback&lt;Repo&gt;() {
    @Override
    public void onResponse(Response&lt;Repo&gt; response) {
        // Get result Repo from response.body()
    }

    @Override
    public void onFailure(Throwable t) {

    }
});
</pre>
<p>The above code will make a request in the background thread and retreive a result as an Object which you can extract from response with <code>response.body()</code> method. Please note that those call methods:&nbsp;<code>onResponse</code> and <code>onFailure</code>&nbsp;will be called in <strong>Main Thread</strong>.</p>
<p>I suggest you to use <code>enqueue</code>. It fits Android OS behavior best.</p>
<h2 class=\"section-heading\">Ongoing Transaction Cancellation</h2>
<p>The reason behind the service pattern changing to&nbsp;<code>Call</code>&nbsp;is to make the ongoing transaction be able to be cancelled.&nbsp;To do so, just simply call&nbsp;<code>call.cancel()</code></p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">call.cancel();</pre>
<p>The transaction would be cancelled shortly after that. Easy, huh? =D</p>
<h2 class=\"section-heading\">New Service Creation. Converter is now excluded from Retrofit.</h2>
<p>In Retrofit 1.9, GsonConverter is included in the package and is automatically initiated upon <code>RestAdapter</code> creation. As a result, the json result from server would be automatically parsed to the defined Data Access Object (DAO).</p>
<p>But in Retrofit 2.0, Converter is <em><strong>not</strong></em> included in the package anymore.&nbsp;You need to plug a Converter in yourself or Retrofit will be able to accept only the String result. As a result,&nbsp;Retrofit 2.0 doesn't depend on Gson anymore.</p>
<p>If you want to accept json result and make it parse into DAO, you have to summon Gson Converter as a separate dependency.</p>
<pre class=\"brush:groovy;auto-links:false;toolbar:false\" contenteditable=\"false\">compile 'com.squareup.retrofit:converter-gson:2.0.0-beta2'</pre>
<p>And plug it in through&nbsp;<code>addConverterFactory</code>. Please note that <code>RestAdapter</code> is now also renamed to <code>Retrofit</code>.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">        Retrofit retrofit = new Retrofit.Builder()
                .baseUrl(\"http://api.nuuneoi.com/base/\")
                .addConverterFactory(GsonConverterFactory.create())
                .build();

        service = retrofit.create(APIService.class);
</pre>
<p>Here is the list of official Converter modules provided by Square. Choose one that fits your requirement best.</p>
<p style=\"padding-left: 30px;\"><strong>Gson:</strong> <span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt;\">com.squareup.retrofit:converter-gson</span><br /><strong>Jackson:</strong> <span style=\"font-size: 12pt; font-family: 'courier new', courier, monospace;\">com.squareup.retrofit:converter-jackson</span><br /><strong>Moshi:</strong> <span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt;\">com.squareup.retrofit:converter-moshi</span><br /><strong>Protobuf:</strong> <span style=\"font-size: 12pt; font-family: 'courier new', courier, monospace;\">com.squareup.retrofit:converter-protobuf</span><br /><strong>Wire:</strong> <span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt;\">com.squareup.retrofit:converter-wire</span><br /><strong>Simple XML:</strong> <span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt;\">com.squareup.retrofit:converter-simplexml</span></p>
<p>You also can create a custom converter yourself by implementing a <a href=\"https://github.com/square/retrofit/blob/master/retrofit/src/main/java/retrofit/Converter.java\" target=\"_blank\">Converter.Factory</a> interface.</p>
<p>I support this new pattern. It makes Retrofit more clear what it&nbsp;actually does.</p>
<h2 class=\"section-heading\">Custom Gson Object</h2>
<p>In case you need to adjust some format in json, for example, Date Format. You can do that by creating a Gson object and pass it to&nbsp;<code>GsonConverterFactory.create()</code></p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">        Gson gson = new GsonBuilder()
                .setDateFormat(\"yyyy-MM-dd'T'HH:mm:ssZ\")
                .create();

        Retrofit retrofit = new Retrofit.Builder()
                .baseUrl(\"http://api.nuuneoi.com/base/\")
                .addConverterFactory(GsonConverterFactory.create(gson))
                .build();

        service = retrofit.create(APIService.class);
</pre>
<p>Done.</p>
<h2 class=\"section-heading\">New URL resolving concept. The&nbsp;same way as&nbsp;&lt;a href&gt;</h2>
<p>Retrofit 2.0 comes with new URL&nbsp;resolving concept. Base URL and @Url have&nbsp;not&nbsp;just simply been combined together but have been resolved&nbsp;the same way as what&nbsp;<code>&lt;a href=\"...\"&gt;</code>&nbsp;does instead.&nbsp;Please take a look for the examples&nbsp;below for the&nbsp;clarification.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/retrofit2/apiservice1.png\" alt=\"\" width=\"723\" height=\"222\" /></p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/retrofit2/apiservice2.png\" alt=\"\" width=\"723\" height=\"222\" /></p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/retrofit2/apiservice3.png\" alt=\"\" width=\"723\" height=\"222\" /></p>
<p>Here is my suggestion on the new URL declaration pattern in Retrofit 2.0:</p>
<p style=\"padding-left: 30px;\">- <strong>Base URL</strong>: always ends with&nbsp;/</p>
<p style=\"padding-left: 30px;\">- <strong>@Url</strong>: <span style=\"text-decoration: underline;\">DO NOT</span>&nbsp;start with /</p>
<p>for instance</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">public interface APIService {

    @POST(\"user/list\")
    Call&lt;Users&gt; loadUsers();

}

public void doSomething() {
    Retrofit retrofit = new Retrofit.Builder()
            .baseUrl(\"http://api.nuuneoi.com/base/\")
            .addConverterFactory(GsonConverterFactory.create())
            .build();

    APIService service = retrofit.create(APIService.class);
}</pre>
<p><code>loadUsers</code> from code above will fetch data from&nbsp;<strong><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt;\">http://api.nuuneoi.com/base/user/list</span></strong></p>
<p>Moreover we also can declare a full URL in&nbsp;<code>@Url</code>&nbsp;in Retrofit 2.0:</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">public interface APIService {

    @POST(\"http://api.nuuneoi.com/special/user/list\")
    Call&lt;Users&gt; loadSpecialUsers();

}</pre>
<p>Base URL will be ignored for this case.</p>
<p>You will see that there is a major change on URL resolving. It is totally different from the previous version. If you want to move your code to Retrofit 2.0, don't forget to fix those URLs part of code.</p>
<h2 class=\"section-heading\">OkHttp&nbsp;is now required</h2>
<p>OkHttp is set to&nbsp;optional in Retrofit 1.9. If you want to let Retrofit use OkHttp as HTTP connection interface, you have to manually include <span style=\"font-family: 'courier new', courier, monospace;\">okhttp</span>&nbsp;as a dependency yourself.</p>
<p>But in Retrofit 2.0, OkHttp is now required and is automatically set as a dependency. The code below is snapped from pom file of Retrofit 2.0. You have no need to do anything.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;com.squareup.okhttp&lt;/groupId&gt;
      &lt;artifactId&gt;okhttp&lt;/artifactId&gt;
    &lt;/dependency&gt;

    ...
  &lt;/dependencies&gt;</pre>
<p>OkHttp is automatically used as a HTTP interface in Retrofit 2.0 in purpose to&nbsp;enabling the OkHttp's&nbsp;<code>Call</code>&nbsp;pattern as decribed above.</p>
<h2 class=\"section-heading\">onResponse is still called eventhough there is a problem with the response</h2>
<p>In Retrofit 1.9, if the fetched response couldn't be parsed into the defined Object, <code>failure</code> will be called. But in Retrofit 2.0, whether the response is be able to parse or not, <code>onResponse</code> will be always called. But in the case the result couldn't be parsed into the Object, <code>response.body()</code> will return as null. Don't forget to handle for the case.</p>
<p>If there is any problem&nbsp;on the response, for example, 404 Not Found. <code>onResponse</code> will also be called. You can retrieve&nbsp;the error body&nbsp;from <code>response.errorBody().string()</code>.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/retrofit2/response.jpg\" alt=\"\" width=\"784\" height=\"245\" /></p>
<p>Response/Failure logic is quite different from Retrofit 1.9. Be careful on handling for all the cases if you decide to move to Retrofit 2.0.</p>
<h2 class=\"section-heading\">Missing INTERNET Permission cause&nbsp;SecurityException throwing</h2>
<p>In&nbsp;Retrofit 1.9, if you forget to add INTERNET permission into your <code>AndroidManifest.xml</code> file. Asynchronous request will immediately fall into <code>failure</code> callback method with&nbsp;<strong>PERMISSION DENIED</strong>&nbsp;error message.&nbsp;None of&nbsp;exception is thrown.</p>
<p>But in Retrofit 2.0, when you call&nbsp;<code>call.enqueue</code> or&nbsp;<code>call.execute</code>,&nbsp;<code>SecurityException</code>&nbsp;will be immediately thrown and may cause crashing if you do not handle the case with&nbsp;try-catch.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/retrofit2/sec.png\" alt=\"\" width=\"784\" height=\"347\" /></p>
<p>The behavior is just like the same when you manually call&nbsp;<code>HttpURLConnection</code>. Anyway this issue is not a big deal since when INTERNET permission is added into AndroidManifest.xml, there is nothing to concern anymore.</p>
<h2 class=\"section-heading\">Use an&nbsp;Interceptor from&nbsp;OkHttp</h2>
<p>On Retrofit 1.9 you could use&nbsp;<code>RequestInterceptor</code>&nbsp;to intercept a Request but it is already removed on&nbsp;Retrofit 2.0 since the HTTP connection&nbsp;layer has been moved to OkHttp.</p>
<p>As a result, we have to switch to an&nbsp;<code>Interceptor</code>&nbsp;from&nbsp;<strong>OkHttp</strong>&nbsp;from now on. First you have to create a <code>OkHttpClient</code> object with an Interceptor like this:</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">        OkHttpClient client = new OkHttpClient();
        client.interceptors().add(new Interceptor() {
            @Override
            public Response intercept(Chain chain) throws IOException {
                Response response = chain.proceed(chain.request());

                // Do anything with response here

                return response;
            }
        });
</pre>
<p>And the pass the created <code>client</code> into Retrofit's Builder chain.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">        Retrofit retrofit = new Retrofit.Builder()
                .baseUrl(\"http://api.nuuneoi.com/base/\")
                .addConverterFactory(GsonConverterFactory.create())
                .client(client)
                .build();
</pre>
<p>That's all.</p>
<p>To learn more about what OkHttp Interceptor can do, please&nbsp;browse into&nbsp;<a href=\"https://github.com/square/okhttp/wiki/Interceptors\" target=\"_blank\">OkHttp Interceptors</a>.</p>
<h2 class=\"section-heading\">Certificate Pinning</h2>
<p>As same as an Interceptor, creation of an OkHttp client instance is required if you want to apply a Certificate Pinning with your connection. Here is the example code snippet. First, defines an OkHttp client instance with Certificate Pinning information:</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">OkHttpClient client = new OkHttpClient.Builder()
        .certificatePinner(new CertificatePinner.Builder()
                .add(\"publicobject.com\", \"sha1/DmxUShsZuNiqPQsX2Oi9uv2sCnw=\")
                .add(\"publicobject.com\", \"sha1/SXxoaOSEzPC6BgGmxAt/EAcsajw=\")
                .add(\"publicobject.com\", \"sha1/blhOM3W9V/bVQhsWAcLYwPU6n24=\")
                .add(\"publicobject.com\", \"sha1/T5x9IXmcrQ7YuQxXnxoCmeeQ84c=\")
                .build())
        .build();
</pre>
<p>Assign&nbsp;the OkHttp client created within Retrofit builder chain.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">Retrofit retrofit = new Retrofit.Builder()
        .baseUrl(\"http://api.nuuneoi.com/base/\")
        .addConverterFactory(GsonConverterFactory.create())
        .client(client)
        .build();</pre>
<p>For more information about sha1 hash for Certificate Pinning ... Google would help a lot, just simple search for it how to achieve that piece of data.</p>
<h2 class=\"section-heading\">RxJava Integration with CallAdapter</h2>
<p>Beside declaring interface with <code>Call&lt;T&gt;</code>&nbsp;pattern, we also could declare our own type as well, for example,&nbsp;<code>MyCall&lt;T&gt;</code>. The mechanic is called \"<code>CallAdapter</code>\"&nbsp;which is available on Retrofit 2.0</p>
<p>There is some ready-to-use CallAdapter module available from Retrofit team. One of the most popular module might be CallAdapter for <strong>RxJava</strong> which will return as <code>Observable&lt;T&gt;</code>. To use it, two modules must be included as&nbsp;your project's&nbsp;dependencies.</p>
<pre class=\"brush:groovy;auto-links:false;toolbar:false\" contenteditable=\"false\">    compile 'com.squareup.retrofit:adapter-rxjava:2.0.0-beta2'
    compile 'io.reactivex:rxandroid:1.0.1'
</pre>
<p>Sync Gradle and add&nbsp;<code>addCallAdapterFactory</code>&nbsp;in Retrofit Builder chain like this:</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">        Retrofit retrofit = new Retrofit.Builder()
                .baseUrl(\"http://api.nuuneoi.com/base/\")
                .addConverterFactory(GsonConverterFactory.create())
                .addCallAdapterFactory(RxJavaCallAdapterFactory.create())
                .build();
</pre>
<p>Your Service interface is now able to return&nbsp;as&nbsp;<code>Observable&lt;T&gt;</code>!</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">public interface APIService {

    @POST(\"list\")
    Call&lt;DessertItemCollectionDao&gt; loadDessertList();

    @POST(\"list\")
    Observable&lt;DessertItemCollectionDao&gt; loadDessertListRx();

}
</pre>
<p>You can use it in the exact same RxJava way. In addition, if you want to let code inside subscribe part called on Main Thread, <code>observeOn(AndroidSchedulers.mainThread())</code>&nbsp;is needed to be added to&nbsp;the chain.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">        Observable&lt;DessertItemCollectionDao&gt; observable = service.loadDessertListRx();

        observable.subscribeOn(Schedulers.io())
            .observeOn(AndroidSchedulers.mainThread())
            .unsubscribeOn(Schedulers.io())
            .subscribe(new Subscriber&lt;DessertItemCollectionDao&gt;() {
                @Override
                public void onCompleted() {
                    Toast.makeText(getApplicationContext(),
                            \"Completed\",
                            Toast.LENGTH_SHORT)
                        .show();
                }

                @Override
                public void onError(Throwable e) {
                    Toast.makeText(getApplicationContext(),
                            e.getMessage(),
                            Toast.LENGTH_SHORT)
                        .show();
                }

                @Override
                public void onNext(DessertItemCollectionDao dessertItemCollectionDao) {
                    Toast.makeText(getApplicationContext(),
                            dessertItemCollectionDao.getData().get(0).getName(),
                            Toast.LENGTH_SHORT)
                        .show();
                }
            });</pre>
<p>Done ! I believe that&nbsp;RxJava fan is very satisfying with this change =D</p>
<h2 class=\"section-heading\">Conclusion</h2>
<p>There are also some other changes, you can check for the official <a href=\"https://github.com/square/retrofit/blob/master/CHANGELOG.md\" target=\"_blank\">Change Log</a>&nbsp;for more details. Anyway&nbsp;I believe that I have already covered the main issues in this article.</p>
<p>You may be curious that is it time to move to Retrofit 2.0 yet? Since it is still in the&nbsp;beta stage so you may want to stay with 1.9 first except you are an early adopter like me, Retrofit 2.0 works pretty&nbsp;great and there is no any bug found yet based on&nbsp;my own&nbsp;experiment.</p>
<p>Please note that Retrofit 1.9 official document was already removed from Square github website. I suggest you to start studying for Retrofit 2.0 right now and consider moving to the latest version in very near future.&nbsp;=D</p>			") (link nil "http://inthecheesefactory.com/blog/retrofit-2.0/en") (pubDate nil "
				Sun, 06 Sep 2015 05:33:00 +0000			") (guid nil "http://inthecheesefactory.com/blog/retrofit-2.0/en"))) ("Mirror android phone's screen and gain full control on computer with Vysor" "<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/blog/vysor/vysordone.jpg\" /></p>
<p>Looking for a tool that could mirror non-rooted android phone's screen and allow user to gain a full control on&nbsp;computer? Here is a good news. A new wonderful just-released application called Vysor could do the job for you! I gave it a try already and I must say that I am quite impressive on what it can do.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/vysor/vysordone.jpg\" alt=\"\" /></p>
<p>First of all, Vysor is a Chrome Application so you need to install&nbsp;<a href=\"http://www.google.com/chrome/\" target=\"_blank\">Google Chrome</a>&nbsp;first before going on.</p>
<p>Next, just&nbsp;simply install&nbsp;<a href=\"https://chrome.google.com/webstore/detail/vysor-beta/gidgenkbbabolejbgbpnhbimgjbffefm\" target=\"_blank\">Vysor Chrome Extensions</a>.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/vysor/vysorextensions_1.jpg\" alt=\"\" width=\"560\" height=\"355\" /></p>
<p>Press Launch App and then&nbsp;Vysor&nbsp;will appear. Please note that its look and its workflow might be different by platform.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/vysor/vysorbeta.jpg\" alt=\"\" width=\"560\" height=\"448\" /></p>
<p>Now pick your phone up and enable <a href=\"http://www.kingoapp.com/root-tutorials/how-to-enable-usb-debugging-mode-on-android.htm\" target=\"_blank\">USB Debugging</a>&nbsp;since phone and computer needs ADB for communication.</p>
<p><strong>Find Devices</strong>&nbsp;and choose one that appear.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/vysor/finddevices.jpg\" alt=\"\" width=\"560\" height=\"498\" /></p>
<p>If your phone pop up a dialog like below. Press OK to allow USB Debugging. If you accidentally press Cancel, just remove and plug a USB cable once again.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/vysor/allow.jpg\" alt=\"\" width=\"600\" height=\"600\" /></p>
<p>If your phone ask you to install an application called Vysor, do it. Wait for some second and your phone screen will appear on&nbsp;Vysor ... Done!</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/vysor/vysordone.jpg\" alt=\"\" width=\"783\" height=\"462\" /></p>
<p>You can control everything through your computer screen with Keyboard and Mouse: <strong>Left Click = Click</strong>, <strong>Right Click = Back</strong> and <strong>Middle Click = Home</strong></p>
<p>From the experiment I found that framerate is not so high,&nbsp;there is still&nbsp;some delay and image&nbsp;will lose the&nbsp;quality if screen's details are&nbsp;changed too much&nbsp;before getting better&nbsp;within few seconds. Although it is not perfect but I must say that it is good enough for real use.</p>
<p>However I found that it is pretty useful. And since it is a Chrome Application so it could be installed on any platform such as Windows, Mac OS X, Linux and also Chromebook. Please give it a try. It worths time spent. =D</p>" "http://inthecheesefactory.com/blog/mirror-android-phone-screen-gain-full-control-with-vysor/en" (21982 65168) old 10 nil nil ((title nil "
				Mirror android phone's screen and gain full control on computer with Vysor			") (description nil "
				<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/blog/vysor/vysordone.jpg\" /></p> 
<p>Looking for a tool that could mirror non-rooted android phone's screen and allow user to gain a full control on&nbsp;computer? Here is a good news. A new wonderful just-released application called Vysor could do the job for you! I gave it a try already and I must say that I am quite impressive on what it can do.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/vysor/vysordone.jpg\" alt=\"\" /></p>
<p>First of all, Vysor is a Chrome Application so you need to install&nbsp;<a href=\"http://www.google.com/chrome/\" target=\"_blank\">Google Chrome</a>&nbsp;first before going on.</p>
<p>Next, just&nbsp;simply install&nbsp;<a href=\"https://chrome.google.com/webstore/detail/vysor-beta/gidgenkbbabolejbgbpnhbimgjbffefm\" target=\"_blank\">Vysor Chrome Extensions</a>.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/vysor/vysorextensions_1.jpg\" alt=\"\" width=\"560\" height=\"355\" /></p>
<p>Press Launch App and then&nbsp;Vysor&nbsp;will appear. Please note that its look and its workflow might be different by platform.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/vysor/vysorbeta.jpg\" alt=\"\" width=\"560\" height=\"448\" /></p>
<p>Now pick your phone up and enable <a href=\"http://www.kingoapp.com/root-tutorials/how-to-enable-usb-debugging-mode-on-android.htm\" target=\"_blank\">USB Debugging</a>&nbsp;since phone and computer needs ADB for communication.</p>
<p><strong>Find Devices</strong>&nbsp;and choose one that appear.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/vysor/finddevices.jpg\" alt=\"\" width=\"560\" height=\"498\" /></p>
<p>If your phone pop up a dialog like below. Press OK to allow USB Debugging. If you accidentally press Cancel, just remove and plug a USB cable once again.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/vysor/allow.jpg\" alt=\"\" width=\"600\" height=\"600\" /></p>
<p>If your phone ask you to install an application called Vysor, do it. Wait for some second and your phone screen will appear on&nbsp;Vysor ... Done!</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/vysor/vysordone.jpg\" alt=\"\" width=\"783\" height=\"462\" /></p>
<p>You can control everything through your computer screen with Keyboard and Mouse: <strong>Left Click = Click</strong>, <strong>Right Click = Back</strong> and <strong>Middle Click = Home</strong></p>
<p>From the experiment I found that framerate is not so high,&nbsp;there is still&nbsp;some delay and image&nbsp;will lose the&nbsp;quality if screen's details are&nbsp;changed too much&nbsp;before getting better&nbsp;within few seconds. Although it is not perfect but I must say that it is good enough for real use.</p>
<p>However I found that it is pretty useful. And since it is a Chrome Application so it could be installed on any platform such as Windows, Mac OS X, Linux and also Chromebook. Please give it a try. It worths time spent. =D</p>			") (link nil "http://inthecheesefactory.com/blog/mirror-android-phone-screen-gain-full-control-with-vysor/en") (pubDate nil "
				Thu, 27 Aug 2015 12:12:00 +0000			") (guid nil "http://inthecheesefactory.com/blog/mirror-android-phone-screen-gain-full-control-with-vysor/en"))) ("Everything every Android Developer must know about new Android's Runtime Permission" "<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/blog/mpermission/coverpermission.jpg\" /></p>
<p>Android M's name was just announced officially days ago. The final version is almost there&nbsp;and would be released not so long.</p>
<p>Although Android is being keep developed&nbsp;but the latest update to Android M is totally different since there is some major change that would change everything like new <strong>Runtime Permission</strong>. Surprisingly it is not much talked about in Android Developer community even though it is extremely important and may cause some&nbsp;big trouble in the near future.</p>
<p>That's the reason why I&nbsp;decide to blog about this topic today. Everything you need&nbsp;to know about this new Runtime Permission including how to implement it in your code. Let's do it before it's too late.</p>
<h2 class=\"section-heading\">The New Runtime Permission</h2>
<p>Android's permission system is one of the biggest security concern all along since those permissions are&nbsp;asked for at install time. Once installed, the application will be able to access all of things granted without any user's acknowledgement what exactly application does with the permission.</p>
<p>No surprise why there are so many bad guys trying to collect user's personal data through this security weakness and use it in the bad way.</p>
<p>Android team also know&nbsp;this concern. 7 year passed, finally permission system is redesigned. <strong><span style=\"color: #c0392b;\">In Android 6.0 Marshmallow, application will not be granted any permission at installation time. Instead, application has to ask user for a permission one-by-one at runtime.</span></strong></p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/mpermission/runtimepermission.jpg\" alt=\"\" width=\"784\" height=\"457\" /></p>
<p>Please note that permission request dialog shown above will <em>not</em>&nbsp;launch automatically. Developer has to call for it manually. In the case that developer&nbsp;try to call some function&nbsp;that requires a permission which&nbsp;user has not granted yet, the function&nbsp;will suddenly throw an Exception which will lead to the application crashing.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/mpermission/runtimepermissioncrash.jpg\" alt=\"\" width=\"784\" height=\"457\" /></p>
<p>Besides, user is also&nbsp;able to revoke the granted permission anytime through phone's Settings application.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/mpermission/permissionsrevoke.jpg\" alt=\"\" width=\"510\" height=\"510\" /></p>
<p>You might already feel like there is some cold wind blowing through your arms ... If you are an Android Developer, you will suddenly know that programming logic is totally changed. You cannot just call a function to do the job like previous but you have to check for the permission for every single feature or your application will just simply crash !</p>
<p>Correct. I would not spoil you that it is easy. Although it is a great thing&nbsp;for user but it is truly nightmare for us developer. We have to take coding to the next level or it will surely have a problem in both short-term and long-term.</p>
<p>Anyway this new Runtime Permission will work like described only when we set the application's <strong>targetSdkVersion to 23</strong> which mean it is declared that application&nbsp;has already been tested on API Level 23. And this feature will work only on Android 6.0 Marshmallow. The same app will run with same old behavior on pre-Marshmallow device.</p>
<h2 class=\"section-heading\">What happened to the application that has already been launched?</h2>
<p>This new permission system may cause you some panic right now. <strong>\"Hey ! What's about my application that launched 3 years ago. If it is installed on Android 6.0 device, does this behavior also applied? Will&nbsp;my application also crash?!?\"</strong></p>
<p>Don't worry. Android team has already thought about it. <strong>If the application's targetSdkVersion is set to less than 23. It will be assumed that application is not tested with new&nbsp;permission system yet and will switch to the same old behavior: user has to accept every single permission at install time and they will be all granted once installed !</strong></p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/mpermission/mpermission22_1.jpg\" alt=\"\" width=\"510\" height=\"510\" /></p>
<p>As a result, application will run perfectly like&nbsp;previous. <strong>Anyway&nbsp;please note that user still can revoke a permission after that !</strong>&nbsp;Although&nbsp;Android 6.0 warn the user&nbsp;when they try to do that but they can revoke anyway.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/mpermission/mpermission22denyperm_1.jpg\" alt=\"\" width=\"510\" height=\"510\" /></p>
<p>Next question in your head right now. So will my application crash?</p>
<p><span style=\"color: #2980b9;\">Such a kindness sent from god delivered through the Android team. When we call a function that requires a permission user revoked on application with&nbsp;targetSdkVersion less than 23, no any&nbsp;Exception will be thrown. Instead it will just simply do nothing. For the function that return value, it will return either <span style=\"text-decoration: underline;\">null</span> or <span style=\"text-decoration: underline;\">0</span>&nbsp;depends on the case.</span></p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/mpermission/targetsdkversion2223.jpg\" alt=\"\" width=\"784\" height=\"417\" /></p>
<p>But don't be too happy. Although application would not be crashed from calling a function. It may still can&nbsp;crash from what&nbsp;that application&nbsp;does next with those returned value.</p>
<p>Good news&nbsp;(at least for now)&nbsp;is these cases may rarely occur since this permission revoking feature is quite new and I believe that just few user will&nbsp;do it. In case they do, they have to accept the result.</p>
<p>But in the long run, I believe that there will be millions of users who&nbsp;turn some permission off. Letting our application not to work&nbsp;perfectly on new device is not acceptable.</p>
<p>To make it work perfectly, you&nbsp;better modify your&nbsp;application to support this new permission system and I suggest you to start&nbsp;doing it right now !</p>
<p>For that&nbsp;application which source code is not successfully modified to support Runtime Permission, DO NOT release it&nbsp;with targetSdkVersion 23 or it will cause you a trouble. Move the targetSdkVersion to 23 only when you pass all the test.</p>
<p><span style=\"color: #d35400;\"><em>Warning: Right now when you create a new project in Android Studio. targetSdkVersion will be automatically set to the latest version, 23. If you are not ready to make your application fully support the Runtime Permission, I suggest you to step down&nbsp;the targetSdkVersion to 22 first.</em></span></p>
<h2 class=\"section-heading\">Automatically granted permissions</h2>
<p>There is some permission that will be automatically granted at install time and will not be able to revoke. We call it <a href=\"https://developer.android.com/preview/features/runtime-permissions.html#normal\" target=\"_blank\">Normal Permission</a> (PROTECTION_NORMAL). Here is the full list of them:</p>
<p style=\"padding-left: 30px;\"><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.ACCESS_LOCATION_EXTRA_COMMANDS</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.ACCESS_NETWORK_STATE</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.ACCESS_NOTIFICATION_POLICY</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.ACCESS_WIFI_STATE</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.ACCESS_WIMAX_STATE</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.BLUETOOTH</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.BLUETOOTH_ADMIN</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.BROADCAST_STICKY</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.CHANGE_NETWORK_STATE</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.CHANGE_WIFI_MULTICAST_STATE</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.CHANGE_WIFI_STATE</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.CHANGE_WIMAX_STATE</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.DISABLE_KEYGUARD</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.EXPAND_STATUS_BAR</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.FLASHLIGHT</span><br /><span style=\"text-decoration: line-through;\"><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085; text-decoration: line-through;\">android.permission.GET_ACCOUNTS</span></span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.GET_PACKAGE_SIZE</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.INTERNET</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.KILL_BACKGROUND_PROCESSES</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.MODIFY_AUDIO_SETTINGS</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.NFC</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.READ_SYNC_SETTINGS</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.READ_SYNC_STATS</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.RECEIVE_BOOT_COMPLETED</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.REORDER_TASKS</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.REQUEST_INSTALL_PACKAGES</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.SET_TIME_ZONE</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.SET_WALLPAPER</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.SET_WALLPAPER_HINTS</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.SUBSCRIBED_FEEDS_READ</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.TRANSMIT_IR</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.USE_FINGERPRINT</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.VIBRATE</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.WAKE_LOCK</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.WRITE_SYNC_SETTINGS</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">com.android.alarm.permission.SET_ALARM</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">com.android.launcher.permission.INSTALL_SHORTCUT</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">com.android.launcher.permission.UNINSTALL_SHORTCUT</span></p>
<p>Just simply declare those permissions in <code>AndroidManifest.xml</code>&nbsp;and it will work just fine. No need to check for the permission listed above since it&nbsp;couldn't be revoked.</p>
<h2 class=\"section-heading\">Make your application&nbsp;support new Runtime Permission</h2>
<p>Now it's time to make our application support new Runtime Permission perfectly. Start with setting <code>compileSdkVersion</code>&nbsp;and&nbsp;<code>targetSdkVersion</code>&nbsp;to 23.</p>
<pre class=\"brush:groovy;auto-links:false;toolbar:false\" contenteditable=\"false\">android {
compileSdkVersion 23
...
defaultConfig {
...
targetSdkVersion 23
...
}</pre>
<p>In this example, we try to add a contact with a function below.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    private static final String TAG = \"Contacts\";
private void insertDummyContact() {
// Two operations are needed to insert a new contact.
ArrayList&lt;ContentProviderOperation&gt; operations = new ArrayList&lt;ContentProviderOperation&gt;(2);
// First, set up a new raw contact.
ContentProviderOperation.Builder op =
ContentProviderOperation.newInsert(ContactsContract.RawContacts.CONTENT_URI)
.withValue(ContactsContract.RawContacts.ACCOUNT_TYPE, null)
.withValue(ContactsContract.RawContacts.ACCOUNT_NAME, null);
operations.add(op.build());
// Next, set the name for the contact.
op = ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)
.withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0)
.withValue(ContactsContract.Data.MIMETYPE,
ContactsContract.CommonDataKinds.StructuredName.CONTENT_ITEM_TYPE)
.withValue(ContactsContract.CommonDataKinds.StructuredName.DISPLAY_NAME,
\"__DUMMY CONTACT from runtime permissions sample\");
operations.add(op.build());
// Apply the operations.
ContentResolver resolver = getContentResolver();
try {
resolver.applyBatch(ContactsContract.AUTHORITY, operations);
} catch (RemoteException e) {
Log.d(TAG, \"Could not add a new contact: \" + e.getMessage());
} catch (OperationApplicationException e) {
Log.d(TAG, \"Could not add a new contact: \" + e.getMessage());
}
}</pre>
<p>The above code requires <code>WRITE_CONTACTS</code> permission. If it is called without this permission granted, application will suddenly crash.</p>
<p>Next step is to add a permission into&nbsp;<code>AndroidManifest.xml</code>&nbsp;with same old method.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;uses-permission android:name=\"android.permission.WRITE_CONTACTS\"/&gt;</pre>
<p>Next step is&nbsp;we have to create another function to check that&nbsp;permission is granted or not. If it isn't&nbsp;then&nbsp;call a dialog to ask user for a permission. Otherwise, you can go on the next step, creating a new contact.</p>
<p>Permissions&nbsp;are&nbsp;grouped into <strong>Permission Group</strong> like table below.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/mpermission/permgroup.png\" alt=\"\" width=\"639\" height=\"802\" /></p>
<p>If any permission in a Permission Group is granted. Another permission in the same group will be automatically granted as well. In this case, once <code>WRITE_CONTACTS</code> is granted, application will also grant <code>READ_CONTACTS</code> and <code>GET_ACCOUNTS</code>.</p>
<p>Source code used to check and ask for permission is <strong>Activity's</strong> <code>checkSelfPermission</code> and <code>requestPermissions</code> respectively. These methods are added in API Level 23.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    final private int REQUEST_CODE_ASK_PERMISSIONS = 123;
private void insertDummyContactWrapper() {
int hasWriteContactsPermission = checkSelfPermission(Manifest.permission.WRITE_CONTACTS);
if (hasWriteContactsPermission != PackageManager.PERMISSION_GRANTED) {
requestPermissions(new String[] {Manifest.permission.WRITE_CONTACTS},
REQUEST_CODE_ASK_PERMISSIONS);
return;
}
insertDummyContact();
}</pre>
<p>If permission has already been granted, <code>insertDummyContact()</code> will be suddenly called. Otherwise, <code>requestPermissions</code> will be called&nbsp;to launch a permission request dialog like below.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/mpermission/requestpermission.jpg\" alt=\"\" width=\"510\" height=\"510\" /></p>
<p>No matter&nbsp;Allow or Deny is chosen, Activity's <code>onRequestPermissionsResult</code> will always be called to inform a result which we can check from&nbsp;the 3rd parameter, <code>grantResults</code>, like this:</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    @Override
public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
switch (requestCode) {
case REQUEST_CODE_ASK_PERMISSIONS:
if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
// Permission Granted
insertDummyContact();
} else {
// Permission Denied
Toast.makeText(MainActivity.this, \"WRITE_CONTACTS Denied\", Toast.LENGTH_SHORT)
.show();
}
break;
default:
super.onRequestPermissionsResult(requestCode, permissions, grantResults);
}
}
</pre>
<p>This is how Runtime Permission works. Code is quite complicated but be used to&nbsp;it ... To make you application works perfectly with Runtime Permission, you have to handle all the case with the same method shown above.</p>
<p>If you want to punch some wall, it is a good time now ...</p>
<h2 class=\"section-heading\">Handle \"Never Ask Again\"</h2>
<p>If user denied a permission. In the second launch, user will get a <strong>\"Never ask again\"</strong> option to prevent application from asking this permission in the future.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/mpermission/neveraskagain.jpg\" alt=\"\" width=\"510\" height=\"510\" /></p>
<p>If this option is checked before denying. Next time we call <code>requestPermissions</code>, this dialog will not be appeared for this kind of permission anymore. Instead, it just does nothing.</p>
<p>However it is quite bad in term of UX if user does something but there is nothing interact back. This case has to be handled as well. Before calling <code>requestPermissions</code>, we need to check that&nbsp;should we show a rationale about why application needs the being-requested permission through Activity's&nbsp;<code>shouldShowRequestPermissionRationale</code>&nbsp;method. Source code will now look like this:</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    final private int REQUEST_CODE_ASK_PERMISSIONS = 123;
private void insertDummyContactWrapper() {
int hasWriteContactsPermission = checkSelfPermission(Manifest.permission.WRITE_CONTACTS);
if (hasWriteContactsPermission != PackageManager.PERMISSION_GRANTED) {
if (!shouldShowRequestPermissionRationale(Manifest.permission.WRITE_CONTACTS)) {
showMessageOKCancel(\"You need to allow access to Contacts\",
new DialogInterface.OnClickListener() {
@Override
public void onClick(DialogInterface dialog, int which) {
requestPermissions(new String[] {Manifest.permission.WRITE_CONTACTS},
REQUEST_CODE_ASK_PERMISSIONS);
}
});
return;
}
requestPermissions(new String[] {Manifest.permission.WRITE_CONTACTS},
REQUEST_CODE_ASK_PERMISSIONS);
return;
}
insertDummyContact();
}
private void showMessageOKCancel(String message, DialogInterface.OnClickListener okListener) {
new AlertDialog.Builder(MainActivity.this)
.setMessage(message)
.setPositiveButton(\"OK\", okListener)
.setNegativeButton(\"Cancel\", null)
.create()
.show();
}</pre>
<p>The result are rational dialog will be shown when <span style=\"text-decoration: underline;\">this permission is requested for the first time</span> and also be shown <span style=\"text-decoration: underline;\">if user has ever marked that permission as Never ask again</span>. For the latter case, <code>onRequestPermissionsResult</code> will be called with <code>PERMISSION_DENIED</code> without any permission grant dialog.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/mpermission/rationaledialog.jpg\" alt=\"\" width=\"510\" height=\"510\" /></p>
<p>Done !</p>
<h2 class=\"section-heading\">Asking for multiple permissions&nbsp;at a time</h2>
<p>There is definitely some feature that requires more than one permission. You could request for multiple permissions at a time with same method as above. Anyway don't forget to check the 'Never ask again' case for every single permission as well.</p>
<p>Here is&nbsp;the revised code.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    final private int REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS = 124;
private void insertDummyContactWrapper() {
List&lt;String&gt; permissionsNeeded = new ArrayList&lt;String&gt;();
final List&lt;String&gt; permissionsList = new ArrayList&lt;String&gt;();
if (!addPermission(permissionsList, Manifest.permission.ACCESS_FINE_LOCATION))
permissionsNeeded.add(\"GPS\");
if (!addPermission(permissionsList, Manifest.permission.READ_CONTACTS))
permissionsNeeded.add(\"Read Contacts\");
if (!addPermission(permissionsList, Manifest.permission.WRITE_CONTACTS))
permissionsNeeded.add(\"Write Contacts\");
if (permissionsList.size() &gt; 0) {
if (permissionsNeeded.size() &gt; 0) {
// Need Rationale
String message = \"You need to grant access to \" + permissionsNeeded.get(0);
for (int i = 1; i &lt; permissionsNeeded.size(); i++)
message = message + \", \" + permissionsNeeded.get(i);
showMessageOKCancel(message,
new DialogInterface.OnClickListener() {
@Override
public void onClick(DialogInterface dialog, int which) {
requestPermissions(permissionsList.toArray(new String[permissionsList.size()]),
REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS);
}
});
return;
}
requestPermissions(permissionsList.toArray(new String[permissionsList.size()]),
REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS);
return;
}
insertDummyContact();
}
private boolean addPermission(List&lt;String&gt; permissionsList, String permission) {
if (checkSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {
permissionsList.add(permission);
// Check for Rationale Option
if (!shouldShowRequestPermissionRationale(permission))
return false;
}
return true;
}
</pre>
<p>When every single permission got its grant result, the result will be sent to the same callback method,&nbsp;<code>onRequestPermissionsResult</code>. I use HashMap to make source code&nbsp;looks cleaner and more readable.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    @Override
public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
switch (requestCode) {
case REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS:
{
Map&lt;String, Integer&gt; perms = new HashMap&lt;String, Integer&gt;();
// Initial
perms.put(Manifest.permission.ACCESS_FINE_LOCATION, PackageManager.PERMISSION_GRANTED);
perms.put(Manifest.permission.READ_CONTACTS, PackageManager.PERMISSION_GRANTED);
perms.put(Manifest.permission.WRITE_CONTACTS, PackageManager.PERMISSION_GRANTED);
// Fill with results
for (int i = 0; i &lt; permissions.length; i++)
perms.put(permissions[i], grantResults[i]);
// Check for ACCESS_FINE_LOCATION
if (perms.get(Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED
&amp;&amp; perms.get(Manifest.permission.READ_CONTACTS) == PackageManager.PERMISSION_GRANTED
&amp;&amp; perms.get(Manifest.permission.WRITE_CONTACTS) == PackageManager.PERMISSION_GRANTED) {
// All Permissions Granted
insertDummyContact();
} else {
// Permission Denied
Toast.makeText(MainActivity.this, \"Some Permission is Denied\", Toast.LENGTH_SHORT)
.show();
}
}
break;
default:
super.onRequestPermissionsResult(requestCode, permissions, grantResults);
}
}
</pre>
<p>The condition is flexible. You have to set it by your own. In some case, if even one permission is not granted, that feature will be just simply disabled. But in some case, it will still work but with limited feature. There is no suggestion from me. It is all by&nbsp;your design.</p>
<h2 class=\"section-heading\">Use Support Library&nbsp;to make code forward-compatible</h2>
<p><span style=\"color: #c0392b;\">Although the code above works perfectly on Android 6.0 Marshmallow. Unfortunate that it will crash on Android pre-Marshmallow since those functions called are added in&nbsp;API Level 23.</span></p>
<p>The straight way is you can check Build Version with code below.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">        if (Build.VERSION.SDK_INT &gt;= 23) {
// Marshmallow+
} else {
// Pre-Marshmallow
}
</pre>
<p>But code will be even more complicated. So I suggest you to use some help from <span style=\"text-decoration: underline;\"><strong>Support Library v4</strong></span> which is already prepared for this thing. Replace those functions with these:</p>
<p style=\"padding-left: 30px;\"><span style=\"color: #2980b9;\">-&nbsp;<span style=\"font-size: 12pt;\"><strong><span style=\"font-family: 'courier new', courier, monospace;\">ContextCompat.checkSelfPermission()</span></strong></span></span></p>
<p style=\"padding-left: 30px;\">No matter&nbsp;application is run on M or not. This function will correctly return <code>PERMISSION_GRANTED</code> if the permission is granted. Otherwise&nbsp;<code>PERMISSION_DENIED</code> will be returned.</p>
<p style=\"padding-left: 30px;\"><span style=\"color: #2980b9;\">-&nbsp;<span style=\"font-size: 12pt;\"><strong><span style=\"font-family: 'courier new', courier, monospace;\">ActivityCompat.requestPermissions()</span></strong></span></span></p>
<p style=\"padding-left: 30px;\">If this function is called on pre-M, OnRequestPermissionsResultCallback will be suddenly called with correct&nbsp;<code>PERMISSION_GRANTED</code>&nbsp;or&nbsp;<code>PERMISSION_DENIED</code>&nbsp;result.</p>
<p style=\"padding-left: 30px;\"><span style=\"color: #2980b9;\">-<span style=\"font-size: 12pt;\"> <strong><span style=\"font-family: 'courier new', courier, monospace;\">ActivityCompat.shouldShowRequestPermissionRationale()&nbsp;</span></strong></span></span></p>
<p style=\"padding-left: 30px;\">If this function is called on pre-M,&nbsp;it will always return <code>false</code>.</p>
<p><strong><span style=\"text-decoration: underline;\">ALWAYS&nbsp;replace Activity's&nbsp;<code>checkSelfPermission</code>, <code>requestPermissions</code> and&nbsp;<code>shouldShowRequestPermissionRationale</code>&nbsp;with these functions from Support Library v4.</span></strong>&nbsp;And your application will work perfectly find on any Android version with same code logic. Please note that these functions require some additional parameter: Context or Activity. Nothing special to do, just pass what it wants correctly. Here is what source code will look like.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    private void insertDummyContactWrapper() {
int hasWriteContactsPermission = ContextCompat.checkSelfPermission(MainActivity.this,
Manifest.permission.WRITE_CONTACTS);
if (hasWriteContactsPermission != PackageManager.PERMISSION_GRANTED) {
if (!ActivityCompat.shouldShowRequestPermissionRationale(MainActivity.this,
Manifest.permission.WRITE_CONTACTS)) {
showMessageOKCancel(\"You need to allow access to Contacts\",
new DialogInterface.OnClickListener() {
@Override
public void onClick(DialogInterface dialog, int which) {
ActivityCompat.requestPermissions(MainActivity.this,
new String[] {Manifest.permission.WRITE_CONTACTS},
REQUEST_CODE_ASK_PERMISSIONS);
}
});
return;
}
ActivityCompat.requestPermissions(MainActivity.this,
new String[] {Manifest.permission.WRITE_CONTACTS},
REQUEST_CODE_ASK_PERMISSIONS);
return;
}
insertDummyContact();
}
</pre>
<p>These methods are also available in Fragment from Android Support Library v4. So please feel free to move these logics into the Fragment.</p>
<h2 class=\"section-heading\">Shorten source code with 3rd Party Library</h2>
<p>You will notice that code is quite complicated. No surprise, there are quite many of 3rd party libraries out there trying to solve this big thing. I gave a try with quite a lot of them and finally&nbsp;found one that satisfy me. It is hotchemi's&nbsp;<a href=\"http://hotchemi.github.io/PermissionsDispatcher/\" target=\"_blank\">PermissionsDispatcher</a>.</p>
<p>What is does it exactly the same as I described above but just with shorter and cleaner code. Surely with some trade-off with flexibility. Please give it a try and see if it could be applied in&nbsp;your application. If it couldn't, you can go on the direct way which is also my choice right now.</p>
<h2 class=\"section-heading\">What will happen if&nbsp;permission is revoked while application is opened?</h2>
<p>As mentioned above, a permission can be revoked anytime through phone's Settings.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/mpermission/permissionsrevoke.jpg\" alt=\"\" width=\"510\" height=\"510\" /></p>
<p>So what will happen if permission is revoked when application is opened? I have already given it a try and found that <span style=\"text-decoration: underline;\">application's process is suddenly terminated</span>. Everything inside application just simply stopped (since it is already terminated ...). It sounds make sense to me anyway since if OS allows the application to go on its process, it may summon Freddy to my&nbsp;nightmare. I mean even worse&nbsp;nightmare than currently is ...</p>
<h2 class=\"section-heading\">Conclusion and Suggestion</h2>
<p>I believe that you see&nbsp;the big picture of this new permission system quite clear right now. And I believe that you also see how big issue it is.</p>
<p>However you have no choice. Runtime Permission is already used in Android Marshmallow. We are at the point of no return. Only thing we could do right now is to make our application fully support this new permission system.</p>
<p>Good news is there are only few permission that requires Runtime Permission flow. Most of the frequently-used permissions, for example, INTERNET,&nbsp;are in <a href=\"https://developer.android.com/preview/features/runtime-permissions.html#normal\" target=\"_blank\">Normal Permission</a> are automatically granted and you have no need to do anything with them. In conclusion, there are just few part of code that you need to modify.</p>
<p>There are two suggestions to you all:</p>
<p style=\"padding-left: 30px;\">1)&nbsp;Make Runtime Permission support an urgent&nbsp;issue</p>
<p style=\"padding-left: 30px;\">2) Don't set application's targetSdkVersion to 23 if your code is not yet supported Runtime Permission. Especially when you create a new project from Android Studio, don't forget to take a look at build.gradle everytime for targetSdkVersion !</p>
<p>Talk about source code modification, I must admit that it is quite a big thing. If code structure is not designed good enough, you may need some serious reconstruction which will surely take some time. Or at least I believe that source code need to be refactored for every single application. Anyway like I said above, we have no choice ...</p>
<p>In the man time, since permission concept is turned upside down. Right now if some permission is not granted, your application need to still be able to work with limited feature. So I suggest you to list all the feature that related to permission you requested. And write down all the case possible, if permission A is granted but permission B is denied, what will happen. Blah blah blah.</p>
<p>Good luck with your code refactoring. Mark&nbsp;it as urgent in your to-do list and start do it today so it will contains no problem on the day Android M is publicly launched.</p>
<p>Hope you find this article helpful and Happy Coding !</p>
<p>More details are available <a href=\"https://developer.android.com/preview/features/runtime-permissions.html\" target=\"_blank\">here</a>.</p>" "http://inthecheesefactory.com/blog/things-you-need-to-know-about-android-m-permission-developer-edition/en" (21980 59680) old 11 nil nil ((title nil "
				Everything every Android Developer must know about new Android's Runtime Permission			") (description nil "
				<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/blog/mpermission/coverpermission.jpg\" /></p> 
<p>Android M's name was just announced officially days ago. The final version is almost there&nbsp;and would be released not so long.</p>
<p>Although Android is being keep developed&nbsp;but the latest update to Android M is totally different since there is some major change that would change everything like new <strong>Runtime Permission</strong>. Surprisingly it is not much talked about in Android Developer community even though it is extremely important and may cause some&nbsp;big trouble in the near future.</p>
<p>That's the reason why I&nbsp;decide to blog about this topic today. Everything you need&nbsp;to know about this new Runtime Permission including how to implement it in your code. Let's do it before it's too late.</p>
<h2 class=\"section-heading\">The New Runtime Permission</h2>
<p>Android's permission system is one of the biggest security concern all along since those permissions are&nbsp;asked for at install time. Once installed, the application will be able to access all of things granted without any user's acknowledgement what exactly application does with the permission.</p>
<p>No surprise why there are so many bad guys trying to collect user's personal data through this security weakness and use it in the bad way.</p>
<p>Android team also know&nbsp;this concern. 7 year passed, finally permission system is redesigned. <strong><span style=\"color: #c0392b;\">In Android 6.0 Marshmallow, application will not be granted any permission at installation time. Instead, application has to ask user for a permission one-by-one at runtime.</span></strong></p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/mpermission/runtimepermission.jpg\" alt=\"\" width=\"784\" height=\"457\" /></p>
<p>Please note that permission request dialog shown above will <em>not</em>&nbsp;launch automatically. Developer has to call for it manually. In the case that developer&nbsp;try to call some function&nbsp;that requires a permission which&nbsp;user has not granted yet, the function&nbsp;will suddenly throw an Exception which will lead to the application crashing.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/mpermission/runtimepermissioncrash.jpg\" alt=\"\" width=\"784\" height=\"457\" /></p>
<p>Besides, user is also&nbsp;able to revoke the granted permission anytime through phone's Settings application.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/mpermission/permissionsrevoke.jpg\" alt=\"\" width=\"510\" height=\"510\" /></p>
<p>You might already feel like there is some cold wind blowing through your arms ... If you are an Android Developer, you will suddenly know that programming logic is totally changed. You cannot just call a function to do the job like previous but you have to check for the permission for every single feature or your application will just simply crash !</p>
<p>Correct. I would not spoil you that it is easy. Although it is a great thing&nbsp;for user but it is truly nightmare for us developer. We have to take coding to the next level or it will surely have a problem in both short-term and long-term.</p>
<p>Anyway this new Runtime Permission will work like described only when we set the application's <strong>targetSdkVersion to 23</strong> which mean it is declared that application&nbsp;has already been tested on API Level 23. And this feature will work only on Android 6.0 Marshmallow. The same app will run with same old behavior on pre-Marshmallow device.</p>
<h2 class=\"section-heading\">What happened to the application that has already been launched?</h2>
<p>This new permission system may cause you some panic right now. <strong>\"Hey ! What's about my application that launched 3 years ago. If it is installed on Android 6.0 device, does this behavior also applied? Will&nbsp;my application also crash?!?\"</strong></p>
<p>Don't worry. Android team has already thought about it. <strong>If the application's targetSdkVersion is set to less than 23. It will be assumed that application is not tested with new&nbsp;permission system yet and will switch to the same old behavior: user has to accept every single permission at install time and they will be all granted once installed !</strong></p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/mpermission/mpermission22_1.jpg\" alt=\"\" width=\"510\" height=\"510\" /></p>
<p>As a result, application will run perfectly like&nbsp;previous. <strong>Anyway&nbsp;please note that user still can revoke a permission after that !</strong>&nbsp;Although&nbsp;Android 6.0 warn the user&nbsp;when they try to do that but they can revoke anyway.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/mpermission/mpermission22denyperm_1.jpg\" alt=\"\" width=\"510\" height=\"510\" /></p>
<p>Next question in your head right now. So will my application crash?</p>
<p><span style=\"color: #2980b9;\">Such a kindness sent from god delivered through the Android team. When we call a function that requires a permission user revoked on application with&nbsp;targetSdkVersion less than 23, no any&nbsp;Exception will be thrown. Instead it will just simply do nothing. For the function that return value, it will return either <span style=\"text-decoration: underline;\">null</span> or <span style=\"text-decoration: underline;\">0</span>&nbsp;depends on the case.</span></p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/mpermission/targetsdkversion2223.jpg\" alt=\"\" width=\"784\" height=\"417\" /></p>
<p>But don't be too happy. Although application would not be crashed from calling a function. It may still can&nbsp;crash from what&nbsp;that application&nbsp;does next with those returned value.</p>
<p>Good news&nbsp;(at least for now)&nbsp;is these cases may rarely occur since this permission revoking feature is quite new and I believe that just few user will&nbsp;do it. In case they do, they have to accept the result.</p>
<p>But in the long run, I believe that there will be millions of users who&nbsp;turn some permission off. Letting our application not to work&nbsp;perfectly on new device is not acceptable.</p>
<p>To make it work perfectly, you&nbsp;better modify your&nbsp;application to support this new permission system and I suggest you to start&nbsp;doing it right now !</p>
<p>For that&nbsp;application which source code is not successfully modified to support Runtime Permission, DO NOT release it&nbsp;with targetSdkVersion 23 or it will cause you a trouble. Move the targetSdkVersion to 23 only when you pass all the test.</p>
<p><span style=\"color: #d35400;\"><em>Warning: Right now when you create a new project in Android Studio. targetSdkVersion will be automatically set to the latest version, 23. If you are not ready to make your application fully support the Runtime Permission, I suggest you to step down&nbsp;the targetSdkVersion to 22 first.</em></span></p>
<h2 class=\"section-heading\">Automatically granted permissions</h2>
<p>There is some permission that will be automatically granted at install time and will not be able to revoke. We call it <a href=\"https://developer.android.com/preview/features/runtime-permissions.html#normal\" target=\"_blank\">Normal Permission</a> (PROTECTION_NORMAL). Here is the full list of them:</p>
<p style=\"padding-left: 30px;\"><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.ACCESS_LOCATION_EXTRA_COMMANDS</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.ACCESS_NETWORK_STATE</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.ACCESS_NOTIFICATION_POLICY</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.ACCESS_WIFI_STATE</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.ACCESS_WIMAX_STATE</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.BLUETOOTH</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.BLUETOOTH_ADMIN</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.BROADCAST_STICKY</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.CHANGE_NETWORK_STATE</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.CHANGE_WIFI_MULTICAST_STATE</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.CHANGE_WIFI_STATE</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.CHANGE_WIMAX_STATE</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.DISABLE_KEYGUARD</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.EXPAND_STATUS_BAR</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.FLASHLIGHT</span><br /><span style=\"text-decoration: line-through;\"><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085; text-decoration: line-through;\">android.permission.GET_ACCOUNTS</span></span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.GET_PACKAGE_SIZE</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.INTERNET</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.KILL_BACKGROUND_PROCESSES</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.MODIFY_AUDIO_SETTINGS</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.NFC</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.READ_SYNC_SETTINGS</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.READ_SYNC_STATS</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.RECEIVE_BOOT_COMPLETED</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.REORDER_TASKS</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.REQUEST_INSTALL_PACKAGES</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.SET_TIME_ZONE</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.SET_WALLPAPER</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.SET_WALLPAPER_HINTS</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.SUBSCRIBED_FEEDS_READ</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.TRANSMIT_IR</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.USE_FINGERPRINT</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.VIBRATE</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.WAKE_LOCK</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">android.permission.WRITE_SYNC_SETTINGS</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">com.android.alarm.permission.SET_ALARM</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">com.android.launcher.permission.INSTALL_SHORTCUT</span><br /><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt; color: #16a085;\">com.android.launcher.permission.UNINSTALL_SHORTCUT</span></p>
<p>Just simply declare those permissions in <code>AndroidManifest.xml</code>&nbsp;and it will work just fine. No need to check for the permission listed above since it&nbsp;couldn't be revoked.</p>
<h2 class=\"section-heading\">Make your application&nbsp;support new Runtime Permission</h2>
<p>Now it's time to make our application support new Runtime Permission perfectly. Start with setting <code>compileSdkVersion</code>&nbsp;and&nbsp;<code>targetSdkVersion</code>&nbsp;to 23.</p>
<pre class=\"brush:groovy;auto-links:false;toolbar:false\" contenteditable=\"false\">android {
    compileSdkVersion 23
    ...

    defaultConfig {
        ...
        targetSdkVersion 23
        ...
    }</pre>
<p>In this example, we try to add a contact with a function below.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    private static final String TAG = \"Contacts\";
    private void insertDummyContact() {
        // Two operations are needed to insert a new contact.
        ArrayList&lt;ContentProviderOperation&gt; operations = new ArrayList&lt;ContentProviderOperation&gt;(2);

        // First, set up a new raw contact.
        ContentProviderOperation.Builder op =
                ContentProviderOperation.newInsert(ContactsContract.RawContacts.CONTENT_URI)
                        .withValue(ContactsContract.RawContacts.ACCOUNT_TYPE, null)
                        .withValue(ContactsContract.RawContacts.ACCOUNT_NAME, null);
        operations.add(op.build());

        // Next, set the name for the contact.
        op = ContentProviderOperation.newInsert(ContactsContract.Data.CONTENT_URI)
                .withValueBackReference(ContactsContract.Data.RAW_CONTACT_ID, 0)
                .withValue(ContactsContract.Data.MIMETYPE,
                        ContactsContract.CommonDataKinds.StructuredName.CONTENT_ITEM_TYPE)
                .withValue(ContactsContract.CommonDataKinds.StructuredName.DISPLAY_NAME,
                        \"__DUMMY CONTACT from runtime permissions sample\");
        operations.add(op.build());

        // Apply the operations.
        ContentResolver resolver = getContentResolver();
        try {
            resolver.applyBatch(ContactsContract.AUTHORITY, operations);
        } catch (RemoteException e) {
            Log.d(TAG, \"Could not add a new contact: \" + e.getMessage());
        } catch (OperationApplicationException e) {
            Log.d(TAG, \"Could not add a new contact: \" + e.getMessage());
        }
    }</pre>
<p>The above code requires <code>WRITE_CONTACTS</code> permission. If it is called without this permission granted, application will suddenly crash.</p>
<p>Next step is to add a permission into&nbsp;<code>AndroidManifest.xml</code>&nbsp;with same old method.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;uses-permission android:name=\"android.permission.WRITE_CONTACTS\"/&gt;</pre>
<p>Next step is&nbsp;we have to create another function to check that&nbsp;permission is granted or not. If it isn't&nbsp;then&nbsp;call a dialog to ask user for a permission. Otherwise, you can go on the next step, creating a new contact.</p>
<p>Permissions&nbsp;are&nbsp;grouped into <strong>Permission Group</strong> like table below.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/mpermission/permgroup.png\" alt=\"\" width=\"639\" height=\"802\" /></p>
<p>If any permission in a Permission Group is granted. Another permission in the same group will be automatically granted as well. In this case, once <code>WRITE_CONTACTS</code> is granted, application will also grant <code>READ_CONTACTS</code> and <code>GET_ACCOUNTS</code>.</p>
<p>Source code used to check and ask for permission is <strong>Activity's</strong> <code>checkSelfPermission</code> and <code>requestPermissions</code> respectively. These methods are added in API Level 23.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    final private int REQUEST_CODE_ASK_PERMISSIONS = 123;

    private void insertDummyContactWrapper() {
        int hasWriteContactsPermission = checkSelfPermission(Manifest.permission.WRITE_CONTACTS);
        if (hasWriteContactsPermission != PackageManager.PERMISSION_GRANTED) {
            requestPermissions(new String[] {Manifest.permission.WRITE_CONTACTS},
                    REQUEST_CODE_ASK_PERMISSIONS);
            return;
        }
        insertDummyContact();
    }</pre>
<p>If permission has already been granted, <code>insertDummyContact()</code> will be suddenly called. Otherwise, <code>requestPermissions</code> will be called&nbsp;to launch a permission request dialog like below.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/mpermission/requestpermission.jpg\" alt=\"\" width=\"510\" height=\"510\" /></p>
<p>No matter&nbsp;Allow or Deny is chosen, Activity's <code>onRequestPermissionsResult</code> will always be called to inform a result which we can check from&nbsp;the 3rd parameter, <code>grantResults</code>, like this:</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        switch (requestCode) {
            case REQUEST_CODE_ASK_PERMISSIONS:
                if (grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                    // Permission Granted
                    insertDummyContact();
                } else {
                    // Permission Denied
                    Toast.makeText(MainActivity.this, \"WRITE_CONTACTS Denied\", Toast.LENGTH_SHORT)
                            .show();
                }
                break;
            default:
                super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        }
    }
</pre>
<p>This is how Runtime Permission works. Code is quite complicated but be used to&nbsp;it ... To make you application works perfectly with Runtime Permission, you have to handle all the case with the same method shown above.</p>
<p>If you want to punch some wall, it is a good time now ...</p>
<h2 class=\"section-heading\">Handle \"Never Ask Again\"</h2>
<p>If user denied a permission. In the second launch, user will get a <strong>\"Never ask again\"</strong> option to prevent application from asking this permission in the future.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/mpermission/neveraskagain.jpg\" alt=\"\" width=\"510\" height=\"510\" /></p>
<p>If this option is checked before denying. Next time we call <code>requestPermissions</code>, this dialog will not be appeared for this kind of permission anymore. Instead, it just does nothing.</p>
<p>However it is quite bad in term of UX if user does something but there is nothing interact back. This case has to be handled as well. Before calling <code>requestPermissions</code>, we need to check that&nbsp;should we show a rationale about why application needs the being-requested permission through Activity's&nbsp;<code>shouldShowRequestPermissionRationale</code>&nbsp;method. Source code will now look like this:</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    final private int REQUEST_CODE_ASK_PERMISSIONS = 123;

    private void insertDummyContactWrapper() {
        int hasWriteContactsPermission = checkSelfPermission(Manifest.permission.WRITE_CONTACTS);
        if (hasWriteContactsPermission != PackageManager.PERMISSION_GRANTED) {
                if (!shouldShowRequestPermissionRationale(Manifest.permission.WRITE_CONTACTS)) {
                    showMessageOKCancel(\"You need to allow access to Contacts\",
                            new DialogInterface.OnClickListener() {
                                @Override
                                public void onClick(DialogInterface dialog, int which) {
                                    requestPermissions(new String[] {Manifest.permission.WRITE_CONTACTS},
                                            REQUEST_CODE_ASK_PERMISSIONS);
                                }
                            });
                    return;
                }
            requestPermissions(new String[] {Manifest.permission.WRITE_CONTACTS},
                    REQUEST_CODE_ASK_PERMISSIONS);
            return;
        }
        insertDummyContact();
    }

    private void showMessageOKCancel(String message, DialogInterface.OnClickListener okListener) {
        new AlertDialog.Builder(MainActivity.this)
                .setMessage(message)
                .setPositiveButton(\"OK\", okListener)
                .setNegativeButton(\"Cancel\", null)
                .create()
                .show();
    }</pre>
<p>The result are rational dialog will be shown when <span style=\"text-decoration: underline;\">this permission is requested for the first time</span> and also be shown <span style=\"text-decoration: underline;\">if user has ever marked that permission as Never ask again</span>. For the latter case, <code>onRequestPermissionsResult</code> will be called with <code>PERMISSION_DENIED</code> without any permission grant dialog.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/mpermission/rationaledialog.jpg\" alt=\"\" width=\"510\" height=\"510\" /></p>
<p>Done !</p>
<h2 class=\"section-heading\">Asking for multiple permissions&nbsp;at a time</h2>
<p>There is definitely some feature that requires more than one permission. You could request for multiple permissions at a time with same method as above. Anyway don't forget to check the 'Never ask again' case for every single permission as well.</p>
<p>Here is&nbsp;the revised code.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    final private int REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS = 124;

    private void insertDummyContactWrapper() {
        List&lt;String&gt; permissionsNeeded = new ArrayList&lt;String&gt;();

        final List&lt;String&gt; permissionsList = new ArrayList&lt;String&gt;();
        if (!addPermission(permissionsList, Manifest.permission.ACCESS_FINE_LOCATION))
            permissionsNeeded.add(\"GPS\");
        if (!addPermission(permissionsList, Manifest.permission.READ_CONTACTS))
            permissionsNeeded.add(\"Read Contacts\");
        if (!addPermission(permissionsList, Manifest.permission.WRITE_CONTACTS))
            permissionsNeeded.add(\"Write Contacts\");

        if (permissionsList.size() &gt; 0) {
            if (permissionsNeeded.size() &gt; 0) {
                // Need Rationale
                String message = \"You need to grant access to \" + permissionsNeeded.get(0);
                for (int i = 1; i &lt; permissionsNeeded.size(); i++)
                    message = message + \", \" + permissionsNeeded.get(i);
                showMessageOKCancel(message,
                        new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialog, int which) {
                                requestPermissions(permissionsList.toArray(new String[permissionsList.size()]),
                                        REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS);
                            }
                        });
                return;
            }
            requestPermissions(permissionsList.toArray(new String[permissionsList.size()]),
                    REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS);
            return;
        }

        insertDummyContact();
    }

    private boolean addPermission(List&lt;String&gt; permissionsList, String permission) {
        if (checkSelfPermission(permission) != PackageManager.PERMISSION_GRANTED) {
            permissionsList.add(permission);
            // Check for Rationale Option
            if (!shouldShowRequestPermissionRationale(permission))
                return false;
        }
        return true;
    }
</pre>
<p>When every single permission got its grant result, the result will be sent to the same callback method,&nbsp;<code>onRequestPermissionsResult</code>. I use HashMap to make source code&nbsp;looks cleaner and more readable.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        switch (requestCode) {
            case REQUEST_CODE_ASK_MULTIPLE_PERMISSIONS:
                {
                Map&lt;String, Integer&gt; perms = new HashMap&lt;String, Integer&gt;();
                // Initial
                perms.put(Manifest.permission.ACCESS_FINE_LOCATION, PackageManager.PERMISSION_GRANTED);
                perms.put(Manifest.permission.READ_CONTACTS, PackageManager.PERMISSION_GRANTED);
                perms.put(Manifest.permission.WRITE_CONTACTS, PackageManager.PERMISSION_GRANTED);
                // Fill with results
                for (int i = 0; i &lt; permissions.length; i++)
                    perms.put(permissions[i], grantResults[i]);
                // Check for ACCESS_FINE_LOCATION
                if (perms.get(Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED
                        &amp;&amp; perms.get(Manifest.permission.READ_CONTACTS) == PackageManager.PERMISSION_GRANTED
                        &amp;&amp; perms.get(Manifest.permission.WRITE_CONTACTS) == PackageManager.PERMISSION_GRANTED) {
                    // All Permissions Granted
                    insertDummyContact();
                } else {
                    // Permission Denied
                    Toast.makeText(MainActivity.this, \"Some Permission is Denied\", Toast.LENGTH_SHORT)
                            .show();
                }
                }
                break;
            default:
                super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        }
    }
</pre>
<p>The condition is flexible. You have to set it by your own. In some case, if even one permission is not granted, that feature will be just simply disabled. But in some case, it will still work but with limited feature. There is no suggestion from me. It is all by&nbsp;your design.</p>
<h2 class=\"section-heading\">Use Support Library&nbsp;to make code forward-compatible</h2>
<p><span style=\"color: #c0392b;\">Although the code above works perfectly on Android 6.0 Marshmallow. Unfortunate that it will crash on Android pre-Marshmallow since those functions called are added in&nbsp;API Level 23.</span></p>
<p>The straight way is you can check Build Version with code below.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">        if (Build.VERSION.SDK_INT &gt;= 23) {
            // Marshmallow+
        } else {
            // Pre-Marshmallow
        }
</pre>
<p>But code will be even more complicated. So I suggest you to use some help from <span style=\"text-decoration: underline;\"><strong>Support Library v4</strong></span> which is already prepared for this thing. Replace those functions with these:</p>
<p style=\"padding-left: 30px;\"><span style=\"color: #2980b9;\">-&nbsp;<span style=\"font-size: 12pt;\"><strong><span style=\"font-family: 'courier new', courier, monospace;\">ContextCompat.checkSelfPermission()</span></strong></span></span></p>
<p style=\"padding-left: 30px;\">No matter&nbsp;application is run on M or not. This function will correctly return <code>PERMISSION_GRANTED</code> if the permission is granted. Otherwise&nbsp;<code>PERMISSION_DENIED</code> will be returned.</p>
<p style=\"padding-left: 30px;\"><span style=\"color: #2980b9;\">-&nbsp;<span style=\"font-size: 12pt;\"><strong><span style=\"font-family: 'courier new', courier, monospace;\">ActivityCompat.requestPermissions()</span></strong></span></span></p>
<p style=\"padding-left: 30px;\">If this function is called on pre-M, OnRequestPermissionsResultCallback will be suddenly called with correct&nbsp;<code>PERMISSION_GRANTED</code>&nbsp;or&nbsp;<code>PERMISSION_DENIED</code>&nbsp;result.</p>
<p style=\"padding-left: 30px;\"><span style=\"color: #2980b9;\">-<span style=\"font-size: 12pt;\"> <strong><span style=\"font-family: 'courier new', courier, monospace;\">ActivityCompat.shouldShowRequestPermissionRationale()&nbsp;</span></strong></span></span></p>
<p style=\"padding-left: 30px;\">If this function is called on pre-M,&nbsp;it will always return <code>false</code>.</p>
<p><strong><span style=\"text-decoration: underline;\">ALWAYS&nbsp;replace Activity's&nbsp;<code>checkSelfPermission</code>, <code>requestPermissions</code> and&nbsp;<code>shouldShowRequestPermissionRationale</code>&nbsp;with these functions from Support Library v4.</span></strong>&nbsp;And your application will work perfectly find on any Android version with same code logic. Please note that these functions require some additional parameter: Context or Activity. Nothing special to do, just pass what it wants correctly. Here is what source code will look like.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    private void insertDummyContactWrapper() {
        int hasWriteContactsPermission = ContextCompat.checkSelfPermission(MainActivity.this,
                Manifest.permission.WRITE_CONTACTS);
        if (hasWriteContactsPermission != PackageManager.PERMISSION_GRANTED) {
            if (!ActivityCompat.shouldShowRequestPermissionRationale(MainActivity.this,
                    Manifest.permission.WRITE_CONTACTS)) {
                showMessageOKCancel(\"You need to allow access to Contacts\",
                        new DialogInterface.OnClickListener() {
                            @Override
                            public void onClick(DialogInterface dialog, int which) {
                                ActivityCompat.requestPermissions(MainActivity.this,
                                        new String[] {Manifest.permission.WRITE_CONTACTS},
                                        REQUEST_CODE_ASK_PERMISSIONS);
                            }
                        });
                return;
            }
            ActivityCompat.requestPermissions(MainActivity.this,
                    new String[] {Manifest.permission.WRITE_CONTACTS},
                    REQUEST_CODE_ASK_PERMISSIONS);
            return;
        }
        insertDummyContact();
    }
</pre>
<p>These methods are also available in Fragment from Android Support Library v4. So please feel free to move these logics into the Fragment.</p>
<h2 class=\"section-heading\">Shorten source code with 3rd Party Library</h2>
<p>You will notice that code is quite complicated. No surprise, there are quite many of 3rd party libraries out there trying to solve this big thing. I gave a try with quite a lot of them and finally&nbsp;found one that satisfy me. It is hotchemi's&nbsp;<a href=\"http://hotchemi.github.io/PermissionsDispatcher/\" target=\"_blank\">PermissionsDispatcher</a>.</p>
<p>What is does it exactly the same as I described above but just with shorter and cleaner code. Surely with some trade-off with flexibility. Please give it a try and see if it could be applied in&nbsp;your application. If it couldn't, you can go on the direct way which is also my choice right now.</p>
<h2 class=\"section-heading\">What will happen if&nbsp;permission is revoked while application is opened?</h2>
<p>As mentioned above, a permission can be revoked anytime through phone's Settings.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/mpermission/permissionsrevoke.jpg\" alt=\"\" width=\"510\" height=\"510\" /></p>
<p>So what will happen if permission is revoked when application is opened? I have already given it a try and found that <span style=\"text-decoration: underline;\">application's process is suddenly terminated</span>. Everything inside application just simply stopped (since it is already terminated ...). It sounds make sense to me anyway since if OS allows the application to go on its process, it may summon Freddy to my&nbsp;nightmare. I mean even worse&nbsp;nightmare than currently is ...</p>
<h2 class=\"section-heading\">Conclusion and Suggestion</h2>
<p>I believe that you see&nbsp;the big picture of this new permission system quite clear right now. And I believe that you also see how big issue it is.</p>
<p>However you have no choice. Runtime Permission is already used in Android Marshmallow. We are at the point of no return. Only thing we could do right now is to make our application fully support this new permission system.</p>
<p>Good news is there are only few permission that requires Runtime Permission flow. Most of the frequently-used permissions, for example, INTERNET,&nbsp;are in <a href=\"https://developer.android.com/preview/features/runtime-permissions.html#normal\" target=\"_blank\">Normal Permission</a> are automatically granted and you have no need to do anything with them. In conclusion, there are just few part of code that you need to modify.</p>
<p>There are two suggestions to you all:</p>
<p style=\"padding-left: 30px;\">1)&nbsp;Make Runtime Permission support an urgent&nbsp;issue</p>
<p style=\"padding-left: 30px;\">2) Don't set application's targetSdkVersion to 23 if your code is not yet supported Runtime Permission. Especially when you create a new project from Android Studio, don't forget to take a look at build.gradle everytime for targetSdkVersion !</p>
<p>Talk about source code modification, I must admit that it is quite a big thing. If code structure is not designed good enough, you may need some serious reconstruction which will surely take some time. Or at least I believe that source code need to be refactored for every single application. Anyway like I said above, we have no choice ...</p>
<p>In the man time, since permission concept is turned upside down. Right now if some permission is not granted, your application need to still be able to work with limited feature. So I suggest you to list all the feature that related to permission you requested. And write down all the case possible, if permission A is granted but permission B is denied, what will happen. Blah blah blah.</p>
<p>Good luck with your code refactoring. Mark&nbsp;it as urgent in your to-do list and start do it today so it will contains no problem on the day Android M is publicly launched.</p>
<p>Hope you find this article helpful and Happy Coding !</p>
<p>More details are available <a href=\"https://developer.android.com/preview/features/runtime-permissions.html\" target=\"_blank\">here</a>.</p>			") (link nil "http://inthecheesefactory.com/blog/things-you-need-to-know-about-android-m-permission-developer-edition/en") (pubDate nil "
				Tue, 25 Aug 2015 22:16:00 +0000			") (guid nil "http://inthecheesefactory.com/blog/things-you-need-to-know-about-android-m-permission-developer-edition/en"))) ("Percent Support Library: Bring dimension in % to RelativeLayout and FrameLayout" "<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/blog/percent/percentcover.jpg\" /></p>
<p>Although there are quite a lot of Layout that can be used in Android Application Development world but at last we always end up with just these three: LinearLayout, RelativeLayout and FrameLayout</p>
<p>Anyway there is some problem with those RelativeLayout and FrameLayout since you cannot set Child View's dimension in percentage. Only two ways possible are to put LinearLayout inside and use advantage from its layout_weight LayoutParams and to&nbsp;do it in Java code by overriding onMeasure or so.</p>
<p>For example if I want to place a simple red rectangle on the top-left corner with 5% margin left and 25% width inside RelativeLayout. We have to code like this.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"
android:layout_width=\"match_parent\"
android:layout_height=\"match_parent\"&gt;
&lt;LinearLayout
android:layout_width=\"match_parent\"
android:layout_height=\"wrap_content\"
android:orientation=\"horizontal\"
android:weightSum=\"20\"&gt;
&lt;View
android:layout_width=\"0dp\"
android:layout_height=\"match_parent\"
android:layout_weight=\"1\"
/&gt;
&lt;View
android:layout_width=\"0dp\"
android:layout_height=\"100dp\"
android:layout_weight=\"5\"
android:background=\"#ff0000\" /&gt;
&lt;/LinearLayout&gt;
&lt;/RelativeLayout&gt;</pre>
<p>Here is the result.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/percent/screenshot18.png\" alt=\"\" width=\"784\" height=\"470\" /></p>
<p>You will notice that code is more complicated that it should be. In the mean time, those spaces are also filled with View and LinearLayout which we could treat them&nbsp;as wasted.</p>
<p>It is not a problem anymore since the few days ago on the day Android M is officially announced its name: Marshmallow, Android team launched many Support Library to help developer fighting with fragmentation. One of those is <a href=\"http://developer.android.com/reference/android/support/percent/package-summary.html\" target=\"_blank\">Percent Support Library</a>&nbsp;which add an capbility to set RelativeLayout's and FrameLayout's dimension in&nbsp;% !</p>
<h2 class=\"section-heading\">Hello&nbsp;Percent Support Library</h2>
<p>This library is pretty easy to use since it is just the same RelativeLayout and FrameLayout we are familiar with, just with some additional functionalities.</p>
<p>First of all, since Percent Support Library comes along with Android Support Library 23 so please make sure that you update&nbsp;Android Support Library in <strong>SDK Manager</strong> to the latest version already. And then add a dependency like below in <code>build.gradle</code> file:</p>
<pre class=\"brush:groovy;auto-links:false;toolbar:false\" contenteditable=\"false\">compile 'com.android.support:percent:23.0.0'</pre>
<p>Now instead of using old&nbsp;RelativeLayout and&nbsp;FrameLayout, just simple switch to&nbsp;<code>android.support.percent.PercentRelativeLayout</code>&nbsp;and&nbsp;<code>android.support.percent.PercentFrameLayout</code>&nbsp;respectively. There are 9 Layout Params that can be used:</p>
<p style=\"padding-left: 30px;\"><strong>- <span style=\"font-family: 'courier new', courier, monospace; color: #2980b9;\">layout_widthPercent</span></strong> : Width in&nbsp;%, for example, app:layout_widthPercent=\"25%\"</p>
<p style=\"padding-left: 30px;\"><strong>- <span style=\"font-family: 'courier new', courier, monospace; color: #2980b9;\">layout_heightPercent</span></strong> :&nbsp;Height in %</p>
<p style=\"padding-left: 30px;\"><strong>- <span style=\"font-family: 'courier new', courier, monospace; color: #2980b9;\">layout_marginPercent</span></strong> : Margin in&nbsp;%</p>
<p style=\"padding-left: 30px;\">The rest are margin for&nbsp;each side&nbsp;in %:&nbsp;<span style=\"color: #2980b9;\"><strong><span style=\"font-family: 'courier new', courier, monospace;\">layout_marginLeftPercent</span></strong></span>, <span style=\"color: #2980b9;\"><strong><span style=\"font-family: 'courier new', courier, monospace;\">layout_marginRightPercent</span></strong></span>, <span style=\"color: #2980b9;\"><strong><span style=\"font-family: 'courier new', courier, monospace;\">layout_marginTopPercent</span></strong></span>, <span style=\"color: #2980b9;\"><strong><span style=\"font-family: 'courier new', courier, monospace;\">layout_marginBottomPercent</span></strong></span>, <span style=\"color: #2980b9;\"><strong><span style=\"font-family: 'courier new', courier, monospace;\">layout_marginStartPercent</span></strong></span>, <span style=\"color: #2980b9;\"><strong><span style=\"font-family: 'courier new', courier, monospace;\">layout_marginEndPercent</span></strong></span></p>
<p>With <code>PercentRelativeLayout</code>, the code example&nbsp;above could be rewritten as below:</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;android.support.percent.PercentRelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"
xmlns:app=\"http://schemas.android.com/apk/res-auto\"
android:layout_width=\"match_parent\"
android:layout_height=\"match_parent\"&gt;
&lt;View
app:layout_widthPercent=\"25%\"
android:layout_height=\"100dp\"
app:layout_marginLeftPercent=\"5%\"
android:background=\"#ff0000\" /&gt;
&lt;/android.support.percent.PercentRelativeLayout&gt;
</pre>
<p>Here is the result.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/percent/screenshot19.png\" alt=\"\" width=\"784\" height=\"470\" /></p>
<p>You could see that the result is exactly the same but with much shorter and clearer code. Moreover, the space now are not filled with anything anymore which could lead to the better perfomance as well.</p>
<p>Actually this should&nbsp;be a part of Android quite for a while but unfortunate that it didn't. It is too late to add this capability to native Android's RelativeLayout/FrameLayout since user who use the device with old OS version will not be able to use this feature. That's why Android team decided to release this as Support Library and I support the idea.</p>
<p>Please give a try. It&nbsp;helps a lot making your code cleaner and better =)</p>" "http://inthecheesefactory.com/blog/know-percent-support-library/en" (21977 32248) old 12 nil nil ((title nil "
				Percent Support Library: Bring dimension in % to RelativeLayout and FrameLayout			") (description nil "
				<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/blog/percent/percentcover.jpg\" /></p> 
<p>Although there are quite a lot of Layout that can be used in Android Application Development world but at last we always end up with just these three: LinearLayout, RelativeLayout and FrameLayout</p>
<p>Anyway there is some problem with those RelativeLayout and FrameLayout since you cannot set Child View's dimension in percentage. Only two ways possible are to put LinearLayout inside and use advantage from its layout_weight LayoutParams and to&nbsp;do it in Java code by overriding onMeasure or so.</p>
<p>For example if I want to place a simple red rectangle on the top-left corner with 5% margin left and 25% width inside RelativeLayout. We have to code like this.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;RelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"
    android:layout_width=\"match_parent\"
    android:layout_height=\"match_parent\"&gt;

    &lt;LinearLayout
        android:layout_width=\"match_parent\"
        android:layout_height=\"wrap_content\"
        android:orientation=\"horizontal\"
        android:weightSum=\"20\"&gt;

        &lt;View
            android:layout_width=\"0dp\"
            android:layout_height=\"match_parent\"
            android:layout_weight=\"1\"
            /&gt;

        &lt;View
            android:layout_width=\"0dp\"
            android:layout_height=\"100dp\"
            android:layout_weight=\"5\"
            android:background=\"#ff0000\" /&gt;

    &lt;/LinearLayout&gt;

&lt;/RelativeLayout&gt;</pre>
<p>Here is the result.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/percent/screenshot18.png\" alt=\"\" width=\"784\" height=\"470\" /></p>
<p>You will notice that code is more complicated that it should be. In the mean time, those spaces are also filled with View and LinearLayout which we could treat them&nbsp;as wasted.</p>
<p>It is not a problem anymore since the few days ago on the day Android M is officially announced its name: Marshmallow, Android team launched many Support Library to help developer fighting with fragmentation. One of those is <a href=\"http://developer.android.com/reference/android/support/percent/package-summary.html\" target=\"_blank\">Percent Support Library</a>&nbsp;which add an capbility to set RelativeLayout's and FrameLayout's dimension in&nbsp;% !</p>
<h2 class=\"section-heading\">Hello&nbsp;Percent Support Library</h2>
<p>This library is pretty easy to use since it is just the same RelativeLayout and FrameLayout we are familiar with, just with some additional functionalities.</p>
<p>First of all, since Percent Support Library comes along with Android Support Library 23 so please make sure that you update&nbsp;Android Support Library in <strong>SDK Manager</strong> to the latest version already. And then add a dependency like below in <code>build.gradle</code> file:</p>
<pre class=\"brush:groovy;auto-links:false;toolbar:false\" contenteditable=\"false\">compile 'com.android.support:percent:23.0.0'</pre>
<p>Now instead of using old&nbsp;RelativeLayout and&nbsp;FrameLayout, just simple switch to&nbsp;<code>android.support.percent.PercentRelativeLayout</code>&nbsp;and&nbsp;<code>android.support.percent.PercentFrameLayout</code>&nbsp;respectively. There are 9 Layout Params that can be used:</p>
<p style=\"padding-left: 30px;\"><strong>- <span style=\"font-family: 'courier new', courier, monospace; color: #2980b9;\">layout_widthPercent</span></strong> : Width in&nbsp;%, for example, app:layout_widthPercent=\"25%\"</p>
<p style=\"padding-left: 30px;\"><strong>- <span style=\"font-family: 'courier new', courier, monospace; color: #2980b9;\">layout_heightPercent</span></strong> :&nbsp;Height in %</p>
<p style=\"padding-left: 30px;\"><strong>- <span style=\"font-family: 'courier new', courier, monospace; color: #2980b9;\">layout_marginPercent</span></strong> : Margin in&nbsp;%</p>
<p style=\"padding-left: 30px;\">The rest are margin for&nbsp;each side&nbsp;in %:&nbsp;<span style=\"color: #2980b9;\"><strong><span style=\"font-family: 'courier new', courier, monospace;\">layout_marginLeftPercent</span></strong></span>, <span style=\"color: #2980b9;\"><strong><span style=\"font-family: 'courier new', courier, monospace;\">layout_marginRightPercent</span></strong></span>, <span style=\"color: #2980b9;\"><strong><span style=\"font-family: 'courier new', courier, monospace;\">layout_marginTopPercent</span></strong></span>, <span style=\"color: #2980b9;\"><strong><span style=\"font-family: 'courier new', courier, monospace;\">layout_marginBottomPercent</span></strong></span>, <span style=\"color: #2980b9;\"><strong><span style=\"font-family: 'courier new', courier, monospace;\">layout_marginStartPercent</span></strong></span>, <span style=\"color: #2980b9;\"><strong><span style=\"font-family: 'courier new', courier, monospace;\">layout_marginEndPercent</span></strong></span></p>
<p>With <code>PercentRelativeLayout</code>, the code example&nbsp;above could be rewritten as below:</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;android.support.percent.PercentRelativeLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"
    xmlns:app=\"http://schemas.android.com/apk/res-auto\"
    android:layout_width=\"match_parent\"
    android:layout_height=\"match_parent\"&gt;

    &lt;View
        app:layout_widthPercent=\"25%\"
        android:layout_height=\"100dp\"
        app:layout_marginLeftPercent=\"5%\"
        android:background=\"#ff0000\" /&gt;

&lt;/android.support.percent.PercentRelativeLayout&gt;
</pre>
<p>Here is the result.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/blog/percent/screenshot19.png\" alt=\"\" width=\"784\" height=\"470\" /></p>
<p>You could see that the result is exactly the same but with much shorter and clearer code. Moreover, the space now are not filled with anything anymore which could lead to the better perfomance as well.</p>
<p>Actually this should&nbsp;be a part of Android quite for a while but unfortunate that it didn't. It is too late to add this capability to native Android's RelativeLayout/FrameLayout since user who use the device with old OS version will not be able to use this feature. That's why Android team decided to release this as Support Library and I support the idea.</p>
<p>Please give a try. It&nbsp;helps a lot making your code cleaner and better =)</p>			") (link nil "http://inthecheesefactory.com/blog/know-percent-support-library/en") (pubDate nil "
				Sun, 23 Aug 2015 08:02:00 +0000			") (guid nil "http://inthecheesefactory.com/blog/know-percent-support-library/en"))) ("First Look at New Android Gradle Build Tools: The new DSL structure and Gradle 2.5" "<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/blog/newgradlebuildtools/cover.png\" /></p>
<p>Android Studio 1.3's stage&nbsp;is closed to the stable release. New&nbsp;features are keep coming including full NDK support. And it seems like some major change is&nbsp;also&nbsp;being waited for its good time to&nbsp;hatch such as a new Gradle Build Tools with the newly designed DSL (gradle script code structure).</p>
<p>I found it is very interesting after an hour of playing. So I decide to write this blog to introduce you guys the&nbsp;upcoming changes of the build tools to let you prepare.</p>
<h2 class=\"section-heading\">What is&nbsp;Android Gradle Build Tools?</h2>
<p>In case you don't know yet. Android Gradle Build Tools is a runtime used for processing&nbsp;module's <code>build.gradle</code> file before passing it forward to Gradle for the furthur step.</p>
<p>Gradle Build Tools' version is declared in project's&nbsp;<code>build.gradle</code>&nbsp;like below:</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">dependencies {
classpath 'com.android.tools.build:gradle:1.2.3'
}</pre>
<p>Each version of Gradle Build Tools&nbsp;can work&nbsp;with the supported Gradle version listed below.</p>
<table style=\"width: 100%; border: 1px solid black;\" border=\"1px solid black\">
<tbody>
<tr>
<td style=\"width: 50%; border: 1px solid black; padding: 10px; text-align: center;\"><strong>Android Gradle Plugin</strong></td>
<td style=\"border: 1px solid black; text-align: center;\"><strong>Gradle</strong></td>
</tr>
<tr>
<td style=\"border: 1px solid black; text-align: center;\">1.0.0 - 1.1.3</td>
<td style=\"border: 1px solid black; text-align: center;\">2.2.1 - 2.3</td>
</tr>
<tr>
<td style=\"border: 1px solid black; text-align: center;\">1.2+</td>
<td style=\"border: 1px solid black; text-align: center;\">2.2.1+</td>
</tr>
</tbody>
</table>
<p>And the syntax&nbsp;we use these days to write Gradle Script in <code>build.gradle</code> file is defined in&nbsp;Android Gradle Build Tools. We call it&nbsp;<strong>DSL</strong> (Domain-Specific Language).</p>
<h2 class=\"section-heading\">The new Android Gradle Build Tools</h2>
<p>After DSL hasn't been touched since the launch&nbsp;of Gradle Build Tools 1.0, Android Studio team has decided to do the&nbsp;major change with the new Gradle Build Tools which is still in the experimental stage by change its base to Gradle's new component model mechanism allows significant reduction in configuration time. However development teams are working hard trying to remove&nbsp;these current changes to minimize the migration process from the traditional plugin in the future.</p>
<p>Anyway IMHO the new DSL looks pretty good. I must say that I am convinced to change since the new DSL structure and&nbsp;naming&nbsp;is more meaningful than it currently is.</p>
<p>To try the new Gradle Build Tools, just simply change the build tools' version in <span style=\"text-decoration: underline;\"><strong>project's</strong></span> <code>build.gradle</code> to</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">dependencies {
classpath 'com.android.tools.build:gradle-experimental:0.1.0'
}</pre>
<p>Please note that this new version of build tools works with just-released Gradle 2.5 only so you need to install it first by modify <code>distributionUrl</code> line in <code>gradle/gradle-wrapper.properties</code> file placed in your project.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">distributionUrl=https\\://services.gradle.org/distributions/gradle-2.5-bin.zip</pre>
<p>Enter settings page (<strong>File -&gt; Settings</strong>&nbsp;on&nbsp;<em>Windows&nbsp;or</em>&nbsp;<strong>Android Studio -&gt; Preferences</strong>&nbsp;on&nbsp;<em>Mac OS X</em>)&nbsp;and&nbsp;make sure that you check&nbsp;<strong>Use default gradle wrapper</strong>.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/blog/newgradlebuildtools/defaultwrapper.png\" alt=\"defaultwrapper\" /></p>
<p>And then modify module's&nbsp;<code>build.gradle</code>&nbsp;file from:</p>
<pre class=\"brush:groovy;auto-links:false;toolbar:false\" contenteditable=\"false\">apply plugin: 'com.android.application'
android {
compileSdkVersion 22
buildToolsVersion \"23.0.0 rc3\"
defaultConfig {
applicationId \"com.inthecheesefactory.hellojni25\"
minSdkVersion 15
targetSdkVersion 22
versionCode 1
versionName \"1.0\"
}
buildTypes {
release {
minifyEnabled false
proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
}
}
}
dependencies {
compile fileTree(dir: 'libs', include: ['*.jar'])
compile 'com.android.support:appcompat-v7:22.2.0'
}
</pre>
<p>to</p>
<pre class=\"brush:groovy;auto-links:false;toolbar:false\" contenteditable=\"false\">apply plugin: 'com.android.model.application'
model {
android {
compileSdkVersion = 22
buildToolsVersion = \"23.0.0 rc3\"
defaultConfig.with {
applicationId = \"com.inthecheesefactory.hellojni25\"
minSdkVersion.apiLevel = 15
targetSdkVersion.apiLevel = 22
versionCode = 1
versionName = \"1.0\"
}
}
android.buildTypes {
release {
isMinifyEnabled = false
proguardFiles += file('proguard-rules.pro')
}
}
}
dependencies {
compile fileTree(dir: 'libs', include: ['*.jar'])
compile 'com.android.support:appcompat-v7:22.2.0'
}
</pre>
<p>You can notice that structure are&nbsp;quite different. <code>com.android.application</code>&nbsp;is now changed to <code>com.android.model.application</code>. <code>=</code>&nbsp;operator&nbsp;is required for the most properties as well as <code>+=</code> operator which is used to add element(s) to the collection. Some property's name that are&nbsp;not so clear in the term of meaning are also adjusted, for example,&nbsp;<code>minSdkVersion</code>&nbsp;is now changed to&nbsp;<code>minSdkVersion.apiLevel</code></p>
<p>Well, let's sync project with gradle files to apply the change.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/blog/newgradlebuildtools/syncgradle.png\" alt=\"syncgradle\" /></p>
<p>And then simply run it. Everything works fine as expected with the more meaningful syntax, built with new-fresh Gradle 2.5.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/blog/newgradlebuildtools/run.png\" alt=\"run\" /></p>
<h2 class=\"section-heading\">Give NDK support a try</h2>
<p>Android Studio 1.3 was proudly announced with full NDK Support. So let's give a try with some very simple&nbsp;native codes. First of all, you need to define a NDK's directiory to project's <code>local.properties</code> file. Please note that you can use both NDK r10e available in <a href=\"https://developer.android.com/ndk/downloads/index.html\" target=\"_blank\">Android NDK Downloads Page</a>&nbsp;and NDK Bundle available in SDK Manager.</p>
<pre class=\"brush:groovy;auto-links:false;toolbar:false\" contenteditable=\"false\">ndk.dir=PATH_TO_NDK_ROOT</pre>
<p>Create <code>HelloJni.java</code>&nbsp;somewhere in your java package.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">public class HelloJni {
public native String stringFromJNI();
}</pre>
<p>Make a <strong>jni</strong> folder inside <strong>src/main </strong>and create <code>hello-jni.c</code>&nbsp;file with the content shown below.</p>
<p><strong>hello-jni.c</strong></p>
<pre class=\"brush:cpp;auto-links:false;toolbar:false\" contenteditable=\"false\">#include &lt;string.h&gt;
#include &lt;jni.h&gt;
jstring
Java_com_inthecheesefactory_hellojni25_HelloJni_stringFromJNI( JNIEnv* env,
jobject thiz )
{
#if defined(__arm__)
#if defined(__ARM_ARCH_7A__)
#if defined(__ARM_NEON__)
#if defined(__ARM_PCS_VFP)
#define ABI \"armeabi-v7a/NEON (hard-float)\"
#else
#define ABI \"armeabi-v7a/NEON\"
#endif
#else
#if defined(__ARM_PCS_VFP)
#define ABI \"armeabi-v7a (hard-float)\"
#else
#define ABI \"armeabi-v7a\"
#endif
#endif
#else
#define ABI \"armeabi\"
#endif
#elif defined(__i386__)
#define ABI \"x86\"
#elif defined(__x86_64__)
#define ABI \"x86_64\"
#elif defined(__mips64)  /* mips64el-* toolchain defines __mips__ too */
#define ABI \"mips64\"
#elif defined(__mips__)
#define ABI \"mips\"
#elif defined(__aarch64__)
#define ABI \"arm64-v8a\"
#else
#define ABI \"unknown\"
#endif
return (*env)-&gt;NewStringUTF(env, \"Hello from JNI !!  Compiled with ABI \" ABI \".\");
}</pre>
<p>Please don't forget to change&nbsp;<code style=\"color: #333333; font-size: 20px; line-height: 1.42857143;\">com_inthecheesefactory_hellojni25</code>&nbsp;to match HelloJni.java's package name or it will just simply not working.</p>
<p>For those who are familiar with NDK, you might notice that Makefiles aren't needed anymore.</p>
<p>And here is the final file structure.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/blog/newgradlebuildtools/files.png\" alt=\"files\" /></p>
<p>Now let's test the JNI code&nbsp;in&nbsp;<code>MainActivity.java</code>&nbsp;by placing code below at the very last line of <strong>MainActivity</strong> class.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">public class MainActivity extends AppCompatActivity {
...
static {
System.loadLibrary(\"hello-jni\");
}
}
</pre>
<p>Modify <code>onCreate</code>&nbsp;like this.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    @Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_main);
Toast.makeText(MainActivity.this,
new HelloJni().stringFromJNI(),
Toast.LENGTH_LONG)
.show();
}</pre>
<p>Done! You can now use the&nbsp;native code through Java code. Run to try it.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/blog/newgradlebuildtools/screenshot18.png\" alt=\"screenshot18\" /></p>
<p>And with the awesome full support of NDK on Android Studio, Java code and Native code can now&nbsp;work&nbsp;seemlessly. If you&nbsp;inspect code in Java, it will jump you to the right place in native code.</p>
<p><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/blog/newgradlebuildtools/linkjni.png\" alt=\"linkjni\" /></p>
<p>Anyway it is still in the experimental stage. Some features are still under development. Better wait for the final release for serious use.</p>
<h2 class=\"section-heading\">Conclusion</h2>
<p>I must say that the new Gradle Build Tools is very interesting. Major change to DSL looks really promising and far more meaningful than the current one. The great code should be able to tell what it does, agree?</p>
<p>However&nbsp;it is still in the experimental stage. The DSL is&nbsp;not final yet. We better just study and know its existence rather than switching to the new one right now. Anyway I believe that it would not be so long until the stable release available for real use. Be prepared !</p>
<p>More information available here&nbsp;&gt;&gt; <a href=\"http://tools.android.com/tech-docs/new-build-system/gradle-experimental\" target=\"_blank\">Experimental Plugin User Guide</a></p>
<p>=)</p>" "http://inthecheesefactory.com/blog/new-gradle-build-tools-with-gradle-2.5/en" (21922 48668) old 13 nil nil ((title nil "
				First Look at New Android Gradle Build Tools: The new DSL structure and Gradle 2.5			") (description nil "
				<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/blog/newgradlebuildtools/cover.png\" /></p> 
<p>Android Studio 1.3's stage&nbsp;is closed to the stable release. New&nbsp;features are keep coming including full NDK support. And it seems like some major change is&nbsp;also&nbsp;being waited for its good time to&nbsp;hatch such as a new Gradle Build Tools with the newly designed DSL (gradle script code structure).</p>
<p>I found it is very interesting after an hour of playing. So I decide to write this blog to introduce you guys the&nbsp;upcoming changes of the build tools to let you prepare.</p>
<h2 class=\"section-heading\">What is&nbsp;Android Gradle Build Tools?</h2>
<p>In case you don't know yet. Android Gradle Build Tools is a runtime used for processing&nbsp;module's <code>build.gradle</code> file before passing it forward to Gradle for the furthur step.</p>
<p>Gradle Build Tools' version is declared in project's&nbsp;<code>build.gradle</code>&nbsp;like below:</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">dependencies {
    classpath 'com.android.tools.build:gradle:1.2.3'
}</pre>
<p>Each version of Gradle Build Tools&nbsp;can work&nbsp;with the supported Gradle version listed below.</p>
<table style=\"width: 100%; border: 1px solid black;\" border=\"1px solid black\">
<tbody>
<tr>
<td style=\"width: 50%; border: 1px solid black; padding: 10px; text-align: center;\"><strong>Android Gradle Plugin</strong></td>
<td style=\"border: 1px solid black; text-align: center;\"><strong>Gradle</strong></td>
</tr>
<tr>
<td style=\"border: 1px solid black; text-align: center;\">1.0.0 - 1.1.3</td>
<td style=\"border: 1px solid black; text-align: center;\">2.2.1 - 2.3</td>
</tr>
<tr>
<td style=\"border: 1px solid black; text-align: center;\">1.2+</td>
<td style=\"border: 1px solid black; text-align: center;\">2.2.1+</td>
</tr>
</tbody>
</table>
<p>And the syntax&nbsp;we use these days to write Gradle Script in <code>build.gradle</code> file is defined in&nbsp;Android Gradle Build Tools. We call it&nbsp;<strong>DSL</strong> (Domain-Specific Language).</p>
<h2 class=\"section-heading\">The new Android Gradle Build Tools</h2>
<p>After DSL hasn't been touched since the launch&nbsp;of Gradle Build Tools 1.0, Android Studio team has decided to do the&nbsp;major change with the new Gradle Build Tools which is still in the experimental stage by change its base to Gradle's new component model mechanism allows significant reduction in configuration time. However development teams are working hard trying to remove&nbsp;these current changes to minimize the migration process from the traditional plugin in the future.</p>
<p>Anyway IMHO the new DSL looks pretty good. I must say that I am convinced to change since the new DSL structure and&nbsp;naming&nbsp;is more meaningful than it currently is.</p>
<p>To try the new Gradle Build Tools, just simply change the build tools' version in <span style=\"text-decoration: underline;\"><strong>project's</strong></span> <code>build.gradle</code> to</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">dependencies {
    classpath 'com.android.tools.build:gradle-experimental:0.1.0'
}</pre>
<p>Please note that this new version of build tools works with just-released Gradle 2.5 only so you need to install it first by modify <code>distributionUrl</code> line in <code>gradle/gradle-wrapper.properties</code> file placed in your project.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">distributionUrl=https\\://services.gradle.org/distributions/gradle-2.5-bin.zip</pre>
<p>Enter settings page (<strong>File -&gt; Settings</strong>&nbsp;on&nbsp;<em>Windows&nbsp;or</em>&nbsp;<strong>Android Studio -&gt; Preferences</strong>&nbsp;on&nbsp;<em>Mac OS X</em>)&nbsp;and&nbsp;make sure that you check&nbsp;<strong>Use default gradle wrapper</strong>.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/blog/newgradlebuildtools/defaultwrapper.png\" alt=\"defaultwrapper\" /></p>
<p>And then modify module's&nbsp;<code>build.gradle</code>&nbsp;file from:</p>
<pre class=\"brush:groovy;auto-links:false;toolbar:false\" contenteditable=\"false\">apply plugin: 'com.android.application'

android {
    compileSdkVersion 22
    buildToolsVersion \"23.0.0 rc3\"

    defaultConfig {
        applicationId \"com.inthecheesefactory.hellojni25\"
        minSdkVersion 15
        targetSdkVersion 22
        versionCode 1
        versionName \"1.0\"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:22.2.0'
}
</pre>
<p>to</p>
<pre class=\"brush:groovy;auto-links:false;toolbar:false\" contenteditable=\"false\">apply plugin: 'com.android.model.application'

model {
    android {
        compileSdkVersion = 22
        buildToolsVersion = \"23.0.0 rc3\"

        defaultConfig.with {
            applicationId = \"com.inthecheesefactory.hellojni25\"
            minSdkVersion.apiLevel = 15
            targetSdkVersion.apiLevel = 22
            versionCode = 1
            versionName = \"1.0\"
        }
    }
    android.buildTypes {
        release {
            isMinifyEnabled = false
            proguardFiles += file('proguard-rules.pro')
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:22.2.0'
}
</pre>
<p>You can notice that structure are&nbsp;quite different. <code>com.android.application</code>&nbsp;is now changed to <code>com.android.model.application</code>. <code>=</code>&nbsp;operator&nbsp;is required for the most properties as well as <code>+=</code> operator which is used to add element(s) to the collection. Some property's name that are&nbsp;not so clear in the term of meaning are also adjusted, for example,&nbsp;<code>minSdkVersion</code>&nbsp;is now changed to&nbsp;<code>minSdkVersion.apiLevel</code></p>
<p>Well, let's sync project with gradle files to apply the change.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/blog/newgradlebuildtools/syncgradle.png\" alt=\"syncgradle\" /></p>
<p>And then simply run it. Everything works fine as expected with the more meaningful syntax, built with new-fresh Gradle 2.5.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/blog/newgradlebuildtools/run.png\" alt=\"run\" /></p>
<h2 class=\"section-heading\">Give NDK support a try</h2>
<p>Android Studio 1.3 was proudly announced with full NDK Support. So let's give a try with some very simple&nbsp;native codes. First of all, you need to define a NDK's directiory to project's <code>local.properties</code> file. Please note that you can use both NDK r10e available in <a href=\"https://developer.android.com/ndk/downloads/index.html\" target=\"_blank\">Android NDK Downloads Page</a>&nbsp;and NDK Bundle available in SDK Manager.</p>
<pre class=\"brush:groovy;auto-links:false;toolbar:false\" contenteditable=\"false\">ndk.dir=PATH_TO_NDK_ROOT</pre>
<p>Create <code>HelloJni.java</code>&nbsp;somewhere in your java package.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">public class HelloJni {
    public native String stringFromJNI();
}</pre>
<p>Make a <strong>jni</strong> folder inside <strong>src/main </strong>and create <code>hello-jni.c</code>&nbsp;file with the content shown below.</p>
<p><strong>hello-jni.c</strong></p>
<pre class=\"brush:cpp;auto-links:false;toolbar:false\" contenteditable=\"false\">#include &lt;string.h&gt;
#include &lt;jni.h&gt;

jstring
Java_com_inthecheesefactory_hellojni25_HelloJni_stringFromJNI( JNIEnv* env,
                                                  jobject thiz )
{
#if defined(__arm__)
  #if defined(__ARM_ARCH_7A__)
    #if defined(__ARM_NEON__)
      #if defined(__ARM_PCS_VFP)
        #define ABI \"armeabi-v7a/NEON (hard-float)\"
      #else
        #define ABI \"armeabi-v7a/NEON\"
      #endif
    #else
      #if defined(__ARM_PCS_VFP)
        #define ABI \"armeabi-v7a (hard-float)\"
      #else
        #define ABI \"armeabi-v7a\"
      #endif
    #endif
  #else
   #define ABI \"armeabi\"
  #endif
#elif defined(__i386__)
   #define ABI \"x86\"
#elif defined(__x86_64__)
   #define ABI \"x86_64\"
#elif defined(__mips64)  /* mips64el-* toolchain defines __mips__ too */
   #define ABI \"mips64\"
#elif defined(__mips__)
   #define ABI \"mips\"
#elif defined(__aarch64__)
   #define ABI \"arm64-v8a\"
#else
   #define ABI \"unknown\"
#endif

    return (*env)-&gt;NewStringUTF(env, \"Hello from JNI !!  Compiled with ABI \" ABI \".\");
}</pre>
<p>Please don't forget to change&nbsp;<code style=\"color: #333333; font-size: 20px; line-height: 1.42857143;\">com_inthecheesefactory_hellojni25</code>&nbsp;to match HelloJni.java's package name or it will just simply not working.</p>
<p>For those who are familiar with NDK, you might notice that Makefiles aren't needed anymore.</p>
<p>And here is the final file structure.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/blog/newgradlebuildtools/files.png\" alt=\"files\" /></p>
<p>Now let's test the JNI code&nbsp;in&nbsp;<code>MainActivity.java</code>&nbsp;by placing code below at the very last line of <strong>MainActivity</strong> class.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">public class MainActivity extends AppCompatActivity {

    ...

    static {
        System.loadLibrary(\"hello-jni\");
    }
}
</pre>
<p>Modify <code>onCreate</code>&nbsp;like this.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        Toast.makeText(MainActivity.this,
                        new HelloJni().stringFromJNI(),
                        Toast.LENGTH_LONG)
                .show();
    }</pre>
<p>Done! You can now use the&nbsp;native code through Java code. Run to try it.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/blog/newgradlebuildtools/screenshot18.png\" alt=\"screenshot18\" /></p>
<p>And with the awesome full support of NDK on Android Studio, Java code and Native code can now&nbsp;work&nbsp;seemlessly. If you&nbsp;inspect code in Java, it will jump you to the right place in native code.</p>
<p><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/blog/newgradlebuildtools/linkjni.png\" alt=\"linkjni\" /></p>
<p>Anyway it is still in the experimental stage. Some features are still under development. Better wait for the final release for serious use.</p>
<h2 class=\"section-heading\">Conclusion</h2>
<p>I must say that the new Gradle Build Tools is very interesting. Major change to DSL looks really promising and far more meaningful than the current one. The great code should be able to tell what it does, agree?</p>
<p>However&nbsp;it is still in the experimental stage. The DSL is&nbsp;not final yet. We better just study and know its existence rather than switching to the new one right now. Anyway I believe that it would not be so long until the stable release available for real use. Be prepared !</p>
<p>More information available here&nbsp;&gt;&gt; <a href=\"http://tools.android.com/tech-docs/new-build-system/gradle-experimental\" target=\"_blank\">Experimental Plugin User Guide</a></p>
<p>=)</p>			") (link nil "http://inthecheesefactory.com/blog/new-gradle-build-tools-with-gradle-2.5/en") (pubDate nil "
				Sun, 12 Jul 2015 19:21:00 +0000			") (guid nil "http://inthecheesefactory.com/blog/new-gradle-build-tools-with-gradle-2.5/en"))) ("Codelab for Android Design Support Library used in I/O Rewind Bangkok session" "<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/designlibrary/cover.jpg\" /></p>
<p>At the moment I believe that there is no any Android Developer who doesn't know about <strong>Material Design</strong> anymore since it officially becomes a design philosophy&nbsp;by shaking the world of design in passed year.</p>
<p>Surprisingly that it was not easy to implement Material Design in android application because those Material Design's UI Component like Floating Action Button (FAB) wasn't available in Android pre-Lollipop. Only choice we had was to use 3rd party library published&nbsp;by indie android developer out there.</p>
<p>Here comes a good news. Last week during&nbsp;Google I/O 2015 event, Google announced the most excited support library within year named <strong>Android Design Support Library</strong> providing a bunch of useful Material Design UI Components in a single library. Let me use this chance to describe to you one by one how to use each of them through this article.</p>
<p>Please check the video below as the&nbsp;final of result of this tutorial.</p>
<p style=\"text-align: center;\"><video width=\"320\" height=\"568\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/target.mp4\" type=\"video/mp4\" /></video></p>
<p>And this is the starting point. A blank Activity with&nbsp;DrawerLayout equipped.</p>
<p style=\"text-align: center;\"><video width=\"320\" height=\"568\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/from.mp4\" type=\"video/mp4\" /></video></p>
<p>Activity is also already adjusted the theme in&nbsp;Material Design's way.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">        &lt;item name=\"colorPrimary\"&gt;#2196F3&lt;/item&gt;
&lt;item name=\"colorPrimaryDark\"&gt;#1565C0&lt;/item&gt;
&lt;item name=\"colorAccent\"&gt;#E91E63&lt;/item&gt;</pre>
<p>OK, let's start !</p>
<h2 class=\"section-heading\">Step 1: Clone Source Code from Github</h2>
<p>I have prepared source code for&nbsp;this codelab. You could simply clone it from&nbsp;<a href=\"https://github.com/nuuneoi/Lab-Android-DesignLibrary\" target=\"_blank\">GitHub</a>. MainActivity is the final result shown above. Please do your codelab in&nbsp;<code>CodeLabActivity</code>&nbsp;prepared in the same project.</p>
<p>First task that you have to do it yourself is ... to successfully run&nbsp;it which it supposes to be done by simply clicking on Run button.</p>
<h2 class=\"section-heading\">Step 2: Add Android Design Support Library&nbsp;Dependency</h2>
<p>First thing to do to include Android Design Support Library in our project is to add a line of dependency code in app's <code>build.gradle</code> file.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">compile 'com.android.support:design:22.2.1'</pre>
<p><span style=\"color: #e74c3c;\">Please note that Design Support Library depends on&nbsp;<em>Support v4</em>&nbsp;and <em>AppCompat v7. </em>Once you include this library in your project, you will also gain an access to those libraries' components.</span></p>
<p>By the way, source code cloned from Github has already been added above line of code.&nbsp;But if you create your own&nbsp;project, you need to add it by yourself.</p>
<h2 class=\"section-heading\">Step 3: Add&nbsp;FAB</h2>
<p>Floating Action Button (FAB) is simply a circle&nbsp;button with some drop shadow that&nbsp;unbelieveably could change the world of design. No surprise why it becomes a signature of Material Design. So let's start with this thing. Add FAB in&nbsp;layout file with&nbsp;<code>FloatingActionButton</code>&nbsp;and wrap it with&nbsp;<code>FrameLayout</code>&nbsp;since it needs some parent to make it aligned at bottom right position of the screen. Place those things as DrawerLayout's content by replacing&nbsp;an existed <code>TextView</code> in&nbsp;<code>activity_code_lab.xml</code>&nbsp;file like below.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;android.support.v4.widget.DrawerLayout ...
xmlns:app=\"http://schemas.android.com/apk/res-auto\"
....&gt;
&lt;FrameLayout
android:id=\"@+id/rootLayout\"
android:layout_width=\"match_parent\"
android:layout_height=\"match_parent\"
&gt;
&lt;android.support.design.widget.FloatingActionButton
android:id=\"@+id/fabBtn\"
android:layout_width=\"wrap_content\"
android:layout_height=\"wrap_content\"
android:layout_gravity=\"bottom|right\"
android:src=\"@drawable/ic_plus\"
app:fabSize=\"normal\" /&gt;
&lt;/FrameLayout&gt;
...
&lt;/android.support.v4.widget.DrawerLayout&gt;</pre>
<p><code>android:src</code>&nbsp;is used to define a Resource ID of icon you want (40dp transparent png file is recommended) while&nbsp;<code>app:fabSize=\"normal\"</code>&nbsp;is used to define FAB's size.&nbsp;<code>normal</code> means the standard&nbsp;56dp button used in most of the case&nbsp;but in case you want to use the smaller one, <code>mini</code>&nbsp;is an another choice that will change its width to&nbsp;40dp.</p>
<p>That's all. FAB is now ready to use! Here is the result when we run the code&nbsp;on Android 4.4.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot20.jpg\" alt=\"screenshot20\" /></p>
<p>But when we run on Android 5.0, the result turn into this ...</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot17n.png\" alt=\"screenshot17n\" /></p>
<p>There is nothing fancy but just a bug. Fortunate&nbsp;that design library's developer team has already known the issue and will release a fixed version in the near future. But if you want to use it now, we could do some workaround by setting FAB's margin right and margin bottom to 16dp for API Level 21+ and to 0dp for Android pre-Lollipop. Thanks Configuration Qualifier that allows us to do it extremely easy.</p>
<p><strong>res/values/dimens.xml</strong></p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">    &lt;dimen name=\"codelab_fab_margin_right\"&gt;0dp&lt;/dimen&gt;
&lt;dimen name=\"codelab_fab_margin_bottom\"&gt;0dp&lt;/dimen&gt;</pre>
<p><strong>res/values-v21/dimens.xml</strong></p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">    &lt;dimen name=\"codelab_fab_margin_right\"&gt;16dp&lt;/dimen&gt;
&lt;dimen name=\"codelab_fab_margin_bottom\"&gt;16dp&lt;/dimen&gt;
</pre>
<p><strong>res/layout/activity_code_lab.xml</strong></p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">    &lt;android.support.design.widget.FloatingActionButton
...
android:layout_marginBottom=\"@dimen/codelab_fab_margin_bottom\"
android:layout_marginRight=\"@dimen/codelab_fab_margin_right\"
.../&gt;</pre>
<p>Hola !</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot18n_1.png\" alt=\"screenshot18n_1\" /></p>
<p>The shadow&nbsp;depth is automatically set to the best practices one, <strong>6dp at idle state</strong> and <strong>12dp at pressed state</strong>. Anyway you are allowed&nbsp;to override these values by defining&nbsp;<code>app:elevation</code>&nbsp;for idle state's shadow depth and<code>app:pressedTranslationZ</code>&nbsp;for press state's.</p>
<p>Regard to button's color, basically FAB uses the accent color but you could override with <code>app:backgroundTint</code>&nbsp;attribute.</p>
<p>Just like a traditional&nbsp;Button, you could handle click with <code>setOnClickListener()</code>. Add the following line of codes in&nbsp;<code>initInstances</code>&nbsp;in&nbsp;<code>CodeLabActivity.java</code>&nbsp;file.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    FloatingActionButton fabBtn;
...
private void initInstances() {
...
fabBtn = (FloatingActionButton) findViewById(R.id.fabBtn);
fabBtn.setOnClickListener(new View.OnClickListener() {
@Override
public void onClick(View v) {
}
});
}
</pre>
<p>Done !</p>
<h2 class=\"section-heading\">Step 4: Play with&nbsp;Snackbar</h2>
<p>Snackbar, a tiny black bar showing a brief message at the bottom of the screen, is&nbsp;also available in this library. Snackbar shares the same concept as Toast but unlike Toast, it shows as a part of UI instead of overlaying on screen.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/designlibrary/snackbar.jpg\" alt=\"snackbar\" /></p>
<p>Not just a concept but also coding style that it is inspired from Toast.&nbsp;You could summon Snackbar by the code below.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">Snackbar.make(someView, \"Hello. I am Snackbar!\", Snackbar.LENGTH_SHORT)
.setAction(\"Undo\", new View.OnClickListener() {
@Override
public void onClick(View v) {
}
})
.show();
</pre>
<p>The first parameter of <code>make()</code> is a View or Layout that you want to show a Snackbar at it's&nbsp;bottom position. In this example, a&nbsp;FrameLayout that wrapped a&nbsp;FAB is the one. <code>setAction()</code> method is used to set the action displayed&nbsp;on the right of Snackbar with a listener corresponded. This method is not required&nbsp;and could be removed.</p>
<p>Now let's give a try by adding the following code.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    FrameLayout rootLayout;
...
private void initInstances() {
...
rootLayout = (FrameLayout) findViewById(R.id.rootLayout);
fabBtn = (FloatingActionButton) findViewById(R.id.fabBtn);
fabBtn.setOnClickListener(new View.OnClickListener() {
@Override
public void onClick(View v) {
Snackbar.make(rootLayout, \"Hello. I am Snackbar!\", Snackbar.LENGTH_SHORT)
.setAction(\"Undo\", new View.OnClickListener() {
@Override
public void onClick(View v) {
}
})
.show();
}
});
}
</pre>
<p>Click at FAB and see the result.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot24.jpg\" alt=\"screenshot24\" /></p>
<p>It works ! but ... not perfectly yet. It is appeared that Snackbar is placed&nbsp;on top of FAB which is totally bad in term of UX. Anyway the behavior is already correct since there is no any relation between Snackbar and FAB defined.</p>
<p>A special Layout is invented for this&nbsp;purpose especially,&nbsp;make child Views work coordinated.&nbsp;No surprise why its name is&nbsp;<code>CoordinatorLayout</code></p>
<h2 class=\"section-heading\">Step 5: Make them collaborated with&nbsp;CoordinatorLayout</h2>
<p>CoordinatorLayout is a Layout let child Views work coordinated. Anyway there is no magic. Each View inside must be designed and implemented to work with CoordinatorLayout as well. FAB and Snackbar are two of those.</p>
<p>So ... let's change&nbsp;FrameLayout wrapped a&nbsp;FAB to&nbsp;<code>CoordinatorLayout</code>&nbsp;now.</p>
<p><strong>res/layout/activity_code_lab.xml</strong></p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">    &lt;android.support.design.widget.CoordinatorLayout
android:id=\"@+id/rootLayout\"
android:layout_width=\"match_parent\"
android:layout_height=\"match_parent\"
&gt;
&lt;android.support.design.widget.FloatingActionButton
... /&gt;
&lt;/android.support.design.widget.CoordinatorLayout&gt;</pre>
<p>And don't forget to change rootLayout's variable type in <code>CodeLabActivity.java</code>&nbsp;to CoordinatorLayout as well or it will crash.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    //FrameLayout rootLayout;
CoordinatorLayout rootLayout;
//rootLayout = (FrameLayout) findViewById(R.id.rootLayout);
rootLayout = (CoordinatorLayout) findViewById(R.id.rootLayout);
</pre>
<p>Another bug is here. On Android 4.4, FAB's margin&nbsp;has surprisingly&nbsp;been dropped&nbsp;to the zero which let its position moved to bottom-right as a result.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot19n.png\" alt=\"screenshot19n\" /></p>
<p>This bug just happens on <em>Android Design Support Library 22.2.1</em> so let's wait for the official fix but for now in case you want to use FloatingActionButton inside CoordinatorLayout, please manually&nbsp;adjust FAB's margin right and margin bottom to 16dp.</p>
<p><strong>res/values/dimens.xml</strong></p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">    &lt;dimen name=\"codelab_fab_margin_right\"&gt;16dp&lt;/dimen&gt;
&lt;dimen name=\"codelab_fab_margin_bottom\"&gt;16dp&lt;/dimen&gt;</pre>
<p>Done</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot20n.png\" alt=\"screenshot20n\" /></p>
<p><strong>Result:</strong> FAB now moves along with Snackbar's appearance and disappearance. Some feature is also added.&nbsp;Snackbar is now able to&nbsp;Swipe-to-dismiss&nbsp;!&nbsp;Here is the result.</p>
<p style=\"text-align: center;\"><video width=\"360\" height=\"200\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling105.mp4\" type=\"video/mp4\" /></video></p>
<p><em>Please note that FAB had ever moved back to the proper position with smoother animation&nbsp;on v22.2.0 but it turns to be worse in&nbsp;v22.2.1</em></p>
<p>From now on, if you plan to use Android Design Support Library. Please think about CoordinatorLayout first since it is something like a core of this library.</p>
<h2 class=\"section-heading\">Step 6: Goodbye&nbsp;ActionBar, Hail&nbsp;Toolbar</h2>
<p>Toolbar is not part of Android Design Support Library but is needed to be used together with the rest of components in this library.</p>
<p>Toolbar is a replacement of traditional Action Bar with far more flexible behavior. I encourage you guys to hiding an Action Bar and switch to Toolbar from now on since new libraries with wonderful features are all designed to work together with Toolbar not Action Bar including components in this Design Support Library.</p>
<p>It is easy to switch to Toolbar. Just start with hiding an Action Bar from an Activity by defining these attributes in AppTheme's style.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.DarkActionBar\"&gt;
&lt;item name=\"windowActionBar\"&gt;false&lt;/item&gt;
&lt;item name=\"windowNoTitle\"&gt;true&lt;/item&gt;
&lt;/style&gt;
</pre>
<p>Then place a Toolbar component inside CoordinatorLayout&nbsp;right before where FAB is.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">    &lt;android.support.design.widget.CoordinatorLayout
...&gt;
&lt;android.support.v7.widget.Toolbar
android:id=\"@+id/toolbar\"
android:layout_width=\"match_parent\"
android:layout_height=\"?attr/actionBarSize\"
android:background=\"?attr/colorPrimary\"
app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\"
app:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\" /&gt;
&lt;android.support.design.widget.FloatingActionButton
...&gt;
&lt;/android.support.design.widget.FloatingActionButton&gt;
&lt;/android.support.design.widget.CoordinatorLayout&gt;</pre>
<p>Now write a code to tell system that we will use&nbsp;Toolbar as an Action Bar replacement with Java Code below.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    Toolbar toolbar;
private void initInstances() {
toolbar = (Toolbar) findViewById(R.id.toolbar);
setSupportActionBar(toolbar);
...
}</pre>
<p>Although it could run fine by&nbsp;now but from I said previously. <em>Things placed inside CoordinatorLayout must be designed and implemented to work with it or it will not coordinate with any other sibling views.</em> But well ... Toolbar is not designed for that. Don't worry, there is no any new special Toolbar here, just an component that is prepared to make Toolbar works perfectly with CoordinatorLayout. An easy task, just simply wrap Toolbar&nbsp;with <code>AppBarLayout</code>. That's all !</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">    &lt;android.support.design.widget.CoordinatorLayout
...&gt;
&lt;android.support.design.widget.AppBarLayout
android:layout_width=\"match_parent\"
android:layout_height=\"wrap_content\"&gt;
&lt;android.support.v7.widget.Toolbar
.../&gt;
&lt;/android.support.design.widget.AppBarLayout&gt;
&lt;android.support.design.widget.FloatingActionButton
...&gt;
&lt;/android.support.design.widget.FloatingActionButton&gt;
&lt;/android.support.design.widget.CoordinatorLayout&gt;</pre>
<p>Now run and test. If you do it all right, you will see that Drawer Menu will overlay on top of the&nbsp;App&nbsp;Bar area.</p>
<p style=\"text-align: center;\"><video width=\"320\" height=\"569\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/toolbarappbarlayout.mp4\" type=\"video/mp4\" /></video></p>
<p>This step is now done. From now on I suggest you to always wrap ToolBar element with&nbsp;AppBarLayout regards to making it works perfectly with CoordinatorLayout.</p>
<h2 class=\"section-heading\">Step 7: Place something in content area</h2>
<p>We got FAB, we got Toolbar. Now it's time to place something in content area of an Activity.</p>
<p>Umm. How about two simple buttons? Well, let's place them between AppBarLayout and FAB.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">            ...
&lt;/android.support.design.widget.AppBarLayout&gt;
&lt;LinearLayout
android:layout_width=\"match_parent\"
android:layout_height=\"match_parent\"
android:orientation=\"vertical\"
&gt;
&lt;Button
android:layout_width=\"wrap_content\"
android:layout_height=\"wrap_content\"
android:text=\"Yo Yo\"
/&gt;
&lt;Button
android:layout_width=\"wrap_content\"
android:layout_height=\"wrap_content\"
android:text=\"Yo Yo\"
/&gt;
&lt;/LinearLayout&gt;
&lt;android.support.design.widget.FloatingActionButton
...&gt;</pre>
<p>Here is the result ...</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot29.jpg\" alt=\"screenshot29\" /></p>
<p>It is appeared that those buttons are&nbsp;unexpectedly placed under Toolbar. Guess why...</p>
<p>Yah, same old reason, <em>LinearLayout is not designed to work with CoordinatorLayout</em>. In this case, there is no any layout to wrap it like Toolbar's case. It is for more easy, you just need to add an attribute to the&nbsp;LinearLayout telling its scroll behavior like below.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;LinearLayout
...
app:layout_behavior=\"@string/appbar_scrolling_view_behavior\"
...
&gt;</pre>
<p>And now they are at the right place. Yah !</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot30.jpg\" alt=\"screenshot30\" /></p>
<p>Done =)</p>
<h2 class=\"section-heading\">Step 8: Play with&nbsp;TabLayout</h2>
<p>Tab is a part of UX best practices in Android Application. Previously if we want to use new Material Design Tab, we need to download source code of SlidingTabLayout and SlidingTabStrip to our project ourselves. Right now we could just use <code>TabLayout</code> provided in this library, also with some more tweak options.</p>
<p>Where should we place this TabLayout? According to Android Application UX Guideline, Tab should be placed on top of the screen not the bottom. And well, it should be above the drop shadow part. So we will place it inside AppBarLayout along with Toolbar. It could be done like this&nbsp;because <span style=\"color: #16a085;\">AppBarLayout is inherited from&nbsp;a vertical LinearLayout</span>.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">        &lt;android.support.design.widget.AppBarLayout ...&gt;
&lt;android.support.v7.widget.Toolbar ... /&gt;
&lt;android.support.design.widget.TabLayout
android:id=\"@+id/tabLayout\"
android:layout_width=\"match_parent\"
android:layout_height=\"wrap_content\"/&gt;
&lt;/android.support.design.widget.AppBarLayout&gt;</pre>
<p>Add some tabs with Java Code.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">    TabLayout tabLayout;
private void initInstances() {
tabLayout = (TabLayout) findViewById(R.id.tabLayout);
tabLayout.addTab(tabLayout.newTab().setText(\"Tab 1\"));
tabLayout.addTab(tabLayout.newTab().setText(\"Tab 2\"));
tabLayout.addTab(tabLayout.newTab().setText(\"Tab 3\"));
...
}</pre>
<p>Here is the result.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot31.jpg\" alt=\"screenshot31\" /></p>
<p>Background color is automatically set to primary color while the indicator line's color is the accent one. But you will notice that Tab's font is still black but we expect it to be white. This happens because we didn't provide it any theme yet. Simply define TabLayout a theme like this.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;android.support.design.widget.TabLayout
...
app:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\" /&gt;</pre>
<p>They are white now.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot32.jpg\" alt=\"screenshot32\" /></p>
<p>You have a choice to manually control TabLayout like above or let it work with ViewPager automatically by calling <code>setupWithViewPager(...)</code>. I believe that it will be used quite frequent for this case.</p>
<p>There are two attributes we could adjust the display in TabLayout.</p>
<p style=\"padding-left: 60px; text-align: left;\"><span style=\"color: #2980b9; font-family: 'courier new', courier, monospace;\"><strong>app:tabMode</strong></span> - set it as&nbsp;<code>fixed</code>&nbsp;if you want to display every single tab on the screen. Good for a small number of tabs but totally a bad&nbsp;choice if there are so&nbsp;many tabs. In the case you are not sure that&nbsp;all of them&nbsp;could be displayed nicely at a&nbsp;time, you could set this attribute&nbsp;as <code>scrollable</code>&nbsp;to let user&nbsp;scroll through tabs instead just like Google Play Store's.</p>
<p style=\"padding-left: 60px; text-align: left;\"><span style=\"color: #2980b9; font-family: 'courier new', courier, monospace;\"><strong>app:tabGravity</strong></span> - set it as&nbsp;<code>fill</code>&nbsp;if you want distribute all available space to each tab or set it as&nbsp;<code>center</code>&nbsp;if you want to place all of the tabs at the center of the screen. Please note that this attribute will be <em>ignored</em> if tabMode is set to scrollable.</p>
<p>Here is what it looks like in each mode.</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/designlibrary/tabmodetabgravity.jpg\" alt=\"tabmodetabgravity\" /></p>
<p>Done with TabLayout =)</p>
<h2 class=\"section-heading\">Step 9: Make AppBarLayout exit the screen along with&nbsp;content when scroll</h2>
<p>One nice Android UX Guideline announced is the App Bar could be scrolled out of the screen along with content to get some more&nbsp;additional space to display content&nbsp;and it is already proved that this UX is good. Previously there were some application that was already implemented this behavior but developer had to do it by themselves. Right now it could be done easily with just a&nbsp;line of code.</p>
<p>First of all, we need to make the content scrollable first by adding some amount of Buttons to LinearLayout. How about 20?</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">                &lt;Button
android:layout_width=\"wrap_content\"
android:layout_height=\"wrap_content\"
android:text=\"Yo Yo\"
/&gt;
...
&lt;!-- Add 20 more buttons here --&gt;
...
&lt;Button
android:layout_width=\"wrap_content\"
android:layout_height=\"wrap_content\"
android:text=\"Yo Yo\"
/&gt;</pre>
<p>And then wrap the LinearLayout with&nbsp;ScrollView and <strong><span style=\"text-decoration: underline;\">don't forget to move layout_behavior from LinearLayout to ScrollView</span></strong> since ScrollView&nbsp;is now a direct child of CoordinatorLayout.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">        &lt;ScrollView
android:layout_width=\"match_parent\"
android:layout_height=\"match_parent\"
android:fillViewport=\"true\"
app:layout_behavior=\"@string/appbar_scrolling_view_behavior\"
&gt;
&lt;LinearLayout
android:layout_width=\"match_parent\"
android:layout_height=\"match_parent\"
android:orientation=\"vertical\"
&gt;
...
&lt;/LinearLayout&gt;
&lt;/ScrollView&gt;
</pre>
<p>Then add a Scroll Flags to Toolbar like this.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;android.support.v7.widget.Toolbar
...
app:layout_scrollFlags=\"scroll|enterAlways\" /&gt;</pre>
<p>Test it.</p>
<p style=\"text-align: center;\"><video width=\"360\" height=\"200\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling1_1.mp4\" type=\"video/mp4\" /></video></p>
<p>Hmm ... Toolbar supposes to scroll out of the screen along with the content but why it appears that nothing happened?</p>
<p>The same old reason ... <span style=\"color: #d35400;\"><strong>ScrollView was not designed to work with CoordinatorLayout</strong></span> (again). You need to use the another one, <code>NestedScrollView</code>, provided in Android Support Library v4, which is designed to work with CoordinatorLayout since born.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;android.support.v4.widget.NestedScrollView ...&gt;
&lt;LinearLayout ...&gt;
...
&lt;/LinearLayout&gt;
&lt;/android.support.v4.widget.NestedScrollView&gt;</pre>
<p>And with the same reason, please note that the classic ListView doesn't work with CoordinatorLayout as well. Only&nbsp;<code>RecyclerView</code>&nbsp;works. Time to change, may be?</p>
<p>Here is the result after changing ScrollView to NestedScrollView.</p>
<p style=\"text-align: center;\"><video width=\"360\" height=\"200\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling2_1.mp4\" type=\"video/mp4\" /></video></p>
<p>Works like a charm! You will notice that Toolbar scroll out of the screen&nbsp;but TabLayout still stay. This is because we didn't set any scroll flags to TabLayout. If you want TabLayout to disappear from the screen as well, just simply define the same attribute to TabLayout.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;android.support.design.widget.TabLayout
...
app:layout_scrollFlags=\"scroll|enterAlways\" /&gt;</pre>
<p>Result</p>
<p style=\"text-align: center;\"><video width=\"360\" height=\"160\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling101.mp4\" type=\"video/mp4\" /></video></p>
<p>Now let's look at it in details. Curious what are the meaning of those flags actually: <code>scroll</code> and <code>enterAlways</code>? Actually there are 4 attribute values that we could set as.</p>
<p style=\"padding-left: 30px;\"><strong><span style=\"font-family: 'courier new', courier, monospace; color: #2980b9;\">scroll</span> </strong>- If you want the view to scroll along the content. You need to apply this flag.</p>
<p style=\"padding-left: 30px;\"><span style=\"font-family: 'courier new', courier, monospace; color: #2980b9;\"><strong>enterAlwaysCollapsed</strong></span> - This flag defines how View enter back into the screen. When your view has declared a minHeight and you use this flag, your View will only enter at its minimum height (i.e., &lsquo;collapsed&rsquo;), only re-expanding to its full height when the scrolling view has reached it&rsquo;s top.&nbsp;Use it with scroll flag like this:&nbsp;<code>scroll|enterAlwaysCollapsed</code></p>
<p style=\"text-align: center;\"><video width=\"360\" height=\"160\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling102.mp4\" type=\"video/mp4\" /></video>&nbsp;</p>
<p style=\"padding-left: 30px;\">Anyway it seems like it doesn't work as described in minHeight part.</p>
<p style=\"padding-left: 30px;\"><span style=\"font-family: 'courier new', courier, monospace; color: #2980b9;\"><strong>enterAlways</strong></span>&nbsp;- this flag ensures that any downward scroll will cause this view to become visible, enabling the &lsquo;quick return&rsquo; pattern. Use it with scroll flag as well:&nbsp;<code>scroll|enterAlways</code></p>
<p style=\"text-align: center;\"><video width=\"360\" height=\"200\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling2_1.mp4\" type=\"video/mp4\" /></video></p>
<p style=\"padding-left: 30px;\"><span style=\"font-family: 'courier new', courier, monospace; color: #2980b9;\"><strong>exitUntilCollapsed</strong></span>&nbsp;- View will scroll off until it is collapsed (its minHeight) and stay like that, for example,</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;android.support.v7.widget.Toolbar
...
android:layout_height=\"192dp\"
android:gravity=\"bottom\"
android:paddingBottom=\"12dp\"
android:minHeight=\"?attr/actionBarSize\"
app:layout_scrollFlags=\"scroll|exitUntilCollapsed\"
/&gt;</pre>
<p style=\"padding-left: 30px;\">Here is the result of code above.</p>
<p style=\"text-align: center;\"><video width=\"360\" height=\"360\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling104.mp4\" type=\"video/mp4\" /></video></p>
<p style=\"padding-left: 30px;\">This mode is frequently used in the component I will talk about in&nbsp;next part.</p>
<p>That's all for this step. Easy, huh?</p>
<h2 class=\"section-heading\">Step 10: Remove&nbsp;TabLayout</h2>
<p>In the next part, we are going to play more with Toolbar so I consider removing TabLayout from UI for the better visual result. To do that just simply comment all of those related codes.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;!--android.support.design.widget.TabLayout --&gt;</pre>
<p>Also remove from Java Code.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">        //tabLayout = (TabLayout) findViewById(R.id.tabLayout);
//tabLayout.addTab(tabLayout.newTab().setText(\"Tab 1\"));
//tabLayout.addTab(tabLayout.newTab().setText(\"Tab 2\"));
//tabLayout.addTab(tabLayout.newTab().setText(\"Tab 3\"));</pre>
<p>OK. Let's go to the next step !</p>
<h2 class=\"section-heading\">Step 11:&nbsp;Make Toolbar collapsable</h2>
<p>Like an example shown in <em>exitUntilCollapsed</em> part, Toolbar could be expanded and collapsed but you will see that it isn't perfect yet. Toolbar still leave the screen in spite of the best practice that those icons (Hamburger, etc.) should stay on the screen.</p>
<p>Design Support Library has already been prepared for this as well. You could make Toolbar collapsable like a magic with <code>CollapsingToolbarLayout</code>&nbsp;which is very easy to use just like other components. Here are&nbsp;the steps:</p>
<p style=\"padding-left: 30px;\">- Wrap&nbsp;<code>Toolbar</code>&nbsp;with <code>CollapsingToolbarLayout</code> but still be under&nbsp;<code>AppBarLayout</code></p>
<p style=\"padding-left: 30px;\">- Remove&nbsp;<code>layout_scrollFlags</code>&nbsp;from Toolbar</p>
<p style=\"padding-left: 30px;\">- Declare&nbsp;<code>layout_scrollFlags</code>&nbsp;for <code>CollapsingToolbarLayout</code> and change it to&nbsp;<code>scroll|exitUntilCollapsed</code></p>
<p style=\"padding-left: 30px;\">- Change&nbsp;AppBarLayout's layout height to the size of expanded state. In this example, I use&nbsp;256dp</p>
<p>Here is the final code.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;android.support.design.widget.AppBarLayout
android:layout_width=\"match_parent\"
android:layout_height=\"256dp\"&gt;
&lt;android.support.design.widget.CollapsingToolbarLayout
android:id=\"@+id/collapsingToolbarLayout\"
android:layout_width=\"match_parent\"
android:layout_height=\"match_parent\"
app:layout_scrollFlags=\"scroll|exitUntilCollapsed\"&gt;
&lt;android.support.v7.widget.Toolbar
android:id=\"@+id/toolbar\"
android:layout_width=\"match_parent\"
android:layout_height=\"?attr/actionBarSize\"
android:background=\"?attr/colorPrimary\"
android:minHeight=\"?attr/actionBarSize\"
app:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"
app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\" /&gt;
&lt;/android.support.design.widget.CollapsingToolbarLayout&gt;
&lt;/android.support.design.widget.AppBarLayout&gt;</pre>
<p>And the result is</p>
<p style=\"text-align: center;\"><video width=\"360\" height=\"360\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling6.mp4\" type=\"video/mp4\" /></video></p>
<p>Looks good but those Toolbar icons still scroll off the screen. We could pin it to let it be always on top of the screen by declare this attribute to Toolbar.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;android.support.v7.widget.Toolbar
...
app:layout_collapseMode=\"pin\"
/&gt;</pre>
<p>Toolbar is now pinned !</p>
<p style=\"text-align: center;\"><video width=\"360\" height=\"360\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling7.mp4\" type=\"video/mp4\" /></video></p>
<p>But wait ... where is the title text?! Unfornate that it's gone in the wind after wrapping Toolbar with CollapsingToolbarLayout. We have to set it manually&nbsp;through&nbsp;<code>setTitle(String)</code>&nbsp;in Java code.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">CollapsingToolbarLayout collapsingToolbarLayout;
private void initInstances() {
...
collapsingToolbarLayout = (CollapsingToolbarLayout) findViewById(R.id.collapsingToolbarLayout);
collapsingToolbarLayout.setTitle(\"Design Library\");
}
</pre>
<p>Result:</p>
<p style=\"text-align: center;\"><video width=\"360\" height=\"360\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling8.mp4\" type=\"video/mp4\" /></video></p>
<p>Title's font color is still black. This is because we didn't set any&nbsp;theme to the App Bar yet. To do so, just simply declare&nbsp;<code>android:theme</code>&nbsp;for&nbsp;<code>AppBarLayout</code>&nbsp;like this.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;android.support.design.widget.AppBarLayout
...
android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"&gt;</pre>
<p>Title now turns into&nbsp;white !</p>
<p style=\"text-align: center;\"><video width=\"360\" height=\"360\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling9.mp4\" type=\"video/mp4\" /></video></p>
<p>With CollapsingToolbarLayout's feature, transition is automatically applied to the title text between collapsed and expanded state. In case you want to change the position of title text in expanded state, you could do so by apply margin through 4 attributes&nbsp;such as&nbsp;<code>app:expandedTitleMargin</code>,&nbsp;<code>app:expandedTitleMarginBottom</code>,&nbsp;<code>app:expandedTitleMarginEnd</code>&nbsp;and&nbsp;<code>app:expandedTitleMarginStart</code></p>
<p>Or if you want to change text's appearance in collapsed and expanded state. You could simply do that by applying TextAppearance through&nbsp;<code>app:collapsedTitleTextAppearance</code>&nbsp;and&nbsp;<code>app:expandedTitleTextAppearance</code>&nbsp;respectively.</p>
<p>Let's try changing margin start to 64dp.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;android.support.design.widget.CollapsingToolbarLayout
...
app:expandedTitleMarginStart=\"64dp\"&gt;</pre>
<p>Result</p>
<p style=\"text-align: center;\"><video width=\"360\" height=\"360\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling10.mp4\" type=\"video/mp4\" /></video></p>
<p>Awesome !</p>
<h2 class=\"no-margin section-heading\">Step 12: Add background image to&nbsp;App Bar</h2>
<p>In many cases,&nbsp;we want to have a beautiful image as an App Bar's background not just a plain color like currently is. Fortunate that CollapsingToolbarLayout is inherited from FrameLayout so we could simply add an ImageView as a background layer behind Toolbar like this.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;ImageView
android:layout_width=\"match_parent\"
android:layout_height=\"match_parent\"
android:scaleType=\"centerCrop\"
android:src=\"@drawable/header\" /&gt;
&lt;android.support.v7.widget.Toolbar
...</pre>
<p>Result</p>
<p style=\"text-align: center;\"><video width=\"360\" height=\"360\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling11.mp4\" type=\"video/mp4\" /></video></p>
<p>Image appears already but there is an unexpected blue bar appears&nbsp;as well. It is nothing fancy but just a Toolbar's background. Simply remove this line from <strong>Toolbar</strong>.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">android:background=\"?attr/colorPrimary\"</pre>
<p>Result</p>
<p style=\"text-align: center;\"><video width=\"360\" height=\"360\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling12.mp4\" type=\"video/mp4\" /></video></p>
<p>Image now just moves along with content scrolling which is a little bit too wooden. We could make it more elegant with parallax mode by declaring collapse mode like this.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;ImageView
...
app:layout_collapseMode=\"parallax\" /&gt;</pre>
<p>Result</p>
<p style=\"text-align: center;\"><video width=\"360\" height=\"360\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling14.mp4\" type=\"video/mp4\" /></video></p>
<p>You also could apply a parallax multiplier between 0.0-1.0.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">app:layout_collapseParallaxMultiplier=\"0.7\"</pre>
<p>Please give a try yourself =)</p>
<p>Lastly you will notice that App Bar's background is always shown as image. You could let it automatically changed into plain color in collapsed mode by declaring attribute <code>app:contentScrim</code>&nbsp;like below:</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;android.support.design.widget.CollapsingToolbarLayout
...
app:contentScrim=\"?attr/colorPrimary\"&gt;</pre>
<p>Result</p>
<p style=\"text-align: center;\"><video width=\"360\" height=\"360\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling15.mp4\" type=\"video/mp4\" /></video></p>
<p>App Bar is now beautiful with just some line of codes =)</p>
<h2 class=\"section-heading\">Step 13: Play with&nbsp;Navigation Drawer</h2>
<p>Right now Drawer Menu pulled from the left side is still just a blank white panel. Previously it is quite a hard task to implement this menu since we have to do it manually with LinearLayout or ListView.</p>
<p>With NavigationView provided in Android Design Support Library,&nbsp;things would be 15.84321 times easier !</p>
<p>First of all, create a header view layout file for Drawer Menu. (It is already there in Github project.)</p>
<p><strong>res/layout/nav_header.xml<br /></strong></p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;
&lt;FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"
android:layout_width=\"match_parent\"
android:layout_height=\"192dp\"
android:theme=\"@style/ThemeOverlay.AppCompat.Dark\"
&gt;
&lt;ImageView
android:layout_width=\"match_parent\"
android:layout_height=\"match_parent\"
android:src=\"@drawable/nav_header_bg\"
android:scaleType=\"centerCrop\" /&gt;
&lt;ImageView
android:layout_width=\"wrap_content\"
android:layout_height=\"wrap_content\"
android:src=\"@drawable/nuuneoi\"
android:layout_gravity=\"bottom\"
android:layout_marginBottom=\"36dp\" /&gt;
&lt;TextView
android:layout_width=\"match_parent\"
android:layout_height=\"wrap_content\"
android:layout_gravity=\"bottom\"
android:layout_margin=\"16dp\"
android:text=\"nuuneoi\"
android:textAppearance=\"@style/TextAppearance.AppCompat.Body1\"/&gt;
&lt;/FrameLayout&gt;
</pre>
<p>Now create&nbsp;a menu resource file.</p>
<p><strong>res/menu/navigation_drawer_items.xml</strong></p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;
&lt;menu xmlns:android=\"http://schemas.android.com/apk/res/android\"&gt;
&lt;group android:checkableBehavior=\"all\"&gt;
&lt;item
android:id=\"@+id/navItem1\"
android:icon=\"@drawable/ic_action_location_found_dark\"
android:title=\"Home\"/&gt;
&lt;item
android:id=\"@+id/navItem2\"
android:icon=\"@drawable/ic_action_location_found_dark\"
android:title=\"Blog\"/&gt;
&lt;item
android:id=\"@+id/navItem3\"
android:icon=\"@drawable/ic_action_location_found_dark\"
android:title=\"About\"/&gt;
&lt;item
android:id=\"@+id/navItem4\"
android:icon=\"@drawable/ic_action_location_found_dark\"
android:title=\"Contact\"/&gt;
&lt;/group&gt;
&lt;/menu&gt;</pre>
<p>Place <code>NavigationView</code>&nbsp;binding both resources above as Drawer Menu's menu area by replace an existed white LinearLayout with the following code.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">        ...
&lt;/android.support.design.widget.CoordinatorLayout&gt;
&lt;android.support.design.widget.NavigationView
android:id=\"@+id/navigation\"
android:layout_width=\"wrap_content\"
android:layout_height=\"match_parent\"
android:layout_gravity=\"start\"
app:headerLayout=\"@layout/nav_header\"
app:itemIconTint=\"#333\"
app:itemTextColor=\"#333\"
app:menu=\"@menu/navigation_drawer_items\" /&gt;
&lt;/android.support.v4.widget.DrawerLayout&gt;</pre>
<p>Drawer Menu is now summoned ! Woo hooo</p>
<p style=\"text-align: center;\"><video width=\"320\" height=\"569\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling16_1.mp4\" type=\"video/mp4\" /></video></p>
<p>NavigationView is designed for&nbsp;Drawer Menu&nbsp;especially. So everything would be created and measured automatically including width of the menu which we have to define ourselves case by case with Configuration Qualifier previously.</p>
<p>To handle those menu items click event, you could simply declare a listener with&nbsp;<code>setNavigationItemSelectedListener</code>&nbsp;like below:</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    NavigationView navigation;
private void initInstances() {
...
navigation = (NavigationView) findViewById(R.id.navigation);
navigation.setNavigationItemSelectedListener(new NavigationView.OnNavigationItemSelectedListener() {
@Override
public boolean onNavigationItemSelected(MenuItem menuItem) {
int id = menuItem.getItemId();
switch (id) {
case R.id.navItem1:
break;
case R.id.navItem2:
break;
case R.id.navItem3:
break;
}
return false;
}
});
}</pre>
<p>In the&nbsp;real&nbsp;use, please feel free to declare your own header view and modify menu items as you wanted.</p>
<h2 class=\"section-heading\">Step 14: Modernize&nbsp;EditText with&nbsp;TextInputLayout</h2>
<p>The last part of this Codelab is here. You could change an old style EditText to a modern one that always&nbsp;show Hint and Error Message.</p>
<p>To do so, just simply wrap an EditText with&nbsp;TextInputLayout. That's all !</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;android.support.design.widget.TextInputLayout
android:layout_width=\"match_parent\"
android:layout_height=\"wrap_content\"&gt;
&lt;EditText
android:layout_width=\"match_parent\"
android:layout_height=\"wrap_content\"
android:hint=\"Username\" /&gt;
&lt;/android.support.design.widget.TextInputLayout&gt;</pre>
<p>Put two of them inside NestedScrollView and see the result.</p>
<p style=\"text-align: center;\"><video width=\"320\" height=\"569\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling17.mp4\" type=\"video/mp4\" /></video></p>
<p>Incredibly easy, huh? =)</p>
<h2 class=\"section-heading\">Conclusion</h2>
<p>Android Design Support Library is a very promising support library. It is totally recommended&nbsp;for&nbsp;your production. Anyway it still contains with some bug, if you really want to use it now please be sure that you know about&nbsp;all of the issues.</p>
<p>Such a long tutorial. Hope you find it useful =)</p>
<hr />
<h2 class=\"section-heading\">Updated [24/07/2015]: From v22.2.0 to v22.2.1</h2>
<p>Few days ago, Android team launched the new version of Android Support Library, v22.2.1, with many bug fixed and also with some new bug ... I have already given it a try and updated this codelab to match the result in v22.2.1.</p>
<p>And regards to the bug in the library,&nbsp;here is that list of that what I found:</p>
<h2 class=\"subsection-heading\">Bug fixed</h2>
<p>- <code>TabLayout</code> now works perfectly on&nbsp;AppBarLayout. UI is now fluid and there is no more rendering problem.</p>
<p><video width=\"360\" height=\"200\" style=\"display: block; margin-left: auto; margin-right: auto;\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling102.mp4\" type=\"video/mp4\" /></video></p>
<p>- <code>FloatingActionButton</code> on Android 5.0+ now comes with drop shadow. There is no need to manually set <code>app:borderWidth</code> anymore</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot18n_1.png\" alt=\"screenshot18n_1\" /></p>
<p>- <code>exitUntilCollapsed</code> scrollMode works like described now</p>
<p style=\"text-align: center;\"><video width=\"360\" height=\"200\" controls=\"controls\" source=\"\" type=\"video/mp4\">scrolling104<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling104.mp4\" type=\"video/mp4\" /></video></p>
<h2 class=\"subsection-heading\">Bug that still persists</h2>
<p>- <code>FloatingActionButton</code> on Android 5.0+ still doesn't come with margin right and margin bottom unlike in&nbsp;pre-Lollipop. Still needs to manually set the different margin for those configurations.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot20.jpg\" alt=\"screenshot20\" /></p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot17n.png\" alt=\"screenshot17n\" /></p>
<h2 class=\"subsection-heading\">New bug or worse behavior</h2>
<p>- On Android pre-Lollipop, when FAB is put inside CoordinatorLayout, its&nbsp;margin has been immediately set to zero although it has ever had some margin when it is put in another type of Layout. I am not sure which one is the expected behavior but I believe&nbsp;that it supposes to be only one ...</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot20n.png\" alt=\"screenshot20n\" /><br /><span style=\"font-size: 12pt;\"><em><strong>When placed inside FrameLayout</strong></em></span></p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot19n.png\" alt=\"screenshot19n\" /><br /><span style=\"font-size: 12pt;\"><em><strong>When placed inside&nbsp;CoordinatorLayout</strong></em></span></p>
<p>- The animation of FAB to move back to the proper position when Snackbar is swipe-to-dismissed&nbsp;looks strange</p>
<p><video width=\"360\" height=\"200\" style=\"display: block; margin-left: auto; margin-right: auto;\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling105.mp4\" type=\"video/mp4\" /></video></p>
<p>Please be patient. I am strongly believe that team are working on these issues for the next release =)</p>" "http://inthecheesefactory.com/blog/android-design-support-library-codelab/en" (21895 50600) old 14 nil nil ((title nil "
				Codelab for Android Design Support Library used in I/O Rewind Bangkok session			") (description nil "
				<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/designlibrary/cover.jpg\" /></p> 
<p>At the moment I believe that there is no any Android Developer who doesn't know about <strong>Material Design</strong> anymore since it officially becomes a design philosophy&nbsp;by shaking the world of design in passed year.</p>
<p>Surprisingly that it was not easy to implement Material Design in android application because those Material Design's UI Component like Floating Action Button (FAB) wasn't available in Android pre-Lollipop. Only choice we had was to use 3rd party library published&nbsp;by indie android developer out there.</p>
<p>Here comes a good news. Last week during&nbsp;Google I/O 2015 event, Google announced the most excited support library within year named <strong>Android Design Support Library</strong> providing a bunch of useful Material Design UI Components in a single library. Let me use this chance to describe to you one by one how to use each of them through this article.</p>
<p>Please check the video below as the&nbsp;final of result of this tutorial.</p>
<p style=\"text-align: center;\"><video width=\"320\" height=\"568\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/target.mp4\" type=\"video/mp4\" /></video></p>
<p>And this is the starting point. A blank Activity with&nbsp;DrawerLayout equipped.</p>
<p style=\"text-align: center;\"><video width=\"320\" height=\"568\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/from.mp4\" type=\"video/mp4\" /></video></p>
<p>Activity is also already adjusted the theme in&nbsp;Material Design's way.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">        &lt;item name=\"colorPrimary\"&gt;#2196F3&lt;/item&gt;
        &lt;item name=\"colorPrimaryDark\"&gt;#1565C0&lt;/item&gt;
        &lt;item name=\"colorAccent\"&gt;#E91E63&lt;/item&gt;</pre>
<p>OK, let's start !</p>
<h2 class=\"section-heading\">Step 1: Clone Source Code from Github</h2>
<p>I have prepared source code for&nbsp;this codelab. You could simply clone it from&nbsp;<a href=\"https://github.com/nuuneoi/Lab-Android-DesignLibrary\" target=\"_blank\">GitHub</a>. MainActivity is the final result shown above. Please do your codelab in&nbsp;<code>CodeLabActivity</code>&nbsp;prepared in the same project.</p>
<p>First task that you have to do it yourself is ... to successfully run&nbsp;it which it supposes to be done by simply clicking on Run button.</p>
<h2 class=\"section-heading\">Step 2: Add Android Design Support Library&nbsp;Dependency</h2>
<p>First thing to do to include Android Design Support Library in our project is to add a line of dependency code in app's <code>build.gradle</code> file.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">compile 'com.android.support:design:22.2.1'</pre>
<p><span style=\"color: #e74c3c;\">Please note that Design Support Library depends on&nbsp;<em>Support v4</em>&nbsp;and <em>AppCompat v7. </em>Once you include this library in your project, you will also gain an access to those libraries' components.</span></p>
<p>By the way, source code cloned from Github has already been added above line of code.&nbsp;But if you create your own&nbsp;project, you need to add it by yourself.</p>
<h2 class=\"section-heading\">Step 3: Add&nbsp;FAB</h2>
<p>Floating Action Button (FAB) is simply a circle&nbsp;button with some drop shadow that&nbsp;unbelieveably could change the world of design. No surprise why it becomes a signature of Material Design. So let's start with this thing. Add FAB in&nbsp;layout file with&nbsp;<code>FloatingActionButton</code>&nbsp;and wrap it with&nbsp;<code>FrameLayout</code>&nbsp;since it needs some parent to make it aligned at bottom right position of the screen. Place those things as DrawerLayout's content by replacing&nbsp;an existed <code>TextView</code> in&nbsp;<code>activity_code_lab.xml</code>&nbsp;file like below.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;android.support.v4.widget.DrawerLayout ...
    xmlns:app=\"http://schemas.android.com/apk/res-auto\"
    ....&gt;

    &lt;FrameLayout
        android:id=\"@+id/rootLayout\"
        android:layout_width=\"match_parent\"
        android:layout_height=\"match_parent\"
        &gt;

        &lt;android.support.design.widget.FloatingActionButton
            android:id=\"@+id/fabBtn\"
            android:layout_width=\"wrap_content\"
            android:layout_height=\"wrap_content\"
            android:layout_gravity=\"bottom|right\"
            android:src=\"@drawable/ic_plus\"
            app:fabSize=\"normal\" /&gt;

    &lt;/FrameLayout&gt;

    ...

&lt;/android.support.v4.widget.DrawerLayout&gt;</pre>
<p><code>android:src</code>&nbsp;is used to define a Resource ID of icon you want (40dp transparent png file is recommended) while&nbsp;<code>app:fabSize=\"normal\"</code>&nbsp;is used to define FAB's size.&nbsp;<code>normal</code> means the standard&nbsp;56dp button used in most of the case&nbsp;but in case you want to use the smaller one, <code>mini</code>&nbsp;is an another choice that will change its width to&nbsp;40dp.</p>
<p>That's all. FAB is now ready to use! Here is the result when we run the code&nbsp;on Android 4.4.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot20.jpg\" alt=\"screenshot20\" /></p>
<p>But when we run on Android 5.0, the result turn into this ...</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot17n.png\" alt=\"screenshot17n\" /></p>
<p>There is nothing fancy but just a bug. Fortunate&nbsp;that design library's developer team has already known the issue and will release a fixed version in the near future. But if you want to use it now, we could do some workaround by setting FAB's margin right and margin bottom to 16dp for API Level 21+ and to 0dp for Android pre-Lollipop. Thanks Configuration Qualifier that allows us to do it extremely easy.</p>
<p><strong>res/values/dimens.xml</strong></p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">    &lt;dimen name=\"codelab_fab_margin_right\"&gt;0dp&lt;/dimen&gt;
    &lt;dimen name=\"codelab_fab_margin_bottom\"&gt;0dp&lt;/dimen&gt;</pre>
<p><strong>res/values-v21/dimens.xml</strong></p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">    &lt;dimen name=\"codelab_fab_margin_right\"&gt;16dp&lt;/dimen&gt;
    &lt;dimen name=\"codelab_fab_margin_bottom\"&gt;16dp&lt;/dimen&gt;
</pre>
<p><strong>res/layout/activity_code_lab.xml</strong></p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">    &lt;android.support.design.widget.FloatingActionButton
        ...
        android:layout_marginBottom=\"@dimen/codelab_fab_margin_bottom\"
        android:layout_marginRight=\"@dimen/codelab_fab_margin_right\"
        .../&gt;</pre>
<p>Hola !</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot18n_1.png\" alt=\"screenshot18n_1\" /></p>
<p>The shadow&nbsp;depth is automatically set to the best practices one, <strong>6dp at idle state</strong> and <strong>12dp at pressed state</strong>. Anyway you are allowed&nbsp;to override these values by defining&nbsp;<code>app:elevation</code>&nbsp;for idle state's shadow depth and<code>app:pressedTranslationZ</code>&nbsp;for press state's.</p>
<p>Regard to button's color, basically FAB uses the accent color but you could override with <code>app:backgroundTint</code>&nbsp;attribute.</p>
<p>Just like a traditional&nbsp;Button, you could handle click with <code>setOnClickListener()</code>. Add the following line of codes in&nbsp;<code>initInstances</code>&nbsp;in&nbsp;<code>CodeLabActivity.java</code>&nbsp;file.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    FloatingActionButton fabBtn;

    ...

    private void initInstances() {
        ...

        fabBtn = (FloatingActionButton) findViewById(R.id.fabBtn);
        fabBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

            }
        });
    }
</pre>
<p>Done !</p>
<h2 class=\"section-heading\">Step 4: Play with&nbsp;Snackbar</h2>
<p>Snackbar, a tiny black bar showing a brief message at the bottom of the screen, is&nbsp;also available in this library. Snackbar shares the same concept as Toast but unlike Toast, it shows as a part of UI instead of overlaying on screen.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/designlibrary/snackbar.jpg\" alt=\"snackbar\" /></p>
<p>Not just a concept but also coding style that it is inspired from Toast.&nbsp;You could summon Snackbar by the code below.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">Snackbar.make(someView, \"Hello. I am Snackbar!\", Snackbar.LENGTH_SHORT)
        .setAction(\"Undo\", new View.OnClickListener() {
            @Override
            public void onClick(View v) {

            }
        })
        .show();
</pre>
<p>The first parameter of <code>make()</code> is a View or Layout that you want to show a Snackbar at it's&nbsp;bottom position. In this example, a&nbsp;FrameLayout that wrapped a&nbsp;FAB is the one. <code>setAction()</code> method is used to set the action displayed&nbsp;on the right of Snackbar with a listener corresponded. This method is not required&nbsp;and could be removed.</p>
<p>Now let's give a try by adding the following code.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    FrameLayout rootLayout;

    ...

    private void initInstances() {
        ...

        rootLayout = (FrameLayout) findViewById(R.id.rootLayout);

        fabBtn = (FloatingActionButton) findViewById(R.id.fabBtn);
        fabBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Snackbar.make(rootLayout, \"Hello. I am Snackbar!\", Snackbar.LENGTH_SHORT)
                        .setAction(\"Undo\", new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {

                            }
                        })
                        .show();
            }
        });
    }
</pre>
<p>Click at FAB and see the result.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot24.jpg\" alt=\"screenshot24\" /></p>
<p>It works ! but ... not perfectly yet. It is appeared that Snackbar is placed&nbsp;on top of FAB which is totally bad in term of UX. Anyway the behavior is already correct since there is no any relation between Snackbar and FAB defined.</p>
<p>A special Layout is invented for this&nbsp;purpose especially,&nbsp;make child Views work coordinated.&nbsp;No surprise why its name is&nbsp;<code>CoordinatorLayout</code></p>
<h2 class=\"section-heading\">Step 5: Make them collaborated with&nbsp;CoordinatorLayout</h2>
<p>CoordinatorLayout is a Layout let child Views work coordinated. Anyway there is no magic. Each View inside must be designed and implemented to work with CoordinatorLayout as well. FAB and Snackbar are two of those.</p>
<p>So ... let's change&nbsp;FrameLayout wrapped a&nbsp;FAB to&nbsp;<code>CoordinatorLayout</code>&nbsp;now.</p>
<p><strong>res/layout/activity_code_lab.xml</strong></p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">    &lt;android.support.design.widget.CoordinatorLayout
        android:id=\"@+id/rootLayout\"
        android:layout_width=\"match_parent\"
        android:layout_height=\"match_parent\"
        &gt;
        &lt;android.support.design.widget.FloatingActionButton
            ... /&gt;
    &lt;/android.support.design.widget.CoordinatorLayout&gt;</pre>
<p>And don't forget to change rootLayout's variable type in <code>CodeLabActivity.java</code>&nbsp;to CoordinatorLayout as well or it will crash.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    //FrameLayout rootLayout;
    CoordinatorLayout rootLayout;

    //rootLayout = (FrameLayout) findViewById(R.id.rootLayout);
    rootLayout = (CoordinatorLayout) findViewById(R.id.rootLayout);
</pre>
<p>Another bug is here. On Android 4.4, FAB's margin&nbsp;has surprisingly&nbsp;been dropped&nbsp;to the zero which let its position moved to bottom-right as a result.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot19n.png\" alt=\"screenshot19n\" /></p>
<p>This bug just happens on <em>Android Design Support Library 22.2.1</em> so let's wait for the official fix but for now in case you want to use FloatingActionButton inside CoordinatorLayout, please manually&nbsp;adjust FAB's margin right and margin bottom to 16dp.</p>
<p><strong>res/values/dimens.xml</strong></p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">    &lt;dimen name=\"codelab_fab_margin_right\"&gt;16dp&lt;/dimen&gt;
    &lt;dimen name=\"codelab_fab_margin_bottom\"&gt;16dp&lt;/dimen&gt;</pre>
<p>Done</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot20n.png\" alt=\"screenshot20n\" /></p>
<p><strong>Result:</strong> FAB now moves along with Snackbar's appearance and disappearance. Some feature is also added.&nbsp;Snackbar is now able to&nbsp;Swipe-to-dismiss&nbsp;!&nbsp;Here is the result.</p>
<p style=\"text-align: center;\"><video width=\"360\" height=\"200\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling105.mp4\" type=\"video/mp4\" /></video></p>
<p><em>Please note that FAB had ever moved back to the proper position with smoother animation&nbsp;on v22.2.0 but it turns to be worse in&nbsp;v22.2.1</em></p>
<p>From now on, if you plan to use Android Design Support Library. Please think about CoordinatorLayout first since it is something like a core of this library.</p>
<h2 class=\"section-heading\">Step 6: Goodbye&nbsp;ActionBar, Hail&nbsp;Toolbar</h2>
<p>Toolbar is not part of Android Design Support Library but is needed to be used together with the rest of components in this library.</p>
<p>Toolbar is a replacement of traditional Action Bar with far more flexible behavior. I encourage you guys to hiding an Action Bar and switch to Toolbar from now on since new libraries with wonderful features are all designed to work together with Toolbar not Action Bar including components in this Design Support Library.</p>
<p>It is easy to switch to Toolbar. Just start with hiding an Action Bar from an Activity by defining these attributes in AppTheme's style.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.DarkActionBar\"&gt;
    &lt;item name=\"windowActionBar\"&gt;false&lt;/item&gt;
    &lt;item name=\"windowNoTitle\"&gt;true&lt;/item&gt;
&lt;/style&gt;
</pre>
<p>Then place a Toolbar component inside CoordinatorLayout&nbsp;right before where FAB is.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">    &lt;android.support.design.widget.CoordinatorLayout
        ...&gt;
        &lt;android.support.v7.widget.Toolbar
            android:id=\"@+id/toolbar\"
            android:layout_width=\"match_parent\"
            android:layout_height=\"?attr/actionBarSize\"
            android:background=\"?attr/colorPrimary\"
            app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\"
            app:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\" /&gt;
        &lt;android.support.design.widget.FloatingActionButton
            ...&gt;
        &lt;/android.support.design.widget.FloatingActionButton&gt;
    &lt;/android.support.design.widget.CoordinatorLayout&gt;</pre>
<p>Now write a code to tell system that we will use&nbsp;Toolbar as an Action Bar replacement with Java Code below.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    Toolbar toolbar;

    private void initInstances() {
        toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);
        ...
    }</pre>
<p>Although it could run fine by&nbsp;now but from I said previously. <em>Things placed inside CoordinatorLayout must be designed and implemented to work with it or it will not coordinate with any other sibling views.</em> But well ... Toolbar is not designed for that. Don't worry, there is no any new special Toolbar here, just an component that is prepared to make Toolbar works perfectly with CoordinatorLayout. An easy task, just simply wrap Toolbar&nbsp;with <code>AppBarLayout</code>. That's all !</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">    &lt;android.support.design.widget.CoordinatorLayout
        ...&gt;

        &lt;android.support.design.widget.AppBarLayout
            android:layout_width=\"match_parent\"
            android:layout_height=\"wrap_content\"&gt;
           &lt;android.support.v7.widget.Toolbar
               .../&gt;
        &lt;/android.support.design.widget.AppBarLayout&gt;

        &lt;android.support.design.widget.FloatingActionButton
            ...&gt;
        &lt;/android.support.design.widget.FloatingActionButton&gt;
    &lt;/android.support.design.widget.CoordinatorLayout&gt;</pre>
<p>Now run and test. If you do it all right, you will see that Drawer Menu will overlay on top of the&nbsp;App&nbsp;Bar area.</p>
<p style=\"text-align: center;\"><video width=\"320\" height=\"569\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/toolbarappbarlayout.mp4\" type=\"video/mp4\" /></video></p>
<p>This step is now done. From now on I suggest you to always wrap ToolBar element with&nbsp;AppBarLayout regards to making it works perfectly with CoordinatorLayout.</p>
<h2 class=\"section-heading\">Step 7: Place something in content area</h2>
<p>We got FAB, we got Toolbar. Now it's time to place something in content area of an Activity.</p>
<p>Umm. How about two simple buttons? Well, let's place them between AppBarLayout and FAB.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">            ...
        &lt;/android.support.design.widget.AppBarLayout&gt;

        &lt;LinearLayout
            android:layout_width=\"match_parent\"
            android:layout_height=\"match_parent\"
            android:orientation=\"vertical\"
            &gt;
            &lt;Button
                android:layout_width=\"wrap_content\"
                android:layout_height=\"wrap_content\"
                android:text=\"Yo Yo\"
                /&gt;
            &lt;Button
                android:layout_width=\"wrap_content\"
                android:layout_height=\"wrap_content\"
                android:text=\"Yo Yo\"
                /&gt;
        &lt;/LinearLayout&gt;

        &lt;android.support.design.widget.FloatingActionButton
            ...&gt;</pre>
<p>Here is the result ...</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot29.jpg\" alt=\"screenshot29\" /></p>
<p>It is appeared that those buttons are&nbsp;unexpectedly placed under Toolbar. Guess why...</p>
<p>Yah, same old reason, <em>LinearLayout is not designed to work with CoordinatorLayout</em>. In this case, there is no any layout to wrap it like Toolbar's case. It is for more easy, you just need to add an attribute to the&nbsp;LinearLayout telling its scroll behavior like below.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;LinearLayout
    ...
    app:layout_behavior=\"@string/appbar_scrolling_view_behavior\"
    ...
    &gt;</pre>
<p>And now they are at the right place. Yah !</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot30.jpg\" alt=\"screenshot30\" /></p>
<p>Done =)</p>
<h2 class=\"section-heading\">Step 8: Play with&nbsp;TabLayout</h2>
<p>Tab is a part of UX best practices in Android Application. Previously if we want to use new Material Design Tab, we need to download source code of SlidingTabLayout and SlidingTabStrip to our project ourselves. Right now we could just use <code>TabLayout</code> provided in this library, also with some more tweak options.</p>
<p>Where should we place this TabLayout? According to Android Application UX Guideline, Tab should be placed on top of the screen not the bottom. And well, it should be above the drop shadow part. So we will place it inside AppBarLayout along with Toolbar. It could be done like this&nbsp;because <span style=\"color: #16a085;\">AppBarLayout is inherited from&nbsp;a vertical LinearLayout</span>.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">        &lt;android.support.design.widget.AppBarLayout ...&gt;

            &lt;android.support.v7.widget.Toolbar ... /&gt;

            &lt;android.support.design.widget.TabLayout
                android:id=\"@+id/tabLayout\"
                android:layout_width=\"match_parent\"
                android:layout_height=\"wrap_content\"/&gt;

        &lt;/android.support.design.widget.AppBarLayout&gt;</pre>
<p>Add some tabs with Java Code.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">    TabLayout tabLayout;

    private void initInstances() {
        tabLayout = (TabLayout) findViewById(R.id.tabLayout);
        tabLayout.addTab(tabLayout.newTab().setText(\"Tab 1\"));
        tabLayout.addTab(tabLayout.newTab().setText(\"Tab 2\"));
        tabLayout.addTab(tabLayout.newTab().setText(\"Tab 3\"));

        ...
    }</pre>
<p>Here is the result.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot31.jpg\" alt=\"screenshot31\" /></p>
<p>Background color is automatically set to primary color while the indicator line's color is the accent one. But you will notice that Tab's font is still black but we expect it to be white. This happens because we didn't provide it any theme yet. Simply define TabLayout a theme like this.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;android.support.design.widget.TabLayout
    ...
    app:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\" /&gt;</pre>
<p>They are white now.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot32.jpg\" alt=\"screenshot32\" /></p>
<p>You have a choice to manually control TabLayout like above or let it work with ViewPager automatically by calling <code>setupWithViewPager(...)</code>. I believe that it will be used quite frequent for this case.</p>
<p>There are two attributes we could adjust the display in TabLayout.</p>
<p style=\"padding-left: 60px; text-align: left;\"><span style=\"color: #2980b9; font-family: 'courier new', courier, monospace;\"><strong>app:tabMode</strong></span> - set it as&nbsp;<code>fixed</code>&nbsp;if you want to display every single tab on the screen. Good for a small number of tabs but totally a bad&nbsp;choice if there are so&nbsp;many tabs. In the case you are not sure that&nbsp;all of them&nbsp;could be displayed nicely at a&nbsp;time, you could set this attribute&nbsp;as <code>scrollable</code>&nbsp;to let user&nbsp;scroll through tabs instead just like Google Play Store's.</p>
<p style=\"padding-left: 60px; text-align: left;\"><span style=\"color: #2980b9; font-family: 'courier new', courier, monospace;\"><strong>app:tabGravity</strong></span> - set it as&nbsp;<code>fill</code>&nbsp;if you want distribute all available space to each tab or set it as&nbsp;<code>center</code>&nbsp;if you want to place all of the tabs at the center of the screen. Please note that this attribute will be <em>ignored</em> if tabMode is set to scrollable.</p>
<p>Here is what it looks like in each mode.</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/designlibrary/tabmodetabgravity.jpg\" alt=\"tabmodetabgravity\" /></p>
<p>Done with TabLayout =)</p>
<h2 class=\"section-heading\">Step 9: Make AppBarLayout exit the screen along with&nbsp;content when scroll</h2>
<p>One nice Android UX Guideline announced is the App Bar could be scrolled out of the screen along with content to get some more&nbsp;additional space to display content&nbsp;and it is already proved that this UX is good. Previously there were some application that was already implemented this behavior but developer had to do it by themselves. Right now it could be done easily with just a&nbsp;line of code.</p>
<p>First of all, we need to make the content scrollable first by adding some amount of Buttons to LinearLayout. How about 20?</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">                &lt;Button
                    android:layout_width=\"wrap_content\"
                    android:layout_height=\"wrap_content\"
                    android:text=\"Yo Yo\"
                    /&gt;
                ...
                &lt;!-- Add 20 more buttons here --&gt;
                ...
                &lt;Button
                    android:layout_width=\"wrap_content\"
                    android:layout_height=\"wrap_content\"
                    android:text=\"Yo Yo\"
                    /&gt;</pre>
<p>And then wrap the LinearLayout with&nbsp;ScrollView and <strong><span style=\"text-decoration: underline;\">don't forget to move layout_behavior from LinearLayout to ScrollView</span></strong> since ScrollView&nbsp;is now a direct child of CoordinatorLayout.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">        &lt;ScrollView
            android:layout_width=\"match_parent\"
            android:layout_height=\"match_parent\"
            android:fillViewport=\"true\"
            app:layout_behavior=\"@string/appbar_scrolling_view_behavior\"
            &gt;
            &lt;LinearLayout
                android:layout_width=\"match_parent\"
                android:layout_height=\"match_parent\"
                android:orientation=\"vertical\"
                &gt;
                ...
            &lt;/LinearLayout&gt;
        &lt;/ScrollView&gt;
</pre>
<p>Then add a Scroll Flags to Toolbar like this.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;android.support.v7.widget.Toolbar
    ...
    app:layout_scrollFlags=\"scroll|enterAlways\" /&gt;</pre>
<p>Test it.</p>
<p style=\"text-align: center;\"><video width=\"360\" height=\"200\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling1_1.mp4\" type=\"video/mp4\" /></video></p>
<p>Hmm ... Toolbar supposes to scroll out of the screen along with the content but why it appears that nothing happened?</p>
<p>The same old reason ... <span style=\"color: #d35400;\"><strong>ScrollView was not designed to work with CoordinatorLayout</strong></span> (again). You need to use the another one, <code>NestedScrollView</code>, provided in Android Support Library v4, which is designed to work with CoordinatorLayout since born.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;android.support.v4.widget.NestedScrollView ...&gt;
    &lt;LinearLayout ...&gt;
        ...
    &lt;/LinearLayout&gt;
&lt;/android.support.v4.widget.NestedScrollView&gt;</pre>
<p>And with the same reason, please note that the classic ListView doesn't work with CoordinatorLayout as well. Only&nbsp;<code>RecyclerView</code>&nbsp;works. Time to change, may be?</p>
<p>Here is the result after changing ScrollView to NestedScrollView.</p>
<p style=\"text-align: center;\"><video width=\"360\" height=\"200\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling2_1.mp4\" type=\"video/mp4\" /></video></p>
<p>Works like a charm! You will notice that Toolbar scroll out of the screen&nbsp;but TabLayout still stay. This is because we didn't set any scroll flags to TabLayout. If you want TabLayout to disappear from the screen as well, just simply define the same attribute to TabLayout.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;android.support.design.widget.TabLayout
    ...
    app:layout_scrollFlags=\"scroll|enterAlways\" /&gt;</pre>
<p>Result</p>
<p style=\"text-align: center;\"><video width=\"360\" height=\"160\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling101.mp4\" type=\"video/mp4\" /></video></p>
<p>Now let's look at it in details. Curious what are the meaning of those flags actually: <code>scroll</code> and <code>enterAlways</code>? Actually there are 4 attribute values that we could set as.</p>
<p style=\"padding-left: 30px;\"><strong><span style=\"font-family: 'courier new', courier, monospace; color: #2980b9;\">scroll</span> </strong>- If you want the view to scroll along the content. You need to apply this flag.</p>
<p style=\"padding-left: 30px;\"><span style=\"font-family: 'courier new', courier, monospace; color: #2980b9;\"><strong>enterAlwaysCollapsed</strong></span> - This flag defines how View enter back into the screen. When your view has declared a minHeight and you use this flag, your View will only enter at its minimum height (i.e., &lsquo;collapsed&rsquo;), only re-expanding to its full height when the scrolling view has reached it&rsquo;s top.&nbsp;Use it with scroll flag like this:&nbsp;<code>scroll|enterAlwaysCollapsed</code></p>
<p style=\"text-align: center;\"><video width=\"360\" height=\"160\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling102.mp4\" type=\"video/mp4\" /></video>&nbsp;</p>
<p style=\"padding-left: 30px;\">Anyway it seems like it doesn't work as described in minHeight part.</p>
<p style=\"padding-left: 30px;\"><span style=\"font-family: 'courier new', courier, monospace; color: #2980b9;\"><strong>enterAlways</strong></span>&nbsp;- this flag ensures that any downward scroll will cause this view to become visible, enabling the &lsquo;quick return&rsquo; pattern. Use it with scroll flag as well:&nbsp;<code>scroll|enterAlways</code></p>
<p style=\"text-align: center;\"><video width=\"360\" height=\"200\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling2_1.mp4\" type=\"video/mp4\" /></video></p>
<p style=\"padding-left: 30px;\"><span style=\"font-family: 'courier new', courier, monospace; color: #2980b9;\"><strong>exitUntilCollapsed</strong></span>&nbsp;- View will scroll off until it is collapsed (its minHeight) and stay like that, for example,</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;android.support.v7.widget.Toolbar
    ...
    android:layout_height=\"192dp\"
    android:gravity=\"bottom\"
    android:paddingBottom=\"12dp\"
    android:minHeight=\"?attr/actionBarSize\"
    app:layout_scrollFlags=\"scroll|exitUntilCollapsed\"
    /&gt;</pre>
<p style=\"padding-left: 30px;\">Here is the result of code above.</p>
<p style=\"text-align: center;\"><video width=\"360\" height=\"360\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling104.mp4\" type=\"video/mp4\" /></video></p>
<p style=\"padding-left: 30px;\">This mode is frequently used in the component I will talk about in&nbsp;next part.</p>
<p>That's all for this step. Easy, huh?</p>
<h2 class=\"section-heading\">Step 10: Remove&nbsp;TabLayout</h2>
<p>In the next part, we are going to play more with Toolbar so I consider removing TabLayout from UI for the better visual result. To do that just simply comment all of those related codes.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;!--android.support.design.widget.TabLayout --&gt;</pre>
<p>Also remove from Java Code.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">        //tabLayout = (TabLayout) findViewById(R.id.tabLayout);
        //tabLayout.addTab(tabLayout.newTab().setText(\"Tab 1\"));
        //tabLayout.addTab(tabLayout.newTab().setText(\"Tab 2\"));
        //tabLayout.addTab(tabLayout.newTab().setText(\"Tab 3\"));</pre>
<p>OK. Let's go to the next step !</p>
<h2 class=\"section-heading\">Step 11:&nbsp;Make Toolbar collapsable</h2>
<p>Like an example shown in <em>exitUntilCollapsed</em> part, Toolbar could be expanded and collapsed but you will see that it isn't perfect yet. Toolbar still leave the screen in spite of the best practice that those icons (Hamburger, etc.) should stay on the screen.</p>
<p>Design Support Library has already been prepared for this as well. You could make Toolbar collapsable like a magic with <code>CollapsingToolbarLayout</code>&nbsp;which is very easy to use just like other components. Here are&nbsp;the steps:</p>
<p style=\"padding-left: 30px;\">- Wrap&nbsp;<code>Toolbar</code>&nbsp;with <code>CollapsingToolbarLayout</code> but still be under&nbsp;<code>AppBarLayout</code></p>
<p style=\"padding-left: 30px;\">- Remove&nbsp;<code>layout_scrollFlags</code>&nbsp;from Toolbar</p>
<p style=\"padding-left: 30px;\">- Declare&nbsp;<code>layout_scrollFlags</code>&nbsp;for <code>CollapsingToolbarLayout</code> and change it to&nbsp;<code>scroll|exitUntilCollapsed</code></p>
<p style=\"padding-left: 30px;\">- Change&nbsp;AppBarLayout's layout height to the size of expanded state. In this example, I use&nbsp;256dp</p>
<p>Here is the final code.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;android.support.design.widget.AppBarLayout
    android:layout_width=\"match_parent\"
    android:layout_height=\"256dp\"&gt;

    &lt;android.support.design.widget.CollapsingToolbarLayout
        android:id=\"@+id/collapsingToolbarLayout\"
        android:layout_width=\"match_parent\"
        android:layout_height=\"match_parent\"
        app:layout_scrollFlags=\"scroll|exitUntilCollapsed\"&gt;

        &lt;android.support.v7.widget.Toolbar
            android:id=\"@+id/toolbar\"
            android:layout_width=\"match_parent\"
            android:layout_height=\"?attr/actionBarSize\"
            android:background=\"?attr/colorPrimary\"
            android:minHeight=\"?attr/actionBarSize\"
            app:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"
            app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\" /&gt;

    &lt;/android.support.design.widget.CollapsingToolbarLayout&gt;

&lt;/android.support.design.widget.AppBarLayout&gt;</pre>
<p>And the result is</p>
<p style=\"text-align: center;\"><video width=\"360\" height=\"360\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling6.mp4\" type=\"video/mp4\" /></video></p>
<p>Looks good but those Toolbar icons still scroll off the screen. We could pin it to let it be always on top of the screen by declare this attribute to Toolbar.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;android.support.v7.widget.Toolbar
    ...
    app:layout_collapseMode=\"pin\"
    /&gt;</pre>
<p>Toolbar is now pinned !</p>
<p style=\"text-align: center;\"><video width=\"360\" height=\"360\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling7.mp4\" type=\"video/mp4\" /></video></p>
<p>But wait ... where is the title text?! Unfornate that it's gone in the wind after wrapping Toolbar with CollapsingToolbarLayout. We have to set it manually&nbsp;through&nbsp;<code>setTitle(String)</code>&nbsp;in Java code.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">CollapsingToolbarLayout collapsingToolbarLayout;

private void initInstances() {
    ...
    collapsingToolbarLayout = (CollapsingToolbarLayout) findViewById(R.id.collapsingToolbarLayout);
    collapsingToolbarLayout.setTitle(\"Design Library\");
}
</pre>
<p>Result:</p>
<p style=\"text-align: center;\"><video width=\"360\" height=\"360\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling8.mp4\" type=\"video/mp4\" /></video></p>
<p>Title's font color is still black. This is because we didn't set any&nbsp;theme to the App Bar yet. To do so, just simply declare&nbsp;<code>android:theme</code>&nbsp;for&nbsp;<code>AppBarLayout</code>&nbsp;like this.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;android.support.design.widget.AppBarLayout
    ...
    android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"&gt;</pre>
<p>Title now turns into&nbsp;white !</p>
<p style=\"text-align: center;\"><video width=\"360\" height=\"360\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling9.mp4\" type=\"video/mp4\" /></video></p>
<p>With CollapsingToolbarLayout's feature, transition is automatically applied to the title text between collapsed and expanded state. In case you want to change the position of title text in expanded state, you could do so by apply margin through 4 attributes&nbsp;such as&nbsp;<code>app:expandedTitleMargin</code>,&nbsp;<code>app:expandedTitleMarginBottom</code>,&nbsp;<code>app:expandedTitleMarginEnd</code>&nbsp;and&nbsp;<code>app:expandedTitleMarginStart</code></p>
<p>Or if you want to change text's appearance in collapsed and expanded state. You could simply do that by applying TextAppearance through&nbsp;<code>app:collapsedTitleTextAppearance</code>&nbsp;and&nbsp;<code>app:expandedTitleTextAppearance</code>&nbsp;respectively.</p>
<p>Let's try changing margin start to 64dp.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;android.support.design.widget.CollapsingToolbarLayout
    ...
    app:expandedTitleMarginStart=\"64dp\"&gt;</pre>
<p>Result</p>
<p style=\"text-align: center;\"><video width=\"360\" height=\"360\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling10.mp4\" type=\"video/mp4\" /></video></p>
<p>Awesome !</p>
<h2 class=\"no-margin section-heading\">Step 12: Add background image to&nbsp;App Bar</h2>
<p>In many cases,&nbsp;we want to have a beautiful image as an App Bar's background not just a plain color like currently is. Fortunate that CollapsingToolbarLayout is inherited from FrameLayout so we could simply add an ImageView as a background layer behind Toolbar like this.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;ImageView
    android:layout_width=\"match_parent\"
    android:layout_height=\"match_parent\"
    android:scaleType=\"centerCrop\"
    android:src=\"@drawable/header\" /&gt;

&lt;android.support.v7.widget.Toolbar
    ...</pre>
<p>Result</p>
<p style=\"text-align: center;\"><video width=\"360\" height=\"360\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling11.mp4\" type=\"video/mp4\" /></video></p>
<p>Image appears already but there is an unexpected blue bar appears&nbsp;as well. It is nothing fancy but just a Toolbar's background. Simply remove this line from <strong>Toolbar</strong>.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">android:background=\"?attr/colorPrimary\"</pre>
<p>Result</p>
<p style=\"text-align: center;\"><video width=\"360\" height=\"360\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling12.mp4\" type=\"video/mp4\" /></video></p>
<p>Image now just moves along with content scrolling which is a little bit too wooden. We could make it more elegant with parallax mode by declaring collapse mode like this.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;ImageView
   ...
   app:layout_collapseMode=\"parallax\" /&gt;</pre>
<p>Result</p>
<p style=\"text-align: center;\"><video width=\"360\" height=\"360\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling14.mp4\" type=\"video/mp4\" /></video></p>
<p>You also could apply a parallax multiplier between 0.0-1.0.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">app:layout_collapseParallaxMultiplier=\"0.7\"</pre>
<p>Please give a try yourself =)</p>
<p>Lastly you will notice that App Bar's background is always shown as image. You could let it automatically changed into plain color in collapsed mode by declaring attribute <code>app:contentScrim</code>&nbsp;like below:</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;android.support.design.widget.CollapsingToolbarLayout
    ...
    app:contentScrim=\"?attr/colorPrimary\"&gt;</pre>
<p>Result</p>
<p style=\"text-align: center;\"><video width=\"360\" height=\"360\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling15.mp4\" type=\"video/mp4\" /></video></p>
<p>App Bar is now beautiful with just some line of codes =)</p>
<h2 class=\"section-heading\">Step 13: Play with&nbsp;Navigation Drawer</h2>
<p>Right now Drawer Menu pulled from the left side is still just a blank white panel. Previously it is quite a hard task to implement this menu since we have to do it manually with LinearLayout or ListView.</p>
<p>With NavigationView provided in Android Design Support Library,&nbsp;things would be 15.84321 times easier !</p>
<p>First of all, create a header view layout file for Drawer Menu. (It is already there in Github project.)</p>
<p><strong>res/layout/nav_header.xml<br /></strong></p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;
&lt;FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"
    android:layout_width=\"match_parent\"
    android:layout_height=\"192dp\"
    android:theme=\"@style/ThemeOverlay.AppCompat.Dark\"
    &gt;
    
    &lt;ImageView
        android:layout_width=\"match_parent\"
        android:layout_height=\"match_parent\"
        android:src=\"@drawable/nav_header_bg\"
        android:scaleType=\"centerCrop\" /&gt;

    &lt;ImageView
        android:layout_width=\"wrap_content\"
        android:layout_height=\"wrap_content\"
        android:src=\"@drawable/nuuneoi\"
        android:layout_gravity=\"bottom\"
        android:layout_marginBottom=\"36dp\" /&gt;

    &lt;TextView
        android:layout_width=\"match_parent\"
        android:layout_height=\"wrap_content\"
        android:layout_gravity=\"bottom\"
        android:layout_margin=\"16dp\"
        android:text=\"nuuneoi\"
        android:textAppearance=\"@style/TextAppearance.AppCompat.Body1\"/&gt;

&lt;/FrameLayout&gt;
</pre>
<p>Now create&nbsp;a menu resource file.</p>
<p><strong>res/menu/navigation_drawer_items.xml</strong></p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;
&lt;menu xmlns:android=\"http://schemas.android.com/apk/res/android\"&gt;

    &lt;group android:checkableBehavior=\"all\"&gt;
        &lt;item
            android:id=\"@+id/navItem1\"
            android:icon=\"@drawable/ic_action_location_found_dark\"
            android:title=\"Home\"/&gt;
        &lt;item
            android:id=\"@+id/navItem2\"
            android:icon=\"@drawable/ic_action_location_found_dark\"
            android:title=\"Blog\"/&gt;

        &lt;item
            android:id=\"@+id/navItem3\"
            android:icon=\"@drawable/ic_action_location_found_dark\"
            android:title=\"About\"/&gt;

        &lt;item
            android:id=\"@+id/navItem4\"
            android:icon=\"@drawable/ic_action_location_found_dark\"
            android:title=\"Contact\"/&gt;
    &lt;/group&gt;

&lt;/menu&gt;</pre>
<p>Place <code>NavigationView</code>&nbsp;binding both resources above as Drawer Menu's menu area by replace an existed white LinearLayout with the following code.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">        ...
    &lt;/android.support.design.widget.CoordinatorLayout&gt;

    &lt;android.support.design.widget.NavigationView
        android:id=\"@+id/navigation\"
        android:layout_width=\"wrap_content\"
        android:layout_height=\"match_parent\"
        android:layout_gravity=\"start\"
        app:headerLayout=\"@layout/nav_header\"
        app:itemIconTint=\"#333\"
        app:itemTextColor=\"#333\"
        app:menu=\"@menu/navigation_drawer_items\" /&gt;

&lt;/android.support.v4.widget.DrawerLayout&gt;</pre>
<p>Drawer Menu is now summoned ! Woo hooo</p>
<p style=\"text-align: center;\"><video width=\"320\" height=\"569\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling16_1.mp4\" type=\"video/mp4\" /></video></p>
<p>NavigationView is designed for&nbsp;Drawer Menu&nbsp;especially. So everything would be created and measured automatically including width of the menu which we have to define ourselves case by case with Configuration Qualifier previously.</p>
<p>To handle those menu items click event, you could simply declare a listener with&nbsp;<code>setNavigationItemSelectedListener</code>&nbsp;like below:</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    NavigationView navigation;

    private void initInstances() {
        ...

        navigation = (NavigationView) findViewById(R.id.navigation);
        navigation.setNavigationItemSelectedListener(new NavigationView.OnNavigationItemSelectedListener() {
            @Override
            public boolean onNavigationItemSelected(MenuItem menuItem) {
                int id = menuItem.getItemId();
                switch (id) {
                    case R.id.navItem1:
                        break;
                    case R.id.navItem2:
                        break;
                    case R.id.navItem3:
                        break;
                }
                return false;
            }
        });
    }</pre>
<p>In the&nbsp;real&nbsp;use, please feel free to declare your own header view and modify menu items as you wanted.</p>
<h2 class=\"section-heading\">Step 14: Modernize&nbsp;EditText with&nbsp;TextInputLayout</h2>
<p>The last part of this Codelab is here. You could change an old style EditText to a modern one that always&nbsp;show Hint and Error Message.</p>
<p>To do so, just simply wrap an EditText with&nbsp;TextInputLayout. That's all !</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;android.support.design.widget.TextInputLayout
    android:layout_width=\"match_parent\"
    android:layout_height=\"wrap_content\"&gt;

    &lt;EditText
        android:layout_width=\"match_parent\"
        android:layout_height=\"wrap_content\"
        android:hint=\"Username\" /&gt;
&lt;/android.support.design.widget.TextInputLayout&gt;</pre>
<p>Put two of them inside NestedScrollView and see the result.</p>
<p style=\"text-align: center;\"><video width=\"320\" height=\"569\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling17.mp4\" type=\"video/mp4\" /></video></p>
<p>Incredibly easy, huh? =)</p>
<h2 class=\"section-heading\">Conclusion</h2>
<p>Android Design Support Library is a very promising support library. It is totally recommended&nbsp;for&nbsp;your production. Anyway it still contains with some bug, if you really want to use it now please be sure that you know about&nbsp;all of the issues.</p>
<p>Such a long tutorial. Hope you find it useful =)</p>
<hr />
<h2 class=\"section-heading\">Updated [24/07/2015]: From v22.2.0 to v22.2.1</h2>
<p>Few days ago, Android team launched the new version of Android Support Library, v22.2.1, with many bug fixed and also with some new bug ... I have already given it a try and updated this codelab to match the result in v22.2.1.</p>
<p>And regards to the bug in the library,&nbsp;here is that list of that what I found:</p>
<h2 class=\"subsection-heading\">Bug fixed</h2>
<p>- <code>TabLayout</code> now works perfectly on&nbsp;AppBarLayout. UI is now fluid and there is no more rendering problem.</p>
<p><video width=\"360\" height=\"200\" style=\"display: block; margin-left: auto; margin-right: auto;\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling102.mp4\" type=\"video/mp4\" /></video></p>
<p>- <code>FloatingActionButton</code> on Android 5.0+ now comes with drop shadow. There is no need to manually set <code>app:borderWidth</code> anymore</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot18n_1.png\" alt=\"screenshot18n_1\" /></p>
<p>- <code>exitUntilCollapsed</code> scrollMode works like described now</p>
<p style=\"text-align: center;\"><video width=\"360\" height=\"200\" controls=\"controls\" source=\"\" type=\"video/mp4\">scrolling104<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling104.mp4\" type=\"video/mp4\" /></video></p>
<h2 class=\"subsection-heading\">Bug that still persists</h2>
<p>- <code>FloatingActionButton</code> on Android 5.0+ still doesn't come with margin right and margin bottom unlike in&nbsp;pre-Lollipop. Still needs to manually set the different margin for those configurations.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot20.jpg\" alt=\"screenshot20\" /></p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot17n.png\" alt=\"screenshot17n\" /></p>
<h2 class=\"subsection-heading\">New bug or worse behavior</h2>
<p>- On Android pre-Lollipop, when FAB is put inside CoordinatorLayout, its&nbsp;margin has been immediately set to zero although it has ever had some margin when it is put in another type of Layout. I am not sure which one is the expected behavior but I believe&nbsp;that it supposes to be only one ...</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot20n.png\" alt=\"screenshot20n\" /><br /><span style=\"font-size: 12pt;\"><em><strong>When placed inside FrameLayout</strong></em></span></p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/designlibrary/screenshot19n.png\" alt=\"screenshot19n\" /><br /><span style=\"font-size: 12pt;\"><em><strong>When placed inside&nbsp;CoordinatorLayout</strong></em></span></p>
<p>- The animation of FAB to move back to the proper position when Snackbar is swipe-to-dismissed&nbsp;looks strange</p>
<p><video width=\"360\" height=\"200\" style=\"display: block; margin-left: auto; margin-right: auto;\" controls=\"controls\">
<source src=\"http://inthecheesefactory.com/uploads/source/designlibrary/scrolling105.mp4\" type=\"video/mp4\" /></video></p>
<p>Please be patient. I am strongly believe that team are working on these issues for the next release =)</p>			") (link nil "http://inthecheesefactory.com/blog/android-design-support-library-codelab/en") (pubDate nil "
				Mon, 22 Jun 2015 08:22:00 +0000			") (guid nil "http://inthecheesefactory.com/blog/android-design-support-library-codelab/en"))) ("How to distribute your own Android library through jCenter and Maven Central from Android Studio" "<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/cover_1.jpg\" /></p>
<p>In Android Studio, if you wish to include any library to your application. You could just simply add a following line of dependency in module's <code>build.gradle</code> file.</p>
<pre class=\"brush:bash;auto-links:false;toolbar:false\" contenteditable=\"false\">dependencies {
compile 'com.inthecheesefactory.thecheeselibrary:fb-like:0.9.3'
}</pre>
<p>That's all.&nbsp;The library is now usable.</p>
<p>It is completely cool. But you might be curious where does Android Studio fetch&nbsp;the library from? This blog will describe in details how this thing work including how to publish your own library and share it to&nbsp;developers in the rest of the world which does&nbsp;not only make this world a better place but also make you look more cool !</p>
<h2 class=\"section-heading\">Where does Android Studio fetch the library from?</h2>
<p>Start with this&nbsp;first simple question which I believe that not all of you completely knows that from where Android Studio fetch the library. Does it just search google for us and download&nbsp;the proper library to our project?</p>
<p>Well. It is not that complicated. Android Studio downloads the library from <strong>Maven Repository Server</strong> we defined in <code>build.gradle</code>. (Apache Maven is a tools developed by Apache provides a file server to distribute the libraries). Basically there are just 2 standard servers used for host the libraries for Android such as <strong>jcenter</strong> and <strong>Maven Central</strong></p>
<div class=\"row\">
<div class=\"col-md-6\">
<h2 class=\"section-heading subsection-heading\">jcenter</h2>
<p>jcenter is a&nbsp;Maven Repository hosted by <a href=\"https://bintray.com/\" target=\"_blank\">bintray.com</a>. You could find the whole repository <a href=\"http://jcenter.bintray.com\" target=\"_blank\">here</a>.</p>
<p>To use jcenter in your project, you have to define the repository like below in project's&nbsp;<code>build.gradle</code>&nbsp;file.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">allprojects {
repositories {
jcenter()
}
}
</pre>
</div>
<div class=\"col-md-6\">
<h2 class=\"subsection-heading\">Maven Central</h2>
<p>Maven Central is a&nbsp;Maven Repository hosted by <a href=\"https://sonatype.org/\" target=\"_blank\">sonatype.org</a>. You could find the whole repository <a href=\"https://oss.sonatype.org/content/repositories/releases/\" target=\"_blank\">here</a>.</p>
<p>To use Maven Central&nbsp;in your project, you have to define the repository like below in project's&nbsp;<code>build.gradle</code>&nbsp;file.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">allprojects {
repositories {
mavenCentral()
}
}
</pre>
</div>
</div>
<p><span style=\"color: #e74c3c;\">Please note that although both jcenter and&nbsp;Maven Central are standard android library repositories but they are hosted at completely different place, provided by different provider and there is nothing related to each other.</span>&nbsp;What that&nbsp;is available in jcenter might not be found in Maven Central and vice versa.</p>
<p>Apart from those two standard servers, we are also able to define the&nbsp;specific Maven Repository Server ourselves in case we use a library from some developers who want to host their libraries on their own server. Twitter's Fabric.io falls in&nbsp;this case by hosting their own Maven Repository at&nbsp;<a href=\"https://maven.fabric.io/public\">https://maven.fabric.io/public</a>. If you want to use any Fabric.io's library, you have to define the repository's url yourselve like below.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">repositories {
maven { url 'https://maven.fabric.io/public' }
}
</pre>
<p>And then you will be able to access any library inside with the same method.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">dependencies {
compile 'com.crashlytics.sdk.android:crashlytics:2.2.4@aar'
}</pre>
<p>But which one is the better: to upload library to standard server or to host our own server? The former is.&nbsp;<span style=\"color: #2980b9;\"><strong>To make our own library be available to public. Another developer should not has to define anything but a line of code defining dependency's name. So in this article, we will focus&nbsp;on just&nbsp;jcenter and Maven Central which provide far better experience for developer.</strong></span></p>
<p>FYI&nbsp;actually there is another type of&nbsp;repository besides Maven Repository that works with gradle on Android Studio. It is called <a href=\"http://ant.apache.org/ivy/\" target=\"_blank\">Ivy Repository</a>&nbsp;but from my own experience, I have never seen anyone using it before including me so I will just simply ignore this type of repository&nbsp;in this article.</p>
<h2 class=\"section-heading\">Understand jcenter and&nbsp;Maven Central</h2>
<p>Wonder why is there not only just one but two standard repositories out there?</p>
<p>Actually both of them are the repositories having&nbsp;the same duty: hosting Java/Android libraries. It is a developers' choice to upload their libraries to which one or may be both.</p>
<p>At first, Android Studio chose Maven Central as a default repository. Once you create a new project from old version of Android Studio, <code>mavenCentral()</code> would be automatically defined in build.gradle.</p>
<p>But the big problem of Maven Central is it is not developer-friendly. It is surprisingly hard to upload the library to. To be able to do so, developer has to be at some level of geeky. And with some more reason for example a security concern and etc, <strong>Android Studio team decided to switch the default repository to jcenter instead</strong> as you can see that once you create a new project from latest version of Android Studio, <code>jcenter()</code> would be automatically defined instead of <code>mavenCentral()</code>.</p>
<p>There are load of good reasons why they decided to switch from Maven Central to jcenter. Here are some of the major one.</p>
<p style=\"padding-left: 30px;\">- jcenter delivers library through CDN which means that&nbsp;developer could enjoy the faster loading experience.</p>
<p style=\"padding-left: 30px;\">- jcenter is the largest Java Repository on earth. So whatever that is available on Maven Central could be implied that it would be available on jcenter as well. In the other words, jcenter is superset of Maven Central.</p>
<p style=\"padding-left: 30px;\">- It is incredibly easy to upload our own library to the repository.&nbsp;No need to sign or do any complex thing like we have to on Maven Central.</p>
<p style=\"padding-left: 30px;\">- Friendly-UI</p>
<p style=\"padding-left: 30px;\">- If you want to upload your library to Maven Central you could do it easily with a single click on bintray site (and with some step of one-time setup).</p>
<p>With above reasons and from my own experiences, I must say that it is the brilliant decision switching default repository to jcenter.</p>
<p>So this article will focus on just jcenter since once you successfully upload your library to jcenter, it could be forwarded&nbsp;to Maven Central easily after that.</p>
<h2 class=\"section-heading\">How does gradle pull a library from&nbsp;Repository?</h2>
<p>Before we start talking about how to upload a library to jcenter. We should start with how gradle fetch a library from repository.&nbsp;For example,&nbsp;when we type like below in build.gradle, how are&nbsp;those library files magically downloaded to your project.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">compile 'com.inthecheesefactory.thecheeselibrary:fb-like:0.9.3'</pre>
<p>Basically we have to know the form of library string first. It consists of 3 parts:</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">GROUP_ID:ARTIFACT_ID:VERSION</pre>
<p>In the above case, <span style=\"color: #8e44ad;\"><strong>GROUP_ID</strong></span>&nbsp;is&nbsp;<strong>com.inthecheesefactory.thecheeselibrary</strong>&nbsp;while&nbsp;<span style=\"color: #16a085;\"><strong>ARTIFACT_ID</strong></span>&nbsp;is&nbsp;<strong>fb-like</strong>&nbsp;and&nbsp;<span style=\"color: #2980b9;\"><strong>VERSION</strong></span>&nbsp;is&nbsp;<strong>0.9.3</strong></p>
<p>For the meaning, <strong>GROUP_ID</strong>&nbsp;defines the name of&nbsp;library's group. It is possible that there would be more than one library that work the different job in the same context. If library are in the same group, it would share the same GROUP_ID. Generally we name it with developer's package name and then follow with the name of library's group, for example, <code>com.squareup.picasso</code>. And then defines the real name of the library in&nbsp;<strong>ARTIFACT_ID</strong>. For <strong>VERSION</strong>, there is nothing but a version number. Although it could be any text but I suggest to set it in <span style=\"font-family: 'courier new', courier, monospace;\">x.y.z</span> format and might follow with <span style=\"font-family: 'courier new', courier, monospace;\">-beta</span> if you want.</p>
<p>Here is the real example of library from Square. You will notice that each one could be easily&nbsp;recognised the library's and developer's name.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">dependencies {
compile 'com.squareup:otto:1.3.7'
compile 'com.squareup.picasso:picasso:2.5.2'
compile 'com.squareup.okhttp:okhttp:2.4.0'
compile 'com.squareup.retrofit:retrofit:1.9.0'
}</pre>
<p>What will happen when we add dependencies like above? Easy. Gradle will&nbsp;ask Maven Repository Server that does the library exist if yes gradle will get a path of the requested library which mostly in the form of GROUP_ID/ARTIFACT_ID/VERSION_ID, for example, you could find library files of <code>com.squareup:otto:1.3.7</code> from&nbsp;<a href=\"http://jcenter.bintray.com/com/squareup/otto/1.3.7\">http://jcenter.bintray.com/com/squareup/otto/1.3.7</a>&nbsp;and&nbsp;<a href=\"https://oss.sonatype.org/content/repositories/releases/com/squareup/otto/1.3.7/\">https://oss.sonatype.org/content/repositories/releases/com/squareup/otto/1.3.7/</a>.</p>
<p>And then Android Studio would download those files to our machine and compile with our project per your request. That's all. Nothing complicated !</p>
<p>I believe that you should know understand clearly that library pulled from repository is nothing special but <code>jar</code> or <code>aar</code> files hosted on repository server. It could be compared just like to download those files yourselve, copy and compile everything&nbsp;along with your project. But the big benefits you get from dependency system available on gradle is you don't have to do anything but just type&nbsp;some texts and that's all. The library would suddenly be useable&nbsp;in&nbsp;your project also with versioning system.</p>
<h2 class=\"section-heading\">Knowing an aar file format</h2>
<p>Wait ... I said that there are two types of library files that could be hosted on the repository, <strong>jar</strong> and <strong>aar</strong>. jar file is nothing, I believe that all of you know about it. But what is aar file exactly?</p>
<p>aar file is developed on top of jar file. It was invented because something Android Library needs to be embedded with some Android-specific files like AndroidManifest.xml, Resources, Assets or JNI which are out of jar file's standard. So aar was invented to cover all of those things. Basically it is a normal zip file just like jar one&nbsp;but with different file structure. jar file is embedded inside aar file with <code>classes.jar</code> name. And&nbsp;the rest are listed below:</p>
<p style=\"padding-left: 60px;\"><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt;\">- /AndroidManifest.xml (mandatory)<br /></span><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt;\">- /classes.jar (mandatory)<br /></span><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt;\">- /res/ (mandatory)<br /></span><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt;\">- /R.txt (mandatory)<br /></span><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt;\">- /assets/ (optional)<br /></span><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt;\">- /libs/*.jar (optional)<br /></span><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt;\">- /jni/&lt;abi&gt;/*.so (optional)<br /></span><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt;\">- /proguard.txt (optional)<br /></span><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt;\">- /lint.jar (optional)</span></p>
<p>As you can see. aar file is designed for Android especially. So this article will teach you how to create and upload a library in aar format.</p>
<h2 class=\"section-heading\">How to upload your library to jcenter</h2>
<p>Right now I believe that you already&nbsp;have&nbsp;all of the basic knowledge on how the&nbsp;repository system works. Now let's begin the most important part: uploading processes. The objective is as simple as <em>how to upload our library files to <a href=\"http://jcenter.bintray.com\">http://jcenter.bintray.com</a></em>. Once we could do it, the library is published. Well ... two things to concern: how to create an aar file and how to upload built files to the repository?</p>
<p>Although it requires a bunch of&nbsp;steps but I must say that it is totally not hard thing to do since bintray has prepared for everything quite well.&nbsp;You could find the whole process in the below diagram.</p>
<p><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/steps_1.png\" alt=\"steps_1\" /></p>
<p>And since there are quite a lot of details so let me split the process to 7 parts so I could describe everything clearly in step-by-step.</p>
<h2 class=\"subsection-heading\">Part 1 :&nbsp;Create a package on Bintray</h2>
<p>First of all. You need to create a package on bintray. To do so, you need a bintray account and create a package on website.</p>
<p><strong>Step 1:</strong>&nbsp;Register for an account on&nbsp;<a href=\"https://bintray.com/\" target=\"_blank\">bintray.com</a>.&nbsp;(The sign up process is quite simple so please do it yourself)</p>
<p><strong>Step 2:</strong>&nbsp;Once registration is done, login to the website and click at&nbsp;<strong>maven</strong></p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/maven.png\" alt=\"maven\" /></p>
<p><strong>Step 3:</strong>&nbsp;Click at <strong>Add New Package</strong>&nbsp;to start creating a new package for our library.</p>
<p><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/maven2.png\" alt=\"maven2\" /></p>
<p><strong>Step 4:</strong>&nbsp;Enter all of those required information</p>
<p><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/maven3.png\" alt=\"maven3\" /></p>
<p>Although there is no rule on how to name the <strong>Package&nbsp;Name</strong>&nbsp;but there is some name convention. Just set&nbsp;all of the characters to lowercase and separate each word with hyphen (-), for example, <strong>fb-like</strong>.</p>
<p>Once every required fields are done, click at&nbsp;<strong>Create Package</strong>&nbsp;to finish.</p>
<p><strong>Step 5:</strong>&nbsp;Website will redirect you to&nbsp;Edit Package page. Click at package's name under Edit Package text to enter package's details page.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/maven4.png\" alt=\"maven4\" /></p>
<p>Done! You now have <span style=\"text-decoration: underline;\">your own Maven Repository on Bintray</span>&nbsp;which is ready to be uploaded the library to.</p>
<p><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/maven5.png\" alt=\"maven5\" /></p>
<p>Bintray account registration is now done. Next one to work with is Sonatype, the Maven Central provider.</p>
<h2 class=\"subsection-heading\">Part 2 : Create a&nbsp;Sonatype account for&nbsp;Maven Central</h2>
<p><em>Note: You could skip Part 2 and 3 if you don't have a plan to upload your library to Maven Central. Anyway I suggest you not to skip since there are a lot of developers out there who still use this repository.</em></p>
<p>Just like jcenter, if you want to distribute your library through Maven Central, you need to register an account at its provider site, <strong>Sonatype</strong>.</p>
<p>What you need to know is the account that you have to create one&nbsp;is the&nbsp;JIRA Issue Tracker account on Sonatype site. To do so, please go to&nbsp;<a href=\"https://issues.sonatype.org/secure/Dashboard.jspa\">Sonatype Dashboard</a>&nbsp;and simply sign up for an account.</p>
<p>Once you're done. You have to&nbsp;request a permission to distribute your library to Maven Central. Anyway the process&nbsp;doesn't make any sense at all (at least for me) since what you have to do is to <strong>create an issue in JIRA</strong> to let them allow you&nbsp;to upload your library that match the GROUP_ID provided to Maven Central.</p>
<p>To create an issue like described, go to&nbsp;<a href=\"https://issues.sonatype.org/secure/Dashboard.jspa\" target=\"_blank\">Sonatype Dashboard</a>&nbsp;and login with account created. And then click at&nbsp;<strong>Create</strong>&nbsp;placed at the top&nbsp;menu.</p>
<p>Fill in the following information:</p>
<p style=\"padding-left: 30px;\"><span style=\"color: #34495e;\"><strong>Project:</strong> Community Support - Open Source Project Repository Hosting</span></p>
<p style=\"padding-left: 30px;\"><span style=\"color: #34495e;\"><strong>Issue Type:</strong> New Project</span></p>
<p style=\"padding-left: 30px;\"><span style=\"color: #34495e;\"><strong>Summary:</strong>&nbsp;Your library's name in summary,&nbsp;for example, The Cheese Library</span></p>
<p style=\"padding-left: 30px;\"><span style=\"color: #34495e;\"><strong>Group Id:</strong>&nbsp;Put the root&nbsp;GROUP_ID, for example,&nbsp;com.inthecheeselibrary . After you got an approval, <em>every single library starts&nbsp;with com.inthecheeselibrary</em> will be&nbsp;allowed to upload to repository, for example, com.inthecheeselibrary.somelib</span></p>
<p style=\"padding-left: 30px;\"><span style=\"color: #34495e;\"><strong>Project URL:</strong>&nbsp;Put a URL of any library you plan to distribute, for example, https://github.com/nuuneoi/FBLikeAndroid</span></p>
<p style=\"padding-left: 30px;\"><span style=\"color: #34495e;\"><strong>SCM URL:</strong> URL of&nbsp;Source Control, for example,&nbsp;https://github.com/nuuneoi/FBLikeAndroid.git</span></p>
<p>Keep the rest unmodified&nbsp;and click at <strong>Create</strong>. That's all. Now it is the hardest part ...&nbsp;wait patiently ... which will take around 1 week or a little bit more by average. And&nbsp;you will be granted an access to distribute your library to Maven Central after that.</p>
<p>The last thing to do is to give bintray your&nbsp;Sonatype OSS username in Accounts tab of&nbsp;<a href=\"https://bintray.com/profile/edit\" target=\"_blank\">Bintray Profile</a>.</p>
<p><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/sonatypeusername.png\" alt=\"sonatypeusername\" /></p>
<p>Click at <strong>Update</strong>&nbsp;and we're done.</p>
<h2 class=\"section-heading subsection-heading\">Part 3 : Enable&nbsp;Auto Signing in&nbsp;Bintray</h2>
<p>As mentioned above, we could upload a library to Maven Central through jcenter but to do that we need to sign that library first. bintray provides a mechanic to do that easily through web interface that allows library to be signed automatically once uploaded.</p>
<p>First step is to generate a key via command line with the command below. (In case you use Windows, please do it under&nbsp;<a href=\"https://www.cygwin.com/\" target=\"_blank\">cygwin</a>)</p>
<pre class=\"brush:bash;auto-links:false;toolbar:false\" contenteditable=\"false\">gpg --gen-key</pre>
<p>There are some mandatory fields to be filled in. Default value could be applied in most of the parts&nbsp;but for some field you need to enter the proper value&nbsp;by yourself, for example, your real name, passpharse and etc.</p>
<p>Once key is created. Call the following command to see the created key's information.</p>
<pre class=\"brush:bash;auto-links:false;toolbar:false\" contenteditable=\"false\">gpg --list-keys</pre>
<p>If there is nothing wrong, the information will be shown as below</p>
<pre class=\"brush:bash;auto-links:false;toolbar:false\" contenteditable=\"false\">pub   2048R/01ABCDEF 2015-03-07
uid                  Sittiphol Phanvilai &lt;yourmail@email.com&gt;
sub   2048R/98765432 2015-03-07</pre>
<p>Now we have to upload the public key to keyservers to make it&nbsp;useful. To do so, please call the following command and replace PUBLIC_KEY_ID with 8-digits&nbsp;hexadecimal value after 2048R/ in the <strong>pub</strong> line which is <code>01ABCDEF</code>&nbsp;in this example.</p>
<pre class=\"brush:bash;auto-links:false;toolbar:false\" contenteditable=\"false\">gpg --keyserver hkp://pool.sks-keyservers.net --send-keys PUBLIC_KEY_ID</pre>
<p>And then, export both public and private key as ASCII armor format with the following command and please replace <a href=\"mailto:yourmail@email.com\">yourmail@email.com</a>&nbsp;to the email you used to create your own key in the previous step.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">gpg -a --export yourmail@email.com &gt; public_key_sender.asc
gpg -a --export-secret-key yourmail@email.com &gt; private_key_sender.asc</pre>
<p>Open Bintray's&nbsp;<a href=\"https://bintray.com/profile/edit\" target=\"_blank\">Edit Profile</a>&nbsp;page and click at <strong>GPG Signing</strong>. Fill in both Public Key and Private Key using content in <span style=\"font-family: 'courier new', courier, monospace;\">public_key_sender.asc</span> and <span style=\"font-family: 'courier new', courier, monospace;\">private_key_sender.asc</span> files exported in previous step respectively.</p>
<p><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/gpg.png\" alt=\"gpg\" /></p>
<p>Click at <strong>Update</strong> to save the keys</p>
<p>The final step is to enable auto signing. Go to main page of <a href=\"https://bintray.com/\" target=\"_blank\">Bintray</a>&nbsp;and then click at <strong>maven</strong>.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/maven.png\" alt=\"maven\" /></p>
<p>Click&nbsp;<strong>Edit</strong></p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/editmaven.png\" alt=\"editmaven\" /></p>
<p><strong>Check</strong> the <strong>GPG Sign uploaed files automatically</strong>&nbsp;box to enable auto signing.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/autosigned.png\" alt=\"autosigned\" /></p>
<p>Click <strong>Update</strong>&nbsp;to save the progress. That's all. From now on, every single library uploaded to our Maven Repository will be automatically signed and is ready to be forwarded to Maven Central in a single click.</p>
<p>Please note that this is a one-time action and would be also applied to every single library created after this.</p>
<p>Bintray and Maven Central are now prepared. Now let's switch to Android Studio part.</p>
<h2 class=\"subsection-heading\">Part 4&nbsp;: Prepare an&nbsp;Android Studio project</h2>
<p>In many cases, we might need more than 1 library to be uploaded to repository in the single project and at the same time, we might not need to upload something as well. So the best structure I would recommend is to split each part as <strong>Module</strong>. Basically I suggest you to split to at least 2 modules, one&nbsp;<em>Application Module</em> for library usage example and another one is a <em>Library Module</em> contains the source code of&nbsp;library that you wish to upload to repository. Please note that if you want to have more than 1 library in your project, please feel free to create another module:&nbsp;<span style=\"text-decoration: underline;\"><strong>1 module per 1 library</strong></span>.</p>
<p><img src=\"http://inthecheesefactory.com/uploads/source/jcenter/projectstructure.png\" alt=\"projectstructure\" /></p>
<p>I believe that all of you know how to create a library module so I will not talk to deep in this part. It is just as simply as creating an <strong>Android Library</strong> module and it's&nbsp;done.</p>
<p><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/newmodule.png\" alt=\"newmodule\" /></p>
<p>Next is to apply bintray's plugin to your project. To do that, we need to modify <span style=\"text-decoration: underline;\">project's</span> <code>build.gradle</code>&nbsp;file in dependencies part like this.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">    dependencies {
classpath 'com.android.tools.build:gradle:1.2.3'
classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.4'
classpath 'com.github.dcendents:android-maven-gradle-plugin:1.3'
}</pre>
<p><span style=\"color: #c0392b;\">It is important to set gradle build tools' version to 1.1.2 or upper since there is a critical bug in the prior versions. In this example, we will use the latest version, 1.2.3.</span></p>
<p>Next we will define the username and api key used for bintray authentication and also the password of created key by modifying <code>local.properties</code>. The reason that we need to put those things&nbsp;in this file is those information are sensitive and should not be shared to anywhere including version control. Fortunate that local.properties file is already added to .gitignore since project was created. So these sensitive data would not be uploaded to git server unintentionally.</p>
<p>Here is the three lines to add:</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">bintray.user=YOUR_BINTRAY_USERNAME
bintray.apikey=YOUR_BINTRAY_API_KEY
bintray.gpg.password=YOUR_GPG_PASSWORD
</pre>
<p>Put your bintray username in the first line and put the API Key which you could find yours at <strong>API Key</strong> tab in&nbsp;<a href=\"https://bintray.com/profile/edit\" target=\"_blank\">Edit Profile</a>&nbsp;page in the second line.</p>
<p>The last line is the passphrase you used to create GPG key in previous step. Save and close the file.</p>
<p>The last file to be modified is module's&nbsp;<code>build.gradle</code>&nbsp;file. Open it and put these lines right after&nbsp;<code>apply plugin: 'com.android.library'</code>&nbsp;like this.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">apply plugin: 'com.android.library'
ext {
bintrayRepo = 'maven'
bintrayName = 'fb-like'
publishedGroupId = 'com.inthecheesefactory.thecheeselibrary'
libraryName = 'FBLike'
artifact = 'fb-like'
libraryDescription = 'A wrapper for Facebook Native Like Button (LikeView) on Android'
siteUrl = 'https://github.com/nuuneoi/FBLikeAndroid'
gitUrl = 'https://github.com/nuuneoi/FBLikeAndroid.git'
libraryVersion = '0.9.3'
developerId = 'nuuneoi'
developerName = 'Sittiphol Phanvilai'
developerEmail = 'sittiphol@gmail.com'
licenseName = 'The Apache Software License, Version 2.0'
licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
allLicenses = [\"Apache-2.0\"]
}</pre>
<p>Leave bintrayRepo as it currently is, maven. Change&nbsp;bintrayName to your package name created above.&nbsp;And also change the rest to match your library's information. From the above script, everyone would be able to use this&nbsp;library with a following line of gradle script.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">compile 'com.inthecheesefactory.thecheeselibrary:fb-like:0.9.3'</pre>
<p>Final step is to apply two scripts, used for building library files and uploading the built files to bintray, by appending the same <code>build.gradle</code> file&nbsp;with the following script <strong>at the end of the file</strong>. (I use the direct link to file hosted on github for convenience)</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">// Place it at the end of the file
apply from: 'https://raw.githubusercontent.com/nuuneoi/JCenter/master/installv1.gradle'
apply from: 'https://raw.githubusercontent.com/nuuneoi/JCenter/master/bintrayv1.gradle'
</pre>
<p>Done! Your project is now set and is ready to be uploaded to bintray. Yah !</p>
<h2 class=\"section-heading\">Part 5 : Upload library to&nbsp;your bintray space</h2>
<p>Now it's time to upload your library to <span style=\"text-decoration: underline;\">your own repository on bintray</span>.&nbsp;To do that, please go to <strong>Terminal</strong> tab on Android Studio.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/terminal.png\" alt=\"terminal\" /></p>
<p>First step is to check the correctness of code and build the library files (aar, pom, etc.). Type the below command to do so.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">&gt; gradlew install</pre>
<p>If these is nothing wrong, it would show something like:</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">BUILD SUCCESSFUL</pre>
<p>We are now halfway there. Next step is to upload the built files to bintray with following command.</p>
<pre class=\"brush:bash;auto-links:false;toolbar:false\" contenteditable=\"false\">&gt; gradlew bintrayUpload
</pre>
<p>Say eureka loudly if it shows like below&nbsp;!</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">SUCCESSFUL</pre>
<p>Check your package in the bintray web interface. You will see&nbsp;a change in Versions area.</p>
<p><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/firstuploaded.png\" alt=\"firstuploaded\" /></p>
<p>Click into it and look into <strong>Files</strong> tab and you will see the of uploaded library files placed right there.</p>
<p><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/uploadedfiles.png\" alt=\"uploadedfiles\" /></p>
<p>Congratulations, your library is now online and is ready for anyone to use it !</p>
<p>However don't too happy ... just yet. The library is still on your own Maven Repository not on jcenter yet. <span style=\"text-decoration: underline; color: #c0392b;\">If anyone want to use your library, they have to define the repository's url first like below.</span></p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">repositories {
maven {
url 'https://dl.bintray.com/nuuneoi/maven/'
}
}
...
dependencies {
compile 'com.inthecheesefactory.thecheeselibrary:fb-like:0.9.3'
}</pre>
<p>You could find the url of your own Maven Repository from bintray web interface or just simply replace nuuneoi with your bintray username. I encourage you to try browsing into that link as well and you will see what exactly is going on.</p>
<p>As mentioned above, it is not the best practices for shared library to let developer defines the complex things like this. Imagine, we have to add 10 urls to use 10 libraries? ... Nightmare&nbsp;... So let's pass our library from our own repository to jcenter for the better life quality !</p>
<h2 class=\"section-heading\">Part 6 : Sync bintray user repository to jcenter</h2>
<p>It is pretty easy to sync your library to jcenter. Just go to the web interface and simply click at&nbsp;<strong>Add to JCenter</strong></p>
<p><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/addtojcenter.png\" alt=\"addtojcenter\" /></p>
<p>Nothing to do but click <strong>Send</strong></p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/addtojcenter2.png\" alt=\"addtojcenter2\" /></p>
<p>Nothing we can do now but wait for 2-3 hours to let bintray team approves our request. Once sync request&nbsp;is approved, you will receive an email informing you the change. Now let's check the web interface, you will see some change in <strong>Linked To</strong>&nbsp;section.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/linkedto.png\" alt=\"linkedto\" /></p>
<p>From now on, any developer that use&nbsp;<code>jcenter()</code>&nbsp;repository will be able to use our library with a single line of gradle script.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">    compile 'com.inthecheesefactory.thecheeselibrary:fb-like:0.9.3'</pre>
<p>Want to check the existence of your library binary in jcenter? You could do that by go to&nbsp;<a href=\"http://jcenter.bintray.com\">http://jcenter.bintray.com </a>and browse into the directory matched your library's group id and artifact id. In this example, it would be&nbsp;<code>com&nbsp;-&gt;&nbsp;inthecheesefactory -&gt; thecheeselibrary -&gt; fb-like -&gt; 0.9.3</code></p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/fblikejcenter.png\" alt=\"fblikejcenter\" /></p>
<p>Please note that linking to jcenter is a one-time action. From now on, if you do&nbsp;any modification in&nbsp;your package, for example, upload new version binary, delete old version binary, etc. The change would affect to jcenter as well. Anyway since your own repository and jcenter are at the different place so you may need to wait for around 2-3 minutes to let jcenter sync the&nbsp;change.</p>
<p>And please be careful. If you decide to remove the whole package, library files placed on jcenter repository would not be deleted in this case. And they&nbsp;will be left just like zombie files which nobody could delete&nbsp;it anymore. So I suggest you that if you want to delete the whole package, please delete every single version from web interface first before removing the package.</p>
<h2 class=\"section-heading\">Part 7&nbsp;: Forward library to&nbsp;Maven Central</h2>
<p>Not all of android developers use jcenter. There are still a number of developers who still use <code>mavenCentral()</code> so let's upload our library to Maven Central as well.</p>
<p>To forward library from jcenter to Maven Central, there are two missions that you need to achieve&nbsp;first:</p>
<p style=\"padding-left: 30px;\">1) Bintray package must be already linked to jcenter</p>
<p style=\"padding-left: 30px;\">2) Repository on Maven Central has already been approved to open</p>
<p>If you have already passed those qualifications. The way to forward your library package to Maven Central is incredibly easy. Just simply click at <strong>Maven Central</strong>&nbsp;link on package's details page.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/syncmavencentral.png\" alt=\"syncmavencentral\" /></p>
<p>Enter your Sonatype username/password and click <strong>Sync</strong>.</p>
<p><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/syncmavencentral2.png\" alt=\"syncmavencentral2\" /></p>
<p><strong>Successfully synced and closed repo</strong> would be shown in <strong>Last Sync Status</strong> once it's done successfully. But if there is any problem, it would be shown in Last Sync Errors. You have to fix the problem case by case since the condition of library that could be uploaded to Maven Central is quite strict, for example, + sign couldn't be used in the version of library's dependency definition.</p>
<p>Once done. You could find&nbsp;your library binaries in&nbsp;<a href=\"https://oss.sonatype.org/content/repositories/releases/\" target=\"_blank\">Maven Central Repository</a>&nbsp;at the directory matched your library's group/artifact id. In this example,&nbsp;it is&nbsp;<code>com&nbsp;-&gt;&nbsp;inthecheesefactory -&gt; thecheeselibrary -&gt; fb-like -&gt; 0.9.3</code></p>
<p>Congratulations ! That's all. Although it requires quite a lot of steps but steps are&nbsp;quite straightforward. And most of them are one-time action. Once things are set, you almost have to do any additional step&nbsp;after that.</p>
<p>Such a long article but hope that you find it useful. My English might be a little bit weird right now.&nbsp;But at least, I expect that contents&nbsp;are&nbsp;apprehensible.</p>
<p>Wish to see your great library up there ! Cheers. =)</p>" "http://inthecheesefactory.com/blog/how-to-upload-library-to-jcenter-maven-central-as-dependency/en" (21866 57304) old 15 nil nil ((title nil "
				How to distribute your own Android library through jCenter and Maven Central from Android Studio			") (description nil "
				<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/cover_1.jpg\" /></p> 
<p>In Android Studio, if you wish to include any library to your application. You could just simply add a following line of dependency in module's <code>build.gradle</code> file.</p>
<pre class=\"brush:bash;auto-links:false;toolbar:false\" contenteditable=\"false\">dependencies {
    compile 'com.inthecheesefactory.thecheeselibrary:fb-like:0.9.3'
}</pre>
<p>That's all.&nbsp;The library is now usable.</p>
<p>It is completely cool. But you might be curious where does Android Studio fetch&nbsp;the library from? This blog will describe in details how this thing work including how to publish your own library and share it to&nbsp;developers in the rest of the world which does&nbsp;not only make this world a better place but also make you look more cool !</p>
<h2 class=\"section-heading\">Where does Android Studio fetch the library from?</h2>
<p>Start with this&nbsp;first simple question which I believe that not all of you completely knows that from where Android Studio fetch the library. Does it just search google for us and download&nbsp;the proper library to our project?</p>
<p>Well. It is not that complicated. Android Studio downloads the library from <strong>Maven Repository Server</strong> we defined in <code>build.gradle</code>. (Apache Maven is a tools developed by Apache provides a file server to distribute the libraries). Basically there are just 2 standard servers used for host the libraries for Android such as <strong>jcenter</strong> and <strong>Maven Central</strong></p>
<div class=\"row\">
<div class=\"col-md-6\">
<h2 class=\"section-heading subsection-heading\">jcenter</h2>
<p>jcenter is a&nbsp;Maven Repository hosted by <a href=\"https://bintray.com/\" target=\"_blank\">bintray.com</a>. You could find the whole repository <a href=\"http://jcenter.bintray.com\" target=\"_blank\">here</a>.</p>
<p>To use jcenter in your project, you have to define the repository like below in project's&nbsp;<code>build.gradle</code>&nbsp;file.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">allprojects {
    repositories {
        jcenter()
    }
}
</pre>
</div>
<div class=\"col-md-6\">
<h2 class=\"subsection-heading\">Maven Central</h2>
<p>Maven Central is a&nbsp;Maven Repository hosted by <a href=\"https://sonatype.org/\" target=\"_blank\">sonatype.org</a>. You could find the whole repository <a href=\"https://oss.sonatype.org/content/repositories/releases/\" target=\"_blank\">here</a>.</p>
<p>To use Maven Central&nbsp;in your project, you have to define the repository like below in project's&nbsp;<code>build.gradle</code>&nbsp;file.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">allprojects {
    repositories {
        mavenCentral()
    }
}
</pre>
</div>
</div>
<p><span style=\"color: #e74c3c;\">Please note that although both jcenter and&nbsp;Maven Central are standard android library repositories but they are hosted at completely different place, provided by different provider and there is nothing related to each other.</span>&nbsp;What that&nbsp;is available in jcenter might not be found in Maven Central and vice versa.</p>
<p>Apart from those two standard servers, we are also able to define the&nbsp;specific Maven Repository Server ourselves in case we use a library from some developers who want to host their libraries on their own server. Twitter's Fabric.io falls in&nbsp;this case by hosting their own Maven Repository at&nbsp;<a href=\"https://maven.fabric.io/public\">https://maven.fabric.io/public</a>. If you want to use any Fabric.io's library, you have to define the repository's url yourselve like below.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">repositories {
    maven { url 'https://maven.fabric.io/public' }
}
</pre>
<p>And then you will be able to access any library inside with the same method.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">dependencies {
    compile 'com.crashlytics.sdk.android:crashlytics:2.2.4@aar'
}</pre>
<p>But which one is the better: to upload library to standard server or to host our own server? The former is.&nbsp;<span style=\"color: #2980b9;\"><strong>To make our own library be available to public. Another developer should not has to define anything but a line of code defining dependency's name. So in this article, we will focus&nbsp;on just&nbsp;jcenter and Maven Central which provide far better experience for developer.</strong></span></p>
<p>FYI&nbsp;actually there is another type of&nbsp;repository besides Maven Repository that works with gradle on Android Studio. It is called <a href=\"http://ant.apache.org/ivy/\" target=\"_blank\">Ivy Repository</a>&nbsp;but from my own experience, I have never seen anyone using it before including me so I will just simply ignore this type of repository&nbsp;in this article.</p>
<h2 class=\"section-heading\">Understand jcenter and&nbsp;Maven Central</h2>
<p>Wonder why is there not only just one but two standard repositories out there?</p>
<p>Actually both of them are the repositories having&nbsp;the same duty: hosting Java/Android libraries. It is a developers' choice to upload their libraries to which one or may be both.</p>
<p>At first, Android Studio chose Maven Central as a default repository. Once you create a new project from old version of Android Studio, <code>mavenCentral()</code> would be automatically defined in build.gradle.</p>
<p>But the big problem of Maven Central is it is not developer-friendly. It is surprisingly hard to upload the library to. To be able to do so, developer has to be at some level of geeky. And with some more reason for example a security concern and etc, <strong>Android Studio team decided to switch the default repository to jcenter instead</strong> as you can see that once you create a new project from latest version of Android Studio, <code>jcenter()</code> would be automatically defined instead of <code>mavenCentral()</code>.</p>
<p>There are load of good reasons why they decided to switch from Maven Central to jcenter. Here are some of the major one.</p>
<p style=\"padding-left: 30px;\">- jcenter delivers library through CDN which means that&nbsp;developer could enjoy the faster loading experience.</p>
<p style=\"padding-left: 30px;\">- jcenter is the largest Java Repository on earth. So whatever that is available on Maven Central could be implied that it would be available on jcenter as well. In the other words, jcenter is superset of Maven Central.</p>
<p style=\"padding-left: 30px;\">- It is incredibly easy to upload our own library to the repository.&nbsp;No need to sign or do any complex thing like we have to on Maven Central.</p>
<p style=\"padding-left: 30px;\">- Friendly-UI</p>
<p style=\"padding-left: 30px;\">- If you want to upload your library to Maven Central you could do it easily with a single click on bintray site (and with some step of one-time setup).</p>
<p>With above reasons and from my own experiences, I must say that it is the brilliant decision switching default repository to jcenter.</p>
<p>So this article will focus on just jcenter since once you successfully upload your library to jcenter, it could be forwarded&nbsp;to Maven Central easily after that.</p>
<h2 class=\"section-heading\">How does gradle pull a library from&nbsp;Repository?</h2>
<p>Before we start talking about how to upload a library to jcenter. We should start with how gradle fetch a library from repository.&nbsp;For example,&nbsp;when we type like below in build.gradle, how are&nbsp;those library files magically downloaded to your project.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">compile 'com.inthecheesefactory.thecheeselibrary:fb-like:0.9.3'</pre>
<p>Basically we have to know the form of library string first. It consists of 3 parts:</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">GROUP_ID:ARTIFACT_ID:VERSION</pre>
<p>In the above case, <span style=\"color: #8e44ad;\"><strong>GROUP_ID</strong></span>&nbsp;is&nbsp;<strong>com.inthecheesefactory.thecheeselibrary</strong>&nbsp;while&nbsp;<span style=\"color: #16a085;\"><strong>ARTIFACT_ID</strong></span>&nbsp;is&nbsp;<strong>fb-like</strong>&nbsp;and&nbsp;<span style=\"color: #2980b9;\"><strong>VERSION</strong></span>&nbsp;is&nbsp;<strong>0.9.3</strong></p>
<p>For the meaning, <strong>GROUP_ID</strong>&nbsp;defines the name of&nbsp;library's group. It is possible that there would be more than one library that work the different job in the same context. If library are in the same group, it would share the same GROUP_ID. Generally we name it with developer's package name and then follow with the name of library's group, for example, <code>com.squareup.picasso</code>. And then defines the real name of the library in&nbsp;<strong>ARTIFACT_ID</strong>. For <strong>VERSION</strong>, there is nothing but a version number. Although it could be any text but I suggest to set it in <span style=\"font-family: 'courier new', courier, monospace;\">x.y.z</span> format and might follow with <span style=\"font-family: 'courier new', courier, monospace;\">-beta</span> if you want.</p>
<p>Here is the real example of library from Square. You will notice that each one could be easily&nbsp;recognised the library's and developer's name.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">dependencies {
  compile 'com.squareup:otto:1.3.7'
  compile 'com.squareup.picasso:picasso:2.5.2'
  compile 'com.squareup.okhttp:okhttp:2.4.0'
  compile 'com.squareup.retrofit:retrofit:1.9.0'
}</pre>
<p>What will happen when we add dependencies like above? Easy. Gradle will&nbsp;ask Maven Repository Server that does the library exist if yes gradle will get a path of the requested library which mostly in the form of GROUP_ID/ARTIFACT_ID/VERSION_ID, for example, you could find library files of <code>com.squareup:otto:1.3.7</code> from&nbsp;<a href=\"http://jcenter.bintray.com/com/squareup/otto/1.3.7\">http://jcenter.bintray.com/com/squareup/otto/1.3.7</a>&nbsp;and&nbsp;<a href=\"https://oss.sonatype.org/content/repositories/releases/com/squareup/otto/1.3.7/\">https://oss.sonatype.org/content/repositories/releases/com/squareup/otto/1.3.7/</a>.</p>
<p>And then Android Studio would download those files to our machine and compile with our project per your request. That's all. Nothing complicated !</p>
<p>I believe that you should know understand clearly that library pulled from repository is nothing special but <code>jar</code> or <code>aar</code> files hosted on repository server. It could be compared just like to download those files yourselve, copy and compile everything&nbsp;along with your project. But the big benefits you get from dependency system available on gradle is you don't have to do anything but just type&nbsp;some texts and that's all. The library would suddenly be useable&nbsp;in&nbsp;your project also with versioning system.</p>
<h2 class=\"section-heading\">Knowing an aar file format</h2>
<p>Wait ... I said that there are two types of library files that could be hosted on the repository, <strong>jar</strong> and <strong>aar</strong>. jar file is nothing, I believe that all of you know about it. But what is aar file exactly?</p>
<p>aar file is developed on top of jar file. It was invented because something Android Library needs to be embedded with some Android-specific files like AndroidManifest.xml, Resources, Assets or JNI which are out of jar file's standard. So aar was invented to cover all of those things. Basically it is a normal zip file just like jar one&nbsp;but with different file structure. jar file is embedded inside aar file with <code>classes.jar</code> name. And&nbsp;the rest are listed below:</p>
<p style=\"padding-left: 60px;\"><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt;\">- /AndroidManifest.xml (mandatory)<br /></span><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt;\">- /classes.jar (mandatory)<br /></span><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt;\">- /res/ (mandatory)<br /></span><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt;\">- /R.txt (mandatory)<br /></span><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt;\">- /assets/ (optional)<br /></span><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt;\">- /libs/*.jar (optional)<br /></span><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt;\">- /jni/&lt;abi&gt;/*.so (optional)<br /></span><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt;\">- /proguard.txt (optional)<br /></span><span style=\"font-family: 'courier new', courier, monospace; font-size: 12pt;\">- /lint.jar (optional)</span></p>
<p>As you can see. aar file is designed for Android especially. So this article will teach you how to create and upload a library in aar format.</p>
<h2 class=\"section-heading\">How to upload your library to jcenter</h2>
<p>Right now I believe that you already&nbsp;have&nbsp;all of the basic knowledge on how the&nbsp;repository system works. Now let's begin the most important part: uploading processes. The objective is as simple as <em>how to upload our library files to <a href=\"http://jcenter.bintray.com\">http://jcenter.bintray.com</a></em>. Once we could do it, the library is published. Well ... two things to concern: how to create an aar file and how to upload built files to the repository?</p>
<p>Although it requires a bunch of&nbsp;steps but I must say that it is totally not hard thing to do since bintray has prepared for everything quite well.&nbsp;You could find the whole process in the below diagram.</p>
<p><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/steps_1.png\" alt=\"steps_1\" /></p>
<p>And since there are quite a lot of details so let me split the process to 7 parts so I could describe everything clearly in step-by-step.</p>
<h2 class=\"subsection-heading\">Part 1 :&nbsp;Create a package on Bintray</h2>
<p>First of all. You need to create a package on bintray. To do so, you need a bintray account and create a package on website.</p>
<p><strong>Step 1:</strong>&nbsp;Register for an account on&nbsp;<a href=\"https://bintray.com/\" target=\"_blank\">bintray.com</a>.&nbsp;(The sign up process is quite simple so please do it yourself)</p>
<p><strong>Step 2:</strong>&nbsp;Once registration is done, login to the website and click at&nbsp;<strong>maven</strong></p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/maven.png\" alt=\"maven\" /></p>
<p><strong>Step 3:</strong>&nbsp;Click at <strong>Add New Package</strong>&nbsp;to start creating a new package for our library.</p>
<p><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/maven2.png\" alt=\"maven2\" /></p>
<p><strong>Step 4:</strong>&nbsp;Enter all of those required information</p>
<p><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/maven3.png\" alt=\"maven3\" /></p>
<p>Although there is no rule on how to name the <strong>Package&nbsp;Name</strong>&nbsp;but there is some name convention. Just set&nbsp;all of the characters to lowercase and separate each word with hyphen (-), for example, <strong>fb-like</strong>.</p>
<p>Once every required fields are done, click at&nbsp;<strong>Create Package</strong>&nbsp;to finish.</p>
<p><strong>Step 5:</strong>&nbsp;Website will redirect you to&nbsp;Edit Package page. Click at package's name under Edit Package text to enter package's details page.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/maven4.png\" alt=\"maven4\" /></p>
<p>Done! You now have <span style=\"text-decoration: underline;\">your own Maven Repository on Bintray</span>&nbsp;which is ready to be uploaded the library to.</p>
<p><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/maven5.png\" alt=\"maven5\" /></p>
<p>Bintray account registration is now done. Next one to work with is Sonatype, the Maven Central provider.</p>
<h2 class=\"subsection-heading\">Part 2 : Create a&nbsp;Sonatype account for&nbsp;Maven Central</h2>
<p><em>Note: You could skip Part 2 and 3 if you don't have a plan to upload your library to Maven Central. Anyway I suggest you not to skip since there are a lot of developers out there who still use this repository.</em></p>
<p>Just like jcenter, if you want to distribute your library through Maven Central, you need to register an account at its provider site, <strong>Sonatype</strong>.</p>
<p>What you need to know is the account that you have to create one&nbsp;is the&nbsp;JIRA Issue Tracker account on Sonatype site. To do so, please go to&nbsp;<a href=\"https://issues.sonatype.org/secure/Dashboard.jspa\">Sonatype Dashboard</a>&nbsp;and simply sign up for an account.</p>
<p>Once you're done. You have to&nbsp;request a permission to distribute your library to Maven Central. Anyway the process&nbsp;doesn't make any sense at all (at least for me) since what you have to do is to <strong>create an issue in JIRA</strong> to let them allow you&nbsp;to upload your library that match the GROUP_ID provided to Maven Central.</p>
<p>To create an issue like described, go to&nbsp;<a href=\"https://issues.sonatype.org/secure/Dashboard.jspa\" target=\"_blank\">Sonatype Dashboard</a>&nbsp;and login with account created. And then click at&nbsp;<strong>Create</strong>&nbsp;placed at the top&nbsp;menu.</p>
<p>Fill in the following information:</p>
<p style=\"padding-left: 30px;\"><span style=\"color: #34495e;\"><strong>Project:</strong> Community Support - Open Source Project Repository Hosting</span></p>
<p style=\"padding-left: 30px;\"><span style=\"color: #34495e;\"><strong>Issue Type:</strong> New Project</span></p>
<p style=\"padding-left: 30px;\"><span style=\"color: #34495e;\"><strong>Summary:</strong>&nbsp;Your library's name in summary,&nbsp;for example, The Cheese Library</span></p>
<p style=\"padding-left: 30px;\"><span style=\"color: #34495e;\"><strong>Group Id:</strong>&nbsp;Put the root&nbsp;GROUP_ID, for example,&nbsp;com.inthecheeselibrary . After you got an approval, <em>every single library starts&nbsp;with com.inthecheeselibrary</em> will be&nbsp;allowed to upload to repository, for example, com.inthecheeselibrary.somelib</span></p>
<p style=\"padding-left: 30px;\"><span style=\"color: #34495e;\"><strong>Project URL:</strong>&nbsp;Put a URL of any library you plan to distribute, for example, https://github.com/nuuneoi/FBLikeAndroid</span></p>
<p style=\"padding-left: 30px;\"><span style=\"color: #34495e;\"><strong>SCM URL:</strong> URL of&nbsp;Source Control, for example,&nbsp;https://github.com/nuuneoi/FBLikeAndroid.git</span></p>
<p>Keep the rest unmodified&nbsp;and click at <strong>Create</strong>. That's all. Now it is the hardest part ...&nbsp;wait patiently ... which will take around 1 week or a little bit more by average. And&nbsp;you will be granted an access to distribute your library to Maven Central after that.</p>
<p>The last thing to do is to give bintray your&nbsp;Sonatype OSS username in Accounts tab of&nbsp;<a href=\"https://bintray.com/profile/edit\" target=\"_blank\">Bintray Profile</a>.</p>
<p><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/sonatypeusername.png\" alt=\"sonatypeusername\" /></p>
<p>Click at <strong>Update</strong>&nbsp;and we're done.</p>
<h2 class=\"section-heading subsection-heading\">Part 3 : Enable&nbsp;Auto Signing in&nbsp;Bintray</h2>
<p>As mentioned above, we could upload a library to Maven Central through jcenter but to do that we need to sign that library first. bintray provides a mechanic to do that easily through web interface that allows library to be signed automatically once uploaded.</p>
<p>First step is to generate a key via command line with the command below. (In case you use Windows, please do it under&nbsp;<a href=\"https://www.cygwin.com/\" target=\"_blank\">cygwin</a>)</p>
<pre class=\"brush:bash;auto-links:false;toolbar:false\" contenteditable=\"false\">gpg --gen-key</pre>
<p>There are some mandatory fields to be filled in. Default value could be applied in most of the parts&nbsp;but for some field you need to enter the proper value&nbsp;by yourself, for example, your real name, passpharse and etc.</p>
<p>Once key is created. Call the following command to see the created key's information.</p>
<pre class=\"brush:bash;auto-links:false;toolbar:false\" contenteditable=\"false\">gpg --list-keys</pre>
<p>If there is nothing wrong, the information will be shown as below</p>
<pre class=\"brush:bash;auto-links:false;toolbar:false\" contenteditable=\"false\">pub   2048R/01ABCDEF 2015-03-07
uid                  Sittiphol Phanvilai &lt;yourmail@email.com&gt;
sub   2048R/98765432 2015-03-07</pre>
<p>Now we have to upload the public key to keyservers to make it&nbsp;useful. To do so, please call the following command and replace PUBLIC_KEY_ID with 8-digits&nbsp;hexadecimal value after 2048R/ in the <strong>pub</strong> line which is <code>01ABCDEF</code>&nbsp;in this example.</p>
<pre class=\"brush:bash;auto-links:false;toolbar:false\" contenteditable=\"false\">gpg --keyserver hkp://pool.sks-keyservers.net --send-keys PUBLIC_KEY_ID</pre>
<p>And then, export both public and private key as ASCII armor format with the following command and please replace <a href=\"mailto:yourmail@email.com\">yourmail@email.com</a>&nbsp;to the email you used to create your own key in the previous step.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">gpg -a --export yourmail@email.com &gt; public_key_sender.asc
gpg -a --export-secret-key yourmail@email.com &gt; private_key_sender.asc</pre>
<p>Open Bintray's&nbsp;<a href=\"https://bintray.com/profile/edit\" target=\"_blank\">Edit Profile</a>&nbsp;page and click at <strong>GPG Signing</strong>. Fill in both Public Key and Private Key using content in <span style=\"font-family: 'courier new', courier, monospace;\">public_key_sender.asc</span> and <span style=\"font-family: 'courier new', courier, monospace;\">private_key_sender.asc</span> files exported in previous step respectively.</p>
<p><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/gpg.png\" alt=\"gpg\" /></p>
<p>Click at <strong>Update</strong> to save the keys</p>
<p>The final step is to enable auto signing. Go to main page of <a href=\"https://bintray.com/\" target=\"_blank\">Bintray</a>&nbsp;and then click at <strong>maven</strong>.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/maven.png\" alt=\"maven\" /></p>
<p>Click&nbsp;<strong>Edit</strong></p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/editmaven.png\" alt=\"editmaven\" /></p>
<p><strong>Check</strong> the <strong>GPG Sign uploaed files automatically</strong>&nbsp;box to enable auto signing.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/autosigned.png\" alt=\"autosigned\" /></p>
<p>Click <strong>Update</strong>&nbsp;to save the progress. That's all. From now on, every single library uploaded to our Maven Repository will be automatically signed and is ready to be forwarded to Maven Central in a single click.</p>
<p>Please note that this is a one-time action and would be also applied to every single library created after this.</p>
<p>Bintray and Maven Central are now prepared. Now let's switch to Android Studio part.</p>
<h2 class=\"subsection-heading\">Part 4&nbsp;: Prepare an&nbsp;Android Studio project</h2>
<p>In many cases, we might need more than 1 library to be uploaded to repository in the single project and at the same time, we might not need to upload something as well. So the best structure I would recommend is to split each part as <strong>Module</strong>. Basically I suggest you to split to at least 2 modules, one&nbsp;<em>Application Module</em> for library usage example and another one is a <em>Library Module</em> contains the source code of&nbsp;library that you wish to upload to repository. Please note that if you want to have more than 1 library in your project, please feel free to create another module:&nbsp;<span style=\"text-decoration: underline;\"><strong>1 module per 1 library</strong></span>.</p>
<p><img src=\"http://inthecheesefactory.com/uploads/source/jcenter/projectstructure.png\" alt=\"projectstructure\" /></p>
<p>I believe that all of you know how to create a library module so I will not talk to deep in this part. It is just as simply as creating an <strong>Android Library</strong> module and it's&nbsp;done.</p>
<p><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/newmodule.png\" alt=\"newmodule\" /></p>
<p>Next is to apply bintray's plugin to your project. To do that, we need to modify <span style=\"text-decoration: underline;\">project's</span> <code>build.gradle</code>&nbsp;file in dependencies part like this.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">    dependencies {
        classpath 'com.android.tools.build:gradle:1.2.3'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.4'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.3'
    }</pre>
<p><span style=\"color: #c0392b;\">It is important to set gradle build tools' version to 1.1.2 or upper since there is a critical bug in the prior versions. In this example, we will use the latest version, 1.2.3.</span></p>
<p>Next we will define the username and api key used for bintray authentication and also the password of created key by modifying <code>local.properties</code>. The reason that we need to put those things&nbsp;in this file is those information are sensitive and should not be shared to anywhere including version control. Fortunate that local.properties file is already added to .gitignore since project was created. So these sensitive data would not be uploaded to git server unintentionally.</p>
<p>Here is the three lines to add:</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">bintray.user=YOUR_BINTRAY_USERNAME
bintray.apikey=YOUR_BINTRAY_API_KEY
bintray.gpg.password=YOUR_GPG_PASSWORD
</pre>
<p>Put your bintray username in the first line and put the API Key which you could find yours at <strong>API Key</strong> tab in&nbsp;<a href=\"https://bintray.com/profile/edit\" target=\"_blank\">Edit Profile</a>&nbsp;page in the second line.</p>
<p>The last line is the passphrase you used to create GPG key in previous step. Save and close the file.</p>
<p>The last file to be modified is module's&nbsp;<code>build.gradle</code>&nbsp;file. Open it and put these lines right after&nbsp;<code>apply plugin: 'com.android.library'</code>&nbsp;like this.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">apply plugin: 'com.android.library'

ext {
    bintrayRepo = 'maven'
    bintrayName = 'fb-like'

    publishedGroupId = 'com.inthecheesefactory.thecheeselibrary'
    libraryName = 'FBLike'
    artifact = 'fb-like'

    libraryDescription = 'A wrapper for Facebook Native Like Button (LikeView) on Android'

    siteUrl = 'https://github.com/nuuneoi/FBLikeAndroid'
    gitUrl = 'https://github.com/nuuneoi/FBLikeAndroid.git'

    libraryVersion = '0.9.3'

    developerId = 'nuuneoi'
    developerName = 'Sittiphol Phanvilai'
    developerEmail = 'sittiphol@gmail.com'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = [\"Apache-2.0\"]
}</pre>
<p>Leave bintrayRepo as it currently is, maven. Change&nbsp;bintrayName to your package name created above.&nbsp;And also change the rest to match your library's information. From the above script, everyone would be able to use this&nbsp;library with a following line of gradle script.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">compile 'com.inthecheesefactory.thecheeselibrary:fb-like:0.9.3'</pre>
<p>Final step is to apply two scripts, used for building library files and uploading the built files to bintray, by appending the same <code>build.gradle</code> file&nbsp;with the following script <strong>at the end of the file</strong>. (I use the direct link to file hosted on github for convenience)</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">// Place it at the end of the file
apply from: 'https://raw.githubusercontent.com/nuuneoi/JCenter/master/installv1.gradle'
apply from: 'https://raw.githubusercontent.com/nuuneoi/JCenter/master/bintrayv1.gradle'
</pre>
<p>Done! Your project is now set and is ready to be uploaded to bintray. Yah !</p>
<h2 class=\"section-heading\">Part 5 : Upload library to&nbsp;your bintray space</h2>
<p>Now it's time to upload your library to <span style=\"text-decoration: underline;\">your own repository on bintray</span>.&nbsp;To do that, please go to <strong>Terminal</strong> tab on Android Studio.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/terminal.png\" alt=\"terminal\" /></p>
<p>First step is to check the correctness of code and build the library files (aar, pom, etc.). Type the below command to do so.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">&gt; gradlew install</pre>
<p>If these is nothing wrong, it would show something like:</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">BUILD SUCCESSFUL</pre>
<p>We are now halfway there. Next step is to upload the built files to bintray with following command.</p>
<pre class=\"brush:bash;auto-links:false;toolbar:false\" contenteditable=\"false\">&gt; gradlew bintrayUpload
</pre>
<p>Say eureka loudly if it shows like below&nbsp;!</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">SUCCESSFUL</pre>
<p>Check your package in the bintray web interface. You will see&nbsp;a change in Versions area.</p>
<p><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/firstuploaded.png\" alt=\"firstuploaded\" /></p>
<p>Click into it and look into <strong>Files</strong> tab and you will see the of uploaded library files placed right there.</p>
<p><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/uploadedfiles.png\" alt=\"uploadedfiles\" /></p>
<p>Congratulations, your library is now online and is ready for anyone to use it !</p>
<p>However don't too happy ... just yet. The library is still on your own Maven Repository not on jcenter yet. <span style=\"text-decoration: underline; color: #c0392b;\">If anyone want to use your library, they have to define the repository's url first like below.</span></p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">repositories {
    maven {
        url 'https://dl.bintray.com/nuuneoi/maven/'
    }
}

...

dependencies {
    compile 'com.inthecheesefactory.thecheeselibrary:fb-like:0.9.3'
}</pre>
<p>You could find the url of your own Maven Repository from bintray web interface or just simply replace nuuneoi with your bintray username. I encourage you to try browsing into that link as well and you will see what exactly is going on.</p>
<p>As mentioned above, it is not the best practices for shared library to let developer defines the complex things like this. Imagine, we have to add 10 urls to use 10 libraries? ... Nightmare&nbsp;... So let's pass our library from our own repository to jcenter for the better life quality !</p>
<h2 class=\"section-heading\">Part 6 : Sync bintray user repository to jcenter</h2>
<p>It is pretty easy to sync your library to jcenter. Just go to the web interface and simply click at&nbsp;<strong>Add to JCenter</strong></p>
<p><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/addtojcenter.png\" alt=\"addtojcenter\" /></p>
<p>Nothing to do but click <strong>Send</strong></p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/addtojcenter2.png\" alt=\"addtojcenter2\" /></p>
<p>Nothing we can do now but wait for 2-3 hours to let bintray team approves our request. Once sync request&nbsp;is approved, you will receive an email informing you the change. Now let's check the web interface, you will see some change in <strong>Linked To</strong>&nbsp;section.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/linkedto.png\" alt=\"linkedto\" /></p>
<p>From now on, any developer that use&nbsp;<code>jcenter()</code>&nbsp;repository will be able to use our library with a single line of gradle script.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">    compile 'com.inthecheesefactory.thecheeselibrary:fb-like:0.9.3'</pre>
<p>Want to check the existence of your library binary in jcenter? You could do that by go to&nbsp;<a href=\"http://jcenter.bintray.com\">http://jcenter.bintray.com </a>and browse into the directory matched your library's group id and artifact id. In this example, it would be&nbsp;<code>com&nbsp;-&gt;&nbsp;inthecheesefactory -&gt; thecheeselibrary -&gt; fb-like -&gt; 0.9.3</code></p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/fblikejcenter.png\" alt=\"fblikejcenter\" /></p>
<p>Please note that linking to jcenter is a one-time action. From now on, if you do&nbsp;any modification in&nbsp;your package, for example, upload new version binary, delete old version binary, etc. The change would affect to jcenter as well. Anyway since your own repository and jcenter are at the different place so you may need to wait for around 2-3 minutes to let jcenter sync the&nbsp;change.</p>
<p>And please be careful. If you decide to remove the whole package, library files placed on jcenter repository would not be deleted in this case. And they&nbsp;will be left just like zombie files which nobody could delete&nbsp;it anymore. So I suggest you that if you want to delete the whole package, please delete every single version from web interface first before removing the package.</p>
<h2 class=\"section-heading\">Part 7&nbsp;: Forward library to&nbsp;Maven Central</h2>
<p>Not all of android developers use jcenter. There are still a number of developers who still use <code>mavenCentral()</code> so let's upload our library to Maven Central as well.</p>
<p>To forward library from jcenter to Maven Central, there are two missions that you need to achieve&nbsp;first:</p>
<p style=\"padding-left: 30px;\">1) Bintray package must be already linked to jcenter</p>
<p style=\"padding-left: 30px;\">2) Repository on Maven Central has already been approved to open</p>
<p>If you have already passed those qualifications. The way to forward your library package to Maven Central is incredibly easy. Just simply click at <strong>Maven Central</strong>&nbsp;link on package's details page.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/syncmavencentral.png\" alt=\"syncmavencentral\" /></p>
<p>Enter your Sonatype username/password and click <strong>Sync</strong>.</p>
<p><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/jcenter/syncmavencentral2.png\" alt=\"syncmavencentral2\" /></p>
<p><strong>Successfully synced and closed repo</strong> would be shown in <strong>Last Sync Status</strong> once it's done successfully. But if there is any problem, it would be shown in Last Sync Errors. You have to fix the problem case by case since the condition of library that could be uploaded to Maven Central is quite strict, for example, + sign couldn't be used in the version of library's dependency definition.</p>
<p>Once done. You could find&nbsp;your library binaries in&nbsp;<a href=\"https://oss.sonatype.org/content/repositories/releases/\" target=\"_blank\">Maven Central Repository</a>&nbsp;at the directory matched your library's group/artifact id. In this example,&nbsp;it is&nbsp;<code>com&nbsp;-&gt;&nbsp;inthecheesefactory -&gt; thecheeselibrary -&gt; fb-like -&gt; 0.9.3</code></p>
<p>Congratulations ! That's all. Although it requires quite a lot of steps but steps are&nbsp;quite straightforward. And most of them are one-time action. Once things are set, you almost have to do any additional step&nbsp;after that.</p>
<p>Such a long article but hope that you find it useful. My English might be a little bit weird right now.&nbsp;But at least, I expect that contents&nbsp;are&nbsp;apprehensible.</p>
<p>Wish to see your great library up there ! Cheers. =)</p>			") (link nil "http://inthecheesefactory.com/blog/how-to-upload-library-to-jcenter-maven-central-as-dependency/en") (pubDate nil "
				Sun, 31 May 2015 10:18:00 +0000			") (guid nil "http://inthecheesefactory.com/blog/how-to-upload-library-to-jcenter-maven-central-as-dependency/en"))) ("The Real Best Practices to Save/Restore Activity's and Fragment's state. (StatedFragment is now deprecated)" "<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/fragmentstate/18.png\" /></p>
<p>Months ago&nbsp;I published an article related to Fragment State saving &amp; restoring,&nbsp;<a href=\"../../../blog/best-approach-to-keep-android-fragment-state/en\" target=\"_blank\">Probably be the best way (?) to save/restore Android Fragment&rsquo;s state so far</a>. A lot of valuable feedback are received from Android developers all over the world. Thanks a ton to you all =)</p>
<p>Anyway <code>StatedFragment</code>&nbsp;causes a pattern breaking since it was designed to do the different way as Android is designed with an assumption that it might be easier for Android&nbsp;developer to understand Fragment's state saving/restoring if it acts just like Activity does (View's state and Instance state are handled at&nbsp;the same time). So I did an&nbsp;experiment by developed&nbsp;StatedFragment and see how is it going. Is it easier to understand? Is its pattern is more developer-friendly?</p>
<p><span style=\"color: #c0392b;\">Right now, after 2 months of experiment, I think I got a result&nbsp;already. Although StatedFragment is a little bit easier to understand but it also comes with a pretty big problem.&nbsp;It breaks a pattern design of Android's View architecture. So I think it may causes a long time problem which is totally not good. Actually I also feel weird with my codes myself already...</span></p>
<p>With this reason, <span style=\"color: #c0392b;\"><strong>I decide to mark StatedFragment as deprecated from now on</strong></span>. And as an apology&nbsp;for the mistake, I wrote this blog to show the real best practices visually&nbsp;how to save and restore Fragment's state in the&nbsp;way Android is designed. =)</p>
<h2 class=\"section-heading\">Understand what happens while&nbsp;Activity's State is&nbsp;being Saved/Restored</h2>
<p>When Activity's <code>onSaveInstanceState</code> is called. Activity will automatically collect View's State from&nbsp;every single View in the View hierachy. Please note that only View that is implemented View State Saving/Restoring internally that could be collected the data from. Once <code>onRestoreInstanceState</code> is called. Activity will send those collected data back to the View in the View hierachy that provides the same <code>android:id</code>&nbsp;as it is collected from one by one.</p>
<p>Let's see it in visualization.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/fragmentstate/activitysavestate_.gif\" alt=\"activitysavestate_\" /></p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/fragmentstate/activityrestorestate_.gif\" alt=\"activityrestorestate_\" /></p>
<p>This is the reason why text typed inside EditText still persisted even though&nbsp;Activity is already destroyed and we didn't do anything special. There is no magic. Those View State are automatically collected and restored back.</p>
<p>And this is also the reason why those View without <code>android:id</code> defined isn't able to&nbsp;restore its View's state.</p>
<p>Although those View's state are automatically saved but the Activity's member variables are not. They will be destroyed along with Activity. You have to manually save and restore them&nbsp;through&nbsp;<code>onSaveInstanceState</code>&nbsp;and&nbsp;<code>onRestoreInstanceState</code>&nbsp;method.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">public class MainActivity extends AppCompatActivity {
// These variable are destroyed along with Activity
private int someVarA;
private String someVarB;
...
@Override
protected void onSaveInstanceState(Bundle outState) {
super.onSaveInstanceState(outState);
outState.putInt(\"someVarA\", someVarA);
outState.putString(\"someVarB\", someVarB);
}
@Override
protected void onRestoreInstanceState(Bundle savedInstanceState) {
super.onRestoreInstanceState(savedInstanceState);
someVarA = savedInstanceState.getInt(\"someVarA\");
someVarB = savedInstanceState.getString(\"someVarB\");
}
}
</pre>
<p>That's all what you have to do to restore Activity's Instance state and View state.</p>
<h2 class=\"section-heading\">Understand what happens while Fragment's&nbsp;State is&nbsp;being Saved/Restored</h2>
<p>In case that Fragment is destroyed by the system. Everything&nbsp;will just happen exactly the same as Activity.</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/fragmentstate/fragmentstatesaving.gif\" alt=\"fragmentstatesaving\" /></p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/fragmentstate/fragmentstaterestoring_.gif\" alt=\"fragmentstaterestoring_\" /></p>
<p>It means that every single member variables are also destroyed. You have to manually save and restore those variables through&nbsp;<code>onSaveInstanceState</code>&nbsp;and&nbsp;<code>onActivityCreated</code>&nbsp;method respectively. Please note that there is no onRestoreInstanceState method inside Fragment.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">public class MainFragment extends Fragment {
// These variable are destroyed along with Activity
private int someVarA;
private String someVarB;
...
@Override
public void onSaveInstanceState(Bundle outState) {
super.onSaveInstanceState(outState);
outState.putInt(\"someVarA\", someVarA);
outState.putString(\"someVarB\", someVarB);
}
@Override
public void onActivityCreated(@Nullable Bundle savedInstanceState) {
super.onActivityCreated(savedInstanceState);
someVarA = savedInstanceState.getInt(\"someVarA\");
someVarB = savedInstanceState.getString(\"someVarB\");
}
}
</pre>
<p>For Fragment, there is some special case that is different from Activity and I think that you need to know about it. <span style=\"color: #c0392b;\"><strong>Once Fragment&nbsp;is returned from backstack, its View would be destroyed and recreated.</strong></span></p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/statedfragment/1-kbK7DckgeJiBgpGFQGbcog.png\" alt=\"\" width=\"317\" height=\"847\" /></p>
<p><span style=\"color: #c0392b;\"><strong>In this case, Fragment is not destroyed. Only View inside Fragment does.</strong></span>&nbsp;As a result, there is no any Instance State saving happens. But what happens to those View that is newly created by Fragment's lifecycle showed above?</p>
<p>Not a problem. Android is designed this way.&nbsp;View State Saving/Restoring are internally called&nbsp;inside Fragment in this case. As a result, every single View that is implemented a View State Saving/Restoring internally, for example <code>EditText</code> or <code>TextView</code> with <code>android:freezeText=\"true\"</code>, will be automatically saved and restored the state. Causes it to display&nbsp;just perfectly the same as previous.</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/fragmentstate/fragmentfrombackstack_.gif\" alt=\"fragmentfrombackstack_\" /></p>
<p>Please note that only View is destroyed (and recreated) in this case. Fragment is still there, just like those member variables inside.&nbsp;So you don't have to do anything with them. No any additional code is required.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">public class MainFragment extends Fragment {
// These variable still persist in this case
private int someVarA;
private String someVarB;
...
}
</pre>
<p>You might already notice that if every single View used in this Fragment are internally implemented a View Saving/Restoring. You have no need to do anything in this case since View's state will be automatically restored and member variables inside Fragment also still persist.</p>
<p>So the first condition of Fragment's State Saving/Restoring Best Practices is ...</p>
<h2 class=\"section-heading\">Every single View used in your application must be internally implemented State Saving/Restoring</h2>
<p>Android provides a mechanic to View to save and restore View State internally through <code>onSaveInstanceState</code>&nbsp;and&nbsp;<code>onRestoreInstanceState</code>&nbsp;method. It is developer's task to implement it.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">public class CustomView extends View {
...
@Override
public Parcelable onSaveInstanceState() {
Bundle bundle = new Bundle();
// Save current View's state here
return bundle;
}
@Override
public void onRestoreInstanceState(Parcelable state) {
super.onRestoreInstanceState(state);
// Restore View's state here
}
...
}
</pre>
<p>Basically every single standard View such as EditText, TextView, Checkbox and etc. are all already internally implemented those things. Anyway you may need to enable it for some View for example you have to set <code>android:freezeText</code> to true for <code>TextView</code> to use the feature.</p>
<p>But if we talk about 3rd Party Custom View distributed all over the internet. I must say that many of them aren't implemented this part of code&nbsp;yet&nbsp;which may cause a big problem in real use.</p>
<p><span style=\"color: #c0392b;\">If you decide to use any of 3rd Party Custom View, you have to be&nbsp;sure that it is already implemented View State Saving/Restoring internally or you have to create a subclass derived from that Custom View and implement <code>onSaveInstanceState</code>/<code>onRestoreInstanceState</code> yourself.</span></p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">//
// Assumes that SomeSmartButton is a 3rd Party view that
// View State Saving/Restoring are not implemented internally
//
public class SomeBetterSmartButton extends SomeSmartButton {
...
@Override
public Parcelable onSaveInstanceState() {
Bundle bundle = new Bundle();
// Save current View's state here
return bundle;
}
@Override
public void onRestoreInstanceState(Parcelable state) {
super.onRestoreInstanceState(state);
// Restore View's state here
}
...
}
</pre>
<p>And if you create your own&nbsp;Custom View or Custom Viewgroup, don't forget to implement those two methods as well. It is really important that every single type of View used in the application&nbsp;is implemented&nbsp;this part.</p>
<p>And also don't forget to assign&nbsp;<code>android:id</code>&nbsp;attribute to every single View placed in the layout&nbsp;that you need to enable View State Saving and Restoring or it will not be able to restore the state at all.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">    &lt;EditText
android:id=\"@+id/editText1\"
android:layout_width=\"match_parent\"
android:layout_height=\"wrap_content\" /&gt;
&lt;EditText
android:id=\"@+id/editText2\"
android:layout_width=\"match_parent\"
android:layout_height=\"wrap_content\" /&gt;
&lt;CheckBox
android:id=\"@+id/cbAgree\"
android:text=\"I agree\"
android:layout_width=\"wrap_content\"
android:layout_height=\"wrap_content\" /&gt;</pre>
<p>We are now halfway there!</p>
<h2 class=\"section-heading\">Clearly seperate&nbsp;Fragment State from&nbsp;View State</h2>
<p>To make your code&nbsp;be clean and scalable, you have to seperate Fragment State and View State from each other. If any property is belonged to View, do the state saving/restoring inside View. If any property is belonged to Fragment, do it inside Fragment. Here is an example:</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">public class MainFragment extends Fragment {
...
private String dataGotFromServer;
@Override
public void onSaveInstanceState(Bundle outState) {
super.onSaveInstanceState(outState);
outState.putString(\"dataGotFromServer\", dataGotFromServer);
}
@Override
public void onActivityCreated(Bundle savedInstanceState) {
super.onActivityCreated(savedInstanceState);
dataGotFromServer = savedInstanceState.getString(\"dataGotFromServer\");
}
...
}
</pre>
<p><span style=\"color: #c0392b;\">Let me repeat again. Don't save View's State inside Fragment's onSaveInstanceState and vice versa.</span></p>
<p>That's all. It is the Best Practices on how to Save/Restore Activity's,&nbsp;Fragment's and View's State. Hope you find this piece of information useful =)</p>
<h2 class=\"section-heading\">Goodbye&nbsp;StatedFragment, say Hi to NestedActivityResultFragment</h2>
<p>Please do the way described&nbsp;above to Save/Restore Activity's, Fragment's and View's State. And&nbsp;let me mark <code>StatedFragment</code> as <strong>deprecated</strong> now.</p>
<p>However StatedFragment's functionality to retrieve onActivityResult in Nested Fragment is still good to go. To prevent any&nbsp;confusion in the future, I decide to seperate that functionality to a new class <code>NestedActivityResultFragment</code>&nbsp;available from v0.10.0 onwards.</p>
<p>More information about it is now available&nbsp;at&nbsp;<a href=\"https://github.com/nuuneoi/StatedFragment\">https://github.com/nuuneoi/StatedFragment</a>. Please feel free to check it&nbsp;anytime !</p>
<p>Hope that the visualization in this blog helps you understand about the way to restore Activity's, Fragment's and View's State&nbsp;clearly. So sorry for the confusion in the previous article. ^^\"</p>" "http://inthecheesefactory.com/blog/fragment-state-saving-best-practices/en" (21822 39408) old 16 nil nil ((title nil "
				The Real Best Practices to Save/Restore Activity's and Fragment's state. (StatedFragment is now deprecated)			") (description nil "
				<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/fragmentstate/18.png\" /></p> 
<p>Months ago&nbsp;I published an article related to Fragment State saving &amp; restoring,&nbsp;<a href=\"../../../blog/best-approach-to-keep-android-fragment-state/en\" target=\"_blank\">Probably be the best way (?) to save/restore Android Fragment&rsquo;s state so far</a>. A lot of valuable feedback are received from Android developers all over the world. Thanks a ton to you all =)</p>
<p>Anyway <code>StatedFragment</code>&nbsp;causes a pattern breaking since it was designed to do the different way as Android is designed with an assumption that it might be easier for Android&nbsp;developer to understand Fragment's state saving/restoring if it acts just like Activity does (View's state and Instance state are handled at&nbsp;the same time). So I did an&nbsp;experiment by developed&nbsp;StatedFragment and see how is it going. Is it easier to understand? Is its pattern is more developer-friendly?</p>
<p><span style=\"color: #c0392b;\">Right now, after 2 months of experiment, I think I got a result&nbsp;already. Although StatedFragment is a little bit easier to understand but it also comes with a pretty big problem.&nbsp;It breaks a pattern design of Android's View architecture. So I think it may causes a long time problem which is totally not good. Actually I also feel weird with my codes myself already...</span></p>
<p>With this reason, <span style=\"color: #c0392b;\"><strong>I decide to mark StatedFragment as deprecated from now on</strong></span>. And as an apology&nbsp;for the mistake, I wrote this blog to show the real best practices visually&nbsp;how to save and restore Fragment's state in the&nbsp;way Android is designed. =)</p>
<h2 class=\"section-heading\">Understand what happens while&nbsp;Activity's State is&nbsp;being Saved/Restored</h2>
<p>When Activity's <code>onSaveInstanceState</code> is called. Activity will automatically collect View's State from&nbsp;every single View in the View hierachy. Please note that only View that is implemented View State Saving/Restoring internally that could be collected the data from. Once <code>onRestoreInstanceState</code> is called. Activity will send those collected data back to the View in the View hierachy that provides the same <code>android:id</code>&nbsp;as it is collected from one by one.</p>
<p>Let's see it in visualization.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/fragmentstate/activitysavestate_.gif\" alt=\"activitysavestate_\" /></p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/fragmentstate/activityrestorestate_.gif\" alt=\"activityrestorestate_\" /></p>
<p>This is the reason why text typed inside EditText still persisted even though&nbsp;Activity is already destroyed and we didn't do anything special. There is no magic. Those View State are automatically collected and restored back.</p>
<p>And this is also the reason why those View without <code>android:id</code> defined isn't able to&nbsp;restore its View's state.</p>
<p>Although those View's state are automatically saved but the Activity's member variables are not. They will be destroyed along with Activity. You have to manually save and restore them&nbsp;through&nbsp;<code>onSaveInstanceState</code>&nbsp;and&nbsp;<code>onRestoreInstanceState</code>&nbsp;method.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">public class MainActivity extends AppCompatActivity {

    // These variable are destroyed along with Activity
    private int someVarA;
    private String someVarB;

    ...

    @Override
    protected void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        outState.putInt(\"someVarA\", someVarA);
        outState.putString(\"someVarB\", someVarB);
    }

    @Override
    protected void onRestoreInstanceState(Bundle savedInstanceState) {
        super.onRestoreInstanceState(savedInstanceState);
        someVarA = savedInstanceState.getInt(\"someVarA\");
        someVarB = savedInstanceState.getString(\"someVarB\");
    }

}
</pre>
<p>That's all what you have to do to restore Activity's Instance state and View state.</p>
<h2 class=\"section-heading\">Understand what happens while Fragment's&nbsp;State is&nbsp;being Saved/Restored</h2>
<p>In case that Fragment is destroyed by the system. Everything&nbsp;will just happen exactly the same as Activity.</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/fragmentstate/fragmentstatesaving.gif\" alt=\"fragmentstatesaving\" /></p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/fragmentstate/fragmentstaterestoring_.gif\" alt=\"fragmentstaterestoring_\" /></p>
<p>It means that every single member variables are also destroyed. You have to manually save and restore those variables through&nbsp;<code>onSaveInstanceState</code>&nbsp;and&nbsp;<code>onActivityCreated</code>&nbsp;method respectively. Please note that there is no onRestoreInstanceState method inside Fragment.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">public class MainFragment extends Fragment {

    // These variable are destroyed along with Activity
    private int someVarA;
    private String someVarB;

    ...

    @Override
    public void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        outState.putInt(\"someVarA\", someVarA);
        outState.putString(\"someVarB\", someVarB);
    }

    @Override
    public void onActivityCreated(@Nullable Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        someVarA = savedInstanceState.getInt(\"someVarA\");
        someVarB = savedInstanceState.getString(\"someVarB\");
    }

}
</pre>
<p>For Fragment, there is some special case that is different from Activity and I think that you need to know about it. <span style=\"color: #c0392b;\"><strong>Once Fragment&nbsp;is returned from backstack, its View would be destroyed and recreated.</strong></span></p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/statedfragment/1-kbK7DckgeJiBgpGFQGbcog.png\" alt=\"\" width=\"317\" height=\"847\" /></p>
<p><span style=\"color: #c0392b;\"><strong>In this case, Fragment is not destroyed. Only View inside Fragment does.</strong></span>&nbsp;As a result, there is no any Instance State saving happens. But what happens to those View that is newly created by Fragment's lifecycle showed above?</p>
<p>Not a problem. Android is designed this way.&nbsp;View State Saving/Restoring are internally called&nbsp;inside Fragment in this case. As a result, every single View that is implemented a View State Saving/Restoring internally, for example <code>EditText</code> or <code>TextView</code> with <code>android:freezeText=\"true\"</code>, will be automatically saved and restored the state. Causes it to display&nbsp;just perfectly the same as previous.</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/fragmentstate/fragmentfrombackstack_.gif\" alt=\"fragmentfrombackstack_\" /></p>
<p>Please note that only View is destroyed (and recreated) in this case. Fragment is still there, just like those member variables inside.&nbsp;So you don't have to do anything with them. No any additional code is required.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">public class MainFragment extends Fragment {

    // These variable still persist in this case
    private int someVarA;
    private String someVarB;

    ...

}
</pre>
<p>You might already notice that if every single View used in this Fragment are internally implemented a View Saving/Restoring. You have no need to do anything in this case since View's state will be automatically restored and member variables inside Fragment also still persist.</p>
<p>So the first condition of Fragment's State Saving/Restoring Best Practices is ...</p>
<h2 class=\"section-heading\">Every single View used in your application must be internally implemented State Saving/Restoring</h2>
<p>Android provides a mechanic to View to save and restore View State internally through <code>onSaveInstanceState</code>&nbsp;and&nbsp;<code>onRestoreInstanceState</code>&nbsp;method. It is developer's task to implement it.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">public class CustomView extends View {

    ...

    @Override
    public Parcelable onSaveInstanceState() {
        Bundle bundle = new Bundle();
        // Save current View's state here
        return bundle;
    }

    @Override
    public void onRestoreInstanceState(Parcelable state) {
        super.onRestoreInstanceState(state);
        // Restore View's state here
    }

    ...

}
</pre>
<p>Basically every single standard View such as EditText, TextView, Checkbox and etc. are all already internally implemented those things. Anyway you may need to enable it for some View for example you have to set <code>android:freezeText</code> to true for <code>TextView</code> to use the feature.</p>
<p>But if we talk about 3rd Party Custom View distributed all over the internet. I must say that many of them aren't implemented this part of code&nbsp;yet&nbsp;which may cause a big problem in real use.</p>
<p><span style=\"color: #c0392b;\">If you decide to use any of 3rd Party Custom View, you have to be&nbsp;sure that it is already implemented View State Saving/Restoring internally or you have to create a subclass derived from that Custom View and implement <code>onSaveInstanceState</code>/<code>onRestoreInstanceState</code> yourself.</span></p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">//
// Assumes that SomeSmartButton is a 3rd Party view that
// View State Saving/Restoring are not implemented internally
//
public class SomeBetterSmartButton extends SomeSmartButton {

    ...

    @Override
    public Parcelable onSaveInstanceState() {
        Bundle bundle = new Bundle();
        // Save current View's state here
        return bundle;
    }

    @Override
    public void onRestoreInstanceState(Parcelable state) {
        super.onRestoreInstanceState(state);
        // Restore View's state here
    }

    ...

}
</pre>
<p>And if you create your own&nbsp;Custom View or Custom Viewgroup, don't forget to implement those two methods as well. It is really important that every single type of View used in the application&nbsp;is implemented&nbsp;this part.</p>
<p>And also don't forget to assign&nbsp;<code>android:id</code>&nbsp;attribute to every single View placed in the layout&nbsp;that you need to enable View State Saving and Restoring or it will not be able to restore the state at all.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">    &lt;EditText
        android:id=\"@+id/editText1\"
        android:layout_width=\"match_parent\"
        android:layout_height=\"wrap_content\" /&gt;

    &lt;EditText
        android:id=\"@+id/editText2\"
        android:layout_width=\"match_parent\"
        android:layout_height=\"wrap_content\" /&gt;

    &lt;CheckBox
        android:id=\"@+id/cbAgree\"
        android:text=\"I agree\"
        android:layout_width=\"wrap_content\"
        android:layout_height=\"wrap_content\" /&gt;</pre>
<p>We are now halfway there!</p>
<h2 class=\"section-heading\">Clearly seperate&nbsp;Fragment State from&nbsp;View State</h2>
<p>To make your code&nbsp;be clean and scalable, you have to seperate Fragment State and View State from each other. If any property is belonged to View, do the state saving/restoring inside View. If any property is belonged to Fragment, do it inside Fragment. Here is an example:</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">public class MainFragment extends Fragment {

    ...

    private String dataGotFromServer;
    
    @Override
    public void onSaveInstanceState(Bundle outState) {
        super.onSaveInstanceState(outState);
        outState.putString(\"dataGotFromServer\", dataGotFromServer);
    }

    @Override
    public void onActivityCreated(Bundle savedInstanceState) {
        super.onActivityCreated(savedInstanceState);
        dataGotFromServer = savedInstanceState.getString(\"dataGotFromServer\");
    }

    ...

}
</pre>
<p><span style=\"color: #c0392b;\">Let me repeat again. Don't save View's State inside Fragment's onSaveInstanceState and vice versa.</span></p>
<p>That's all. It is the Best Practices on how to Save/Restore Activity's,&nbsp;Fragment's and View's State. Hope you find this piece of information useful =)</p>
<h2 class=\"section-heading\">Goodbye&nbsp;StatedFragment, say Hi to NestedActivityResultFragment</h2>
<p>Please do the way described&nbsp;above to Save/Restore Activity's, Fragment's and View's State. And&nbsp;let me mark <code>StatedFragment</code> as <strong>deprecated</strong> now.</p>
<p>However StatedFragment's functionality to retrieve onActivityResult in Nested Fragment is still good to go. To prevent any&nbsp;confusion in the future, I decide to seperate that functionality to a new class <code>NestedActivityResultFragment</code>&nbsp;available from v0.10.0 onwards.</p>
<p>More information about it is now available&nbsp;at&nbsp;<a href=\"https://github.com/nuuneoi/StatedFragment\">https://github.com/nuuneoi/StatedFragment</a>. Please feel free to check it&nbsp;anytime !</p>
<p>Hope that the visualization in this blog helps you understand about the way to restore Activity's, Fragment's and View's State&nbsp;clearly. So sorry for the confusion in the previous article. ^^\"</p>			") (link nil "http://inthecheesefactory.com/blog/fragment-state-saving-best-practices/en") (pubDate nil "
				Mon, 27 Apr 2015 20:20:00 +0000			") (guid nil "http://inthecheesefactory.com/blog/fragment-state-saving-best-practices/en"))) ("How to add a Native Facebook Like Button to your Android app using Facebook SDK for Android v4" "<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/facebooklike/cover.jpg\" /></p>
<p>Like button is one of the most important strategy to increase traffic to your website. No surprise why Facebook introduced a Native Like Button, <code>LikeView</code>,&nbsp;allowed developer to add Like button natively to their&nbsp;Android/iOS apps.</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/facebooklike/likes.png\" alt=\"likes\" /></p>
<p>Anyway although it sounds easy as we do on website but it is not like that. If we just place LikeView on application's layout, it works but with limited functionality for example like count and like status aren't showed, doesn't work on device without Facebook app installed, etc.</p>
<p>After digging through Facebook SDK's source code. I found that&nbsp;<span style=\"color: #d35400;\"><strong>LikeView is designed to work full functionally when application is connected to Facebook app only</strong></span>. And well ... AFAIK&nbsp;there is no any document mentioned about this.</p>
<p>After a couple of&nbsp;experiments, finally I found the sustainable way to make LikeView works full functionally and still be a good user experience practice.&nbsp;Let's go through it&nbsp;step-by-step.</p>
<h2 class=\"section-heading\">Create a&nbsp;Facebook App</h2>
<p>As mentioned above, application is needed to be connected with Facebook app to make LikeView works full functionally. So the first step is to create a Facebook app.</p>
<p>To do so, just browse to&nbsp;<a href=\"https://developers.facebook.com/apps\">https://developers.facebook.com/apps</a>&nbsp;and then press&nbsp;<strong>Add a New App</strong>&nbsp;to start creating a new Facebook app.</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/facebooklike/addnewapp.png\" alt=\"addnewapp\" /></p>
<p>Enter your preferred Facebook App and then press&nbsp;<strong>Create New Facebook App ID</strong></p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/facebooklike/newapp2.jpg\" alt=\"newapp2\" /></p>
<p>Choose a&nbsp;Category and press&nbsp;<strong>Create App ID</strong></p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/facebooklike/categoryselection.jpg\" alt=\"categoryselection\" /></p>
<p>You will now be redirected&nbsp;into Facebook App settings page. Please scroll to bottom and fill in those fields about your Android project: <strong>Package Name</strong> and <strong>Default Activity Class Name</strong>. Press <strong>Next</strong>.</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/facebooklike/classes.jpg\" alt=\"classes\" /></p>
<p>Here comes a little bit complicated part. To make your android app works flawlessly with Facebook App in debug and production mode, you have to&nbsp;fill in <strong>Debug Key Hash</strong> and <strong>Release Key Hash </strong>respectively.</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/facebooklike/keyhashesbefore.jpg\" alt=\"keyhashesbefore\" /></p>
<p>There are two ways to generate those key hashes: through command line and through Java code.</p>
<h2 class=\"subsection-heading\">Method 1&nbsp;- Through&nbsp;Command Line</h2>
<p>In case you use <strong>Mac</strong> or <strong>Linux</strong> and you already install <code>keytool</code> (comes along with JDK) and <code>openssl</code>. You could simple do the following&nbsp;through Command Line:</p>
<pre class=\"brush:ps;auto-links:false;toolbar:false\" contenteditable=\"false\">keytool -exportcert -alias androiddebugkey -keystore ~/.android/debug.keystore | openssl sha1 -binary | openssl base64</pre>
<p>Or like this on <strong>Windows</strong>:</p>
<pre class=\"brush:ps;auto-links:false;toolbar:false\" contenteditable=\"false\">keytool -exportcert -alias androiddebugkey -keystore %HOMEPATH%\\.android\\debug.keystore | openssl sha1 -binary | openssl base64</pre>
<p><span style=\"color: #d35400;\">Enter the hashed key got in both&nbsp;<strong>Development Key Hashes </strong>and<strong>&nbsp;Release Key Hash </strong>fields.</span></p>
<p>And the following command is used to generate a Key Hash for Deployment Keystore to let your app works with Facebook app in production mode.</p>
<pre class=\"brush:ps;auto-links:false;toolbar:false\" contenteditable=\"false\">keytool --exportcert -alias ENTER_ALIAS_HERE -keystore PATH_TO_KEYSTORE.keystore | openssl sha1 -binary | openssl base64</pre>
<p>Put the generated&nbsp;key in&nbsp;<strong>Release Key Hash </strong>field.</p>
<h2 class=\"subsection-heading\">Method 2&nbsp;- Through&nbsp;Java Code</h2>
<p>In case you didn't install keytool and openssl yet and you don't want to. You could generate those key hashes through Java code with the code snippet below. <span style=\"color: #c0392b;\">Please don't forget to change the package name to your app's.</span></p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">        try {
PackageInfo info = getPackageManager().getPackageInfo(
\"com.inthecheesefactory.lab.facebooklike\",
PackageManager.GET_SIGNATURES);
for (Signature signature : info.signatures) {
MessageDigest md = MessageDigest.getInstance(\"SHA\");
md.update(signature.toByteArray());
Log.d(\"KeyHash:\", Base64.encodeToString(md.digest(), Base64.DEFAULT));
}
} catch (PackageManager.NameNotFoundException e) {
} catch (NoSuchAlgorithmException e) {
}</pre>
<p>To generate&nbsp;Development&nbsp;Key Hash, you could simply run your app directly from your IDE and copy the generated key hash sent back in logcat, put it in both&nbsp;<strong>Development Key Hashes</strong>&nbsp;and&nbsp;<strong>Release Key Hash </strong>fields<strong>.</strong></p>
<p>To generate&nbsp;Release Key Hash, you need to sign your application with keystore you plan to use in production apk. Run the signed apk in your device or emulator and put generated&nbsp;Key Hash to&nbsp;<strong>Release Key Hash&nbsp;</strong>field.</p>
<p><em><span style=\"color: #e67e22;\">Please note that Key Hash for production release could be filled in later. The important one for now is Development Key Hash which you need to put in both Development Key Hashes and&nbsp;Release Key Hash&nbsp;fields.</span></em></p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/facebooklike/keyhashes2.jpg\" alt=\"keyhashes2\" /></p>
<p>Press <strong>Next</strong>&nbsp;and scroll to the bottom of the page and then press&nbsp;<strong>Skip to Developer Dashboard</strong>&nbsp;to enter&nbsp;your just-created app's&nbsp;Dashboard.</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/facebooklike/skiptodashboard.jpg\" alt=\"skiptodashboard\" /></p>
<p>Copy <strong>App ID</strong>&nbsp;for future use.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/facebooklike/appid.jpg\" alt=\"appid\" /></p>
<p>You are now done creating a Facebook App !</p>
<h2 class=\"section-heading\">Setup&nbsp;Facebook SDK in your project</h2>
<p>Now let's switch to client part. First of all, simply add a&nbsp;dependency for Facebook SDK v4 which is now (finally) available over mavenCentral and jcenter.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">dependencies {
compile 'com.facebook.android:facebook-android-sdk:4.0.1'
}
</pre>
<p>Add a string resource for Facebook Application ID like code below. (Change the number to your Facebook app's ID)</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;string name=\"app_id\"&gt;1459806660978042&lt;/string&gt;</pre>
<p>Place the code below into&nbsp;<code>AndroidManifest.xml</code>&nbsp;right&nbsp;before&nbsp;<code>&lt;/application&gt;</code>&nbsp;and <span style=\"color: #d35400;\"><strong>it's important to&nbsp;</strong><strong>change the number after FacebookContentProvider to your Facebook app's ID.</strong></span></p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">        &lt;!-- Facebook --&gt;
&lt;activity android:name=\"com.facebook.FacebookActivity\"
android:theme=\"@android:style/Theme.Translucent.NoTitleBar\"
android:configChanges=\"keyboard|keyboardHidden|screenLayout|screenSize|orientation\"
android:label=\"@string/app_name\" /&gt;
&lt;meta-data android:name=\"com.facebook.sdk.ApplicationName\"
android:value=\"@string/app_name\" /&gt;
&lt;meta-data android:name=\"com.facebook.sdk.ApplicationId\" android:value=\"@string/app_id\"/&gt;
&lt;provider android:authorities=\"com.facebook.app.FacebookContentProvider1459806660978042\"
android:name=\"com.facebook.FacebookContentProvider\"
android:exported=\"true\"/&gt;</pre>
<p>INTERNET permission is needed for&nbsp;LikeView. Don't forget to add this line inside&nbsp;<code>AndroidManifest.xml</code>&nbsp;before&nbsp;<code>&lt;application&gt;</code>.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;uses-permission android:name=\"android.permission.INTERNET\"/&gt;</pre>
<p>If you haven't done making a <strong>Custom Application</strong> class yet, do it and add line of codes below to initialize Facebook SDK in v4 way.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">public class MainApplication extends Application {
@Override
public void onCreate() {
super.onCreate();
FacebookSdk.sdkInitialize(getApplicationContext());
}
}</pre>
<p>Give a check that Custom Application is already defined in&nbsp;<code>AndroidManifest.xml</code>.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">    &lt;application
android:allowBackup=\"true\"
android:icon=\"@mipmap/ic_launcher\"
android:label=\"@string/app_name\"
android:theme=\"@style/AppTheme\"
android:name=\".MainApplication\" &gt;</pre>
<p>And you are now done setting up Facebook SDK in your Android app =D</p>
<h2 class=\"section-heading\">Play with&nbsp;LikeView</h2>
<p>Your app is now ready. Let's play a little bit with&nbsp;LikeView&nbsp;by simply placing it on layout.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;com.facebook.share.widget.LikeView
android:id=\"@+id/likeView\"
android:layout_width=\"wrap_content\"
android:layout_height=\"wrap_content\"/&gt;</pre>
<p>And do the following in Java code to set up its appearance.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">LikeView likeView = (LikeView) findViewById(R.id.likeView);
likeView.setLikeViewStyle(LikeView.Style.STANDARD);
likeView.setAuxiliaryViewPosition(LikeView.AuxiliaryViewPosition.INLINE);</pre>
<p>Set LikeView's url through <code>setObjectIdAndType</code> method.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">likeView.setObjectIdAndType(
\"http://inthecheesefactory.com/blog/understand-android-activity-launchmode/en\",
LikeView.ObjectType.OPEN_GRAPH)</pre>
<p>Here is the result. It works !</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/facebooklike/exp0.jpg\" alt=\"exp0\" /></p>
<p>Anyway it appears that it doesn't work perfectly just yet. Here are&nbsp;the two big concerns.</p>
<p><span style=\"color: #c0392b;\"><strong>Problem&nbsp;1: Like count and status aren't showed until you press Like button.</strong></span></p>
<p><span style=\"color: #e74c3c;\"><strong>Problem&nbsp;2: Doesn't work in device that Facebook App is not installed.</strong></span></p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/facebooklike/exp1.jpg\" alt=\"exp1\" /></p>
<p>The reason is already described above. LikeView works full functionally only in app that has already connected with Facebook App. Totally different with one in website which works perfectly without login required. (And yes, it is by designed. And also yes, I am curious why Facebook has designed&nbsp;it this way ...)</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/facebooklike/onweb.png\" alt=\"onweb\" /></p>
<p>Some workaround is needed. Facebook Login is required to make LikeView showed otherwise Login button with the same appearance as LikeView will come up instead.</p>
<p>There is nothing complicated. I just simply create a Login button using LinearLayout and let it be together with LikeView in RelativeLayout.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">...
&lt;RelativeLayout
android:layout_width=\"wrap_content\"
android:layout_height=\"wrap_content\"&gt;
&lt;!-- Login Button in the same style as LikeView --&gt;
&lt;LinearLayout
android:id=\"@+id/btnLoginToLike\"
android:background=\"@drawable/com_facebook_button_like_background\"
android:layout_width=\"wrap_content\"
android:layout_height=\"wrap_content\"
android:orientation=\"horizontal\"
android:clickable=\"true\" &gt;
&lt;ImageView
android:src=\"@drawable/com_facebook_button_icon\"
android:layout_width=\"wrap_content\"
android:layout_height=\"wrap_content\"
android:layout_marginLeft=\"8dp\"
android:layout_marginRight=\"8dp\"
android:layout_marginTop=\"7.5dp\"
android:layout_marginBottom=\"7.5dp\"/&gt;
&lt;TextView
android:id=\"@+id/tvLogin\"
android:text=\"Login\"
android:layout_marginLeft=\"2dp\"
android:layout_marginRight=\"8dp\"
android:textColor=\"@android:color/white\"
android:textStyle=\"bold\"
android:layout_gravity=\"center_vertical\"
android:layout_width=\"wrap_content\"
android:layout_height=\"wrap_content\"/&gt;
&lt;/LinearLayout&gt;
&lt;com.facebook.share.widget.LikeView
android:id=\"@+id/likeView\"
android:layout_width=\"wrap_content\"
android:layout_height=\"wrap_content\"/&gt;
&lt;/RelativeLayout&gt;
...</pre>
<p>And then do the logic in Java code&nbsp;with some help&nbsp;of&nbsp;<code>LoginManager</code>, <code>CallbackManager</code>&nbsp;and&nbsp;<code>AccessToken</code>&nbsp;provided in Facebook SDK for Android v4 to manage a Login flow and status checking.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">public class MainActivity extends Activity {
LinearLayout btnLoginToLike;
LikeView likeView;
CallbackManager callbackManager;
@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_main);
initInstances();
initCallbackManager();
refreshButtonsState();
}
private void initInstances() {
btnLoginToLike = (LinearLayout) findViewById(R.id.btnLoginToLike);
likeView = (LikeView) findViewById(R.id.likeView);
likeView.setLikeViewStyle(LikeView.Style.STANDARD);
likeView.setAuxiliaryViewPosition(LikeView.AuxiliaryViewPosition.INLINE);
btnLoginToLike.setOnClickListener(new OnClickListener() {
@Override
public void onClick(View v) {
LoginManager.getInstance().logInWithReadPermissions(MainActivity.this, Arrays.asList(\"public_profile\"));
}
});
}
private void initCallbackManager() {
callbackManager = CallbackManager.Factory.create();
LoginManager.getInstance().registerCallback(callbackManager, new FacebookCallback&lt;LoginResult&gt;() {
@Override
public void onSuccess(LoginResult loginResult) {
refreshButtonsState();
}
@Override
public void onCancel() {
}
@Override
public void onError(FacebookException e) {
}
});
}
private void refreshButtonsState() {
if (!isLoggedIn()) {
btnLoginToLike.setVisibility(View.VISIBLE);
likeView.setVisibility(View.GONE);
} else {
btnLoginToLike.setVisibility(View.GONE);
likeView.setVisibility(View.VISIBLE);
}
}
public boolean isLoggedIn() {
return AccessToken.getCurrentAccessToken() != null;
}
@Override
protected void onActivityResult(int requestCode, int resultCode, Intent data) {
super.onActivityResult(requestCode, resultCode, data);
// Handle Facebook Login Result
callbackManager.onActivityResult(requestCode, resultCode, data);
}
}
</pre>
<p>It's done. Let's see the result =)</p>
<h2 class=\"section-heading\">Result</h2>
<p>If the application isn't connected to Facebook app yet. Our custom Login Button would be showed instead of LikeView as designed.</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/facebooklike/btnLogin2.png\" alt=\"btnLogin2\" /></p>
<p>Once Login Button is clicked, it will redirect user to Login process.</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/facebooklike/loginprocess.png\" alt=\"loginprocess\" /></p>
<p>After user is logged in, Login Button will be hidden and replaced with LikeView. You will see that Like count and Like status are also showed up perfectly just like one on website. Yah ! If a url is changed, those number and status are also automatically changed to match the information associated to an entered url.</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/facebooklike/loggedin.png\" alt=\"loggedin\" /></p>
<p>If user press Like, it will affect the button embedded on website as well.</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/facebooklike/liked.png\" alt=\"liked\" /></p>
<p><span style=\"color: #16a085;\"><strong>A by-product of this method is LikeView button also works on the device without Facebook application installed. It means that it works even on Chrome or on ARC Welder !</strong></span></p>
<p style=\"text-align: center;\"><span style=\"color: #16a085;\"><strong><img src=\"http://inthecheesefactory.com/uploads/source/facebooklike/arcwelder.jpg\" alt=\"arcwelder\" /></strong></span></p>
<h2 class=\"section-heading\">Known bug</h2>
<p>Although it is close enough to&nbsp;perfect but there is still some known bug. If like is done on website, like status on application will not be updated. And we couldn't do anything but wait for Facebook engineer to fix this issue.</p>
<h2 class=\"section-heading\">FBLikeAndroid Library</h2>
<p>To make it as easy as possible to use. I made a library to do a&nbsp;job for you. <span style=\"color: #2980b9;\"><strong>FBLikeAndroid</strong> is a library comes up with Login Button that will change to Native Like Button automatically when application is connected to Facebook app.</span></p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/facebooklike/fblikeandroid.png\" alt=\"fblikeandroid\" /></p>
<p>To use it, you have to create a Facebook app and setup your project as written&nbsp;above. And then simply add the following dependency to your app's&nbsp;<code>build.gradle</code>. <span style=\"color: #16a085;\">Please note that Facebook SDK v4 is already included in this dependency so you have no need to add any additional dependency.</span></p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">dependencies {
compile 'com.inthecheesefactory.thecheeselibrary:fb-like:0.9.3'
}</pre>
<p>Place&nbsp;<code>com.inthecheesefactory.lib.fblike.widget.FBLikeView</code>&nbsp;anywhere to start using the component.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;com.inthecheesefactory.lib.fblike.widget.FBLikeView
android:id=\"@+id/fbLikeView\"
android:layout_width=\"wrap_content\"
android:layout_height=\"wrap_content\"/&gt;</pre>
<p>LikeView inside FBLikeView is already set the appearance to STANDARD so you have no need to set it again unless you need to change its&nbsp;style. To access LikeView attached inside, you could do it through a getter function,&nbsp;<code>getLikeView()</code>. The following code is used to set a url for LikeView.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">FBLikeView fbLikeView = (FBLikeView) rootView.findViewById(R.id.fbLikeView);
fbLikeView.getLikeView().setObjectIdAndType(
\"http://inthecheesefactory.com/blog/understand-android-activity-launchmode/en\",
LikeView.ObjectType.OPEN_GRAPH);</pre>
<p>The final&nbsp;step, you have to call&nbsp;<code>FBLikeView.onActivityResult</code>&nbsp;in every single Activity's <code>onActivityResult</code> to connect FBLikeView buttons to Facebook Login flow.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    @Override
protected void onActivityResult(int requestCode, int resultCode, Intent data) {
super.onActivityResult(requestCode, resultCode, data);
FBLikeView.onActivityResult(requestCode, resultCode, data);
}</pre>
<p>That's all ! Easy, huh? =D</p>
<p>If you want to disconnect your android app to Facebook app, simply call the following command. The button will be automatically changed to Login state.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">FBLikeView.logout();</pre>
<p>Source Code of FBLikeAndroid&nbsp;Library is available&nbsp;at&nbsp;<a href=\"https://github.com/nuuneoi/FBLikeAndroid\">https://github.com/nuuneoi/FBLikeAndroid</a>. Please feel free to take a look or contribute anytime =)</p>
<h2 class=\"section-heading\">Submit for public use</h2>
<p>Right now LikeView works only with Facebook app's administrator, you.&nbsp;To make LikeView works for everyone, you need to send a submission to Facebook team.&nbsp;Here is the steps to do so:</p>
<p>1) Enter your Facebook App's&nbsp;<strong>App Details</strong>&nbsp;page.&nbsp;Enter&nbsp;<strong>Long Description</strong>, <strong>Privacy Policy URL</strong>&nbsp;and also upload&nbsp;<strong>App Icon</strong>&nbsp;you desired.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/facebooklike/appdetails.jpg\" alt=\"appdetails\" /></p>
<p>2) Enter&nbsp;<strong>Status &amp; Review</strong>&nbsp;page&nbsp;and press&nbsp;<strong>Start a Submission</strong></p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/facebooklike/submission1.png\" alt=\"submission1\" /></p>
<p>3) Check a&nbsp;<strong>Native Like Button</strong>&nbsp;box and press&nbsp;<strong>Add 1 Item</strong></p>
<p style=\"text-align: center;\"><strong><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/facebooklike/submission2.png\" alt=\"submission2\" /></strong></p>
<p>4) Press&nbsp;<strong>Add Notes</strong>&nbsp;placed next to Native Like Button item and provide step-by-step instructions how Native Like Button works in your app. From my experience, provide a link of visual image works far better than just typing some texts.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/facebooklike/AddNotes.jpg\" alt=\"AddNotes\" /></p>
<p>5) <strong>Upload&nbsp;apk file</strong>, upload your app's&nbsp;<strong>Screenshots (4 minimum)</strong>, check at&nbsp;<strong>I have tested that my application loads on all of the above platforms</strong>&nbsp;box and then&nbsp;press&nbsp;<strong>Submit for Review</strong></p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/facebooklike/submission3.jpg\" alt=\"submission3\" /></p>
<p>6) Enter&nbsp;<strong>Contact Email</strong>&nbsp;in&nbsp;<strong>Settings </strong>page</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/facebooklike/submission4.jpg\" alt=\"submission4\" /></p>
<p>7) The final step is to make created Facebook app be available to public&nbsp;by set the following button to <strong>On</strong>&nbsp;in&nbsp;<strong>Status &amp; Review </strong>page</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/facebooklike/submission5.jpg\" alt=\"submission5\" /></p>
<p>Do some hiking, fishing, snoggle diving and wait for a day or two to get a result from Facebook team. By average, it takes 2-3 times to let the it approved&nbsp;so please do it at least a week before your application is publicly launched.</p>
<p>This is what it looks like in <strong>Status &amp; Review</strong> page when the submission is approved.</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/facebooklike/submissionpassed.png\" alt=\"submissionpassed\" /></p>
<p>Once you got something like above, your LikeView will work for anyone !</p>
<p>Hope you find this article useful and ... don't forget to give a like or some +1 to this article ! =)</p>" "http://inthecheesefactory.com/blog/how-to-add-facebook-like-button-in-android-app/en" (21822 1728) old 17 nil nil ((title nil "
				How to add a Native Facebook Like Button to your Android app using Facebook SDK for Android v4			") (description nil "
				<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/facebooklike/cover.jpg\" /></p> 
<p>Like button is one of the most important strategy to increase traffic to your website. No surprise why Facebook introduced a Native Like Button, <code>LikeView</code>,&nbsp;allowed developer to add Like button natively to their&nbsp;Android/iOS apps.</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/facebooklike/likes.png\" alt=\"likes\" /></p>
<p>Anyway although it sounds easy as we do on website but it is not like that. If we just place LikeView on application's layout, it works but with limited functionality for example like count and like status aren't showed, doesn't work on device without Facebook app installed, etc.</p>
<p>After digging through Facebook SDK's source code. I found that&nbsp;<span style=\"color: #d35400;\"><strong>LikeView is designed to work full functionally when application is connected to Facebook app only</strong></span>. And well ... AFAIK&nbsp;there is no any document mentioned about this.</p>
<p>After a couple of&nbsp;experiments, finally I found the sustainable way to make LikeView works full functionally and still be a good user experience practice.&nbsp;Let's go through it&nbsp;step-by-step.</p>
<h2 class=\"section-heading\">Create a&nbsp;Facebook App</h2>
<p>As mentioned above, application is needed to be connected with Facebook app to make LikeView works full functionally. So the first step is to create a Facebook app.</p>
<p>To do so, just browse to&nbsp;<a href=\"https://developers.facebook.com/apps\">https://developers.facebook.com/apps</a>&nbsp;and then press&nbsp;<strong>Add a New App</strong>&nbsp;to start creating a new Facebook app.</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/facebooklike/addnewapp.png\" alt=\"addnewapp\" /></p>
<p>Enter your preferred Facebook App and then press&nbsp;<strong>Create New Facebook App ID</strong></p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/facebooklike/newapp2.jpg\" alt=\"newapp2\" /></p>
<p>Choose a&nbsp;Category and press&nbsp;<strong>Create App ID</strong></p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/facebooklike/categoryselection.jpg\" alt=\"categoryselection\" /></p>
<p>You will now be redirected&nbsp;into Facebook App settings page. Please scroll to bottom and fill in those fields about your Android project: <strong>Package Name</strong> and <strong>Default Activity Class Name</strong>. Press <strong>Next</strong>.</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/facebooklike/classes.jpg\" alt=\"classes\" /></p>
<p>Here comes a little bit complicated part. To make your android app works flawlessly with Facebook App in debug and production mode, you have to&nbsp;fill in <strong>Debug Key Hash</strong> and <strong>Release Key Hash </strong>respectively.</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/facebooklike/keyhashesbefore.jpg\" alt=\"keyhashesbefore\" /></p>
<p>There are two ways to generate those key hashes: through command line and through Java code.</p>
<h2 class=\"subsection-heading\">Method 1&nbsp;- Through&nbsp;Command Line</h2>
<p>In case you use <strong>Mac</strong> or <strong>Linux</strong> and you already install <code>keytool</code> (comes along with JDK) and <code>openssl</code>. You could simple do the following&nbsp;through Command Line:</p>
<pre class=\"brush:ps;auto-links:false;toolbar:false\" contenteditable=\"false\">keytool -exportcert -alias androiddebugkey -keystore ~/.android/debug.keystore | openssl sha1 -binary | openssl base64</pre>
<p>Or like this on <strong>Windows</strong>:</p>
<pre class=\"brush:ps;auto-links:false;toolbar:false\" contenteditable=\"false\">keytool -exportcert -alias androiddebugkey -keystore %HOMEPATH%\\.android\\debug.keystore | openssl sha1 -binary | openssl base64</pre>
<p><span style=\"color: #d35400;\">Enter the hashed key got in both&nbsp;<strong>Development Key Hashes </strong>and<strong>&nbsp;Release Key Hash </strong>fields.</span></p>
<p>And the following command is used to generate a Key Hash for Deployment Keystore to let your app works with Facebook app in production mode.</p>
<pre class=\"brush:ps;auto-links:false;toolbar:false\" contenteditable=\"false\">keytool --exportcert -alias ENTER_ALIAS_HERE -keystore PATH_TO_KEYSTORE.keystore | openssl sha1 -binary | openssl base64</pre>
<p>Put the generated&nbsp;key in&nbsp;<strong>Release Key Hash </strong>field.</p>
<h2 class=\"subsection-heading\">Method 2&nbsp;- Through&nbsp;Java Code</h2>
<p>In case you didn't install keytool and openssl yet and you don't want to. You could generate those key hashes through Java code with the code snippet below. <span style=\"color: #c0392b;\">Please don't forget to change the package name to your app's.</span></p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">        try {
            PackageInfo info = getPackageManager().getPackageInfo(
                    \"com.inthecheesefactory.lab.facebooklike\",
                    PackageManager.GET_SIGNATURES);
            for (Signature signature : info.signatures) {
                MessageDigest md = MessageDigest.getInstance(\"SHA\");
                md.update(signature.toByteArray());
                Log.d(\"KeyHash:\", Base64.encodeToString(md.digest(), Base64.DEFAULT));
            }
        } catch (PackageManager.NameNotFoundException e) {

        } catch (NoSuchAlgorithmException e) {

        }</pre>
<p>To generate&nbsp;Development&nbsp;Key Hash, you could simply run your app directly from your IDE and copy the generated key hash sent back in logcat, put it in both&nbsp;<strong>Development Key Hashes</strong>&nbsp;and&nbsp;<strong>Release Key Hash </strong>fields<strong>.</strong></p>
<p>To generate&nbsp;Release Key Hash, you need to sign your application with keystore you plan to use in production apk. Run the signed apk in your device or emulator and put generated&nbsp;Key Hash to&nbsp;<strong>Release Key Hash&nbsp;</strong>field.</p>
<p><em><span style=\"color: #e67e22;\">Please note that Key Hash for production release could be filled in later. The important one for now is Development Key Hash which you need to put in both Development Key Hashes and&nbsp;Release Key Hash&nbsp;fields.</span></em></p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/facebooklike/keyhashes2.jpg\" alt=\"keyhashes2\" /></p>
<p>Press <strong>Next</strong>&nbsp;and scroll to the bottom of the page and then press&nbsp;<strong>Skip to Developer Dashboard</strong>&nbsp;to enter&nbsp;your just-created app's&nbsp;Dashboard.</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/facebooklike/skiptodashboard.jpg\" alt=\"skiptodashboard\" /></p>
<p>Copy <strong>App ID</strong>&nbsp;for future use.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/facebooklike/appid.jpg\" alt=\"appid\" /></p>
<p>You are now done creating a Facebook App !</p>
<h2 class=\"section-heading\">Setup&nbsp;Facebook SDK in your project</h2>
<p>Now let's switch to client part. First of all, simply add a&nbsp;dependency for Facebook SDK v4 which is now (finally) available over mavenCentral and jcenter.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">dependencies {
    compile 'com.facebook.android:facebook-android-sdk:4.0.1'
}
</pre>
<p>Add a string resource for Facebook Application ID like code below. (Change the number to your Facebook app's ID)</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;string name=\"app_id\"&gt;1459806660978042&lt;/string&gt;</pre>
<p>Place the code below into&nbsp;<code>AndroidManifest.xml</code>&nbsp;right&nbsp;before&nbsp;<code>&lt;/application&gt;</code>&nbsp;and <span style=\"color: #d35400;\"><strong>it's important to&nbsp;</strong><strong>change the number after FacebookContentProvider to your Facebook app's ID.</strong></span></p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">        &lt;!-- Facebook --&gt;
        &lt;activity android:name=\"com.facebook.FacebookActivity\"
            android:theme=\"@android:style/Theme.Translucent.NoTitleBar\"
            android:configChanges=\"keyboard|keyboardHidden|screenLayout|screenSize|orientation\"
            android:label=\"@string/app_name\" /&gt;
        &lt;meta-data android:name=\"com.facebook.sdk.ApplicationName\"
            android:value=\"@string/app_name\" /&gt;
        &lt;meta-data android:name=\"com.facebook.sdk.ApplicationId\" android:value=\"@string/app_id\"/&gt;

        &lt;provider android:authorities=\"com.facebook.app.FacebookContentProvider1459806660978042\"
            android:name=\"com.facebook.FacebookContentProvider\"
            android:exported=\"true\"/&gt;</pre>
<p>INTERNET permission is needed for&nbsp;LikeView. Don't forget to add this line inside&nbsp;<code>AndroidManifest.xml</code>&nbsp;before&nbsp;<code>&lt;application&gt;</code>.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;uses-permission android:name=\"android.permission.INTERNET\"/&gt;</pre>
<p>If you haven't done making a <strong>Custom Application</strong> class yet, do it and add line of codes below to initialize Facebook SDK in v4 way.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">public class MainApplication extends Application {

    @Override
    public void onCreate() {
        super.onCreate();

        FacebookSdk.sdkInitialize(getApplicationContext());
   }
}</pre>
<p>Give a check that Custom Application is already defined in&nbsp;<code>AndroidManifest.xml</code>.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">    &lt;application
        android:allowBackup=\"true\"
        android:icon=\"@mipmap/ic_launcher\"
        android:label=\"@string/app_name\"
        android:theme=\"@style/AppTheme\"
        android:name=\".MainApplication\" &gt;</pre>
<p>And you are now done setting up Facebook SDK in your Android app =D</p>
<h2 class=\"section-heading\">Play with&nbsp;LikeView</h2>
<p>Your app is now ready. Let's play a little bit with&nbsp;LikeView&nbsp;by simply placing it on layout.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;com.facebook.share.widget.LikeView
        android:id=\"@+id/likeView\"
        android:layout_width=\"wrap_content\"
        android:layout_height=\"wrap_content\"/&gt;</pre>
<p>And do the following in Java code to set up its appearance.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">LikeView likeView = (LikeView) findViewById(R.id.likeView);
likeView.setLikeViewStyle(LikeView.Style.STANDARD);      
likeView.setAuxiliaryViewPosition(LikeView.AuxiliaryViewPosition.INLINE);</pre>
<p>Set LikeView's url through <code>setObjectIdAndType</code> method.</p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">likeView.setObjectIdAndType(
        \"http://inthecheesefactory.com/blog/understand-android-activity-launchmode/en\",
        LikeView.ObjectType.OPEN_GRAPH)</pre>
<p>Here is the result. It works !</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/facebooklike/exp0.jpg\" alt=\"exp0\" /></p>
<p>Anyway it appears that it doesn't work perfectly just yet. Here are&nbsp;the two big concerns.</p>
<p><span style=\"color: #c0392b;\"><strong>Problem&nbsp;1: Like count and status aren't showed until you press Like button.</strong></span></p>
<p><span style=\"color: #e74c3c;\"><strong>Problem&nbsp;2: Doesn't work in device that Facebook App is not installed.</strong></span></p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/facebooklike/exp1.jpg\" alt=\"exp1\" /></p>
<p>The reason is already described above. LikeView works full functionally only in app that has already connected with Facebook App. Totally different with one in website which works perfectly without login required. (And yes, it is by designed. And also yes, I am curious why Facebook has designed&nbsp;it this way ...)</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/facebooklike/onweb.png\" alt=\"onweb\" /></p>
<p>Some workaround is needed. Facebook Login is required to make LikeView showed otherwise Login button with the same appearance as LikeView will come up instead.</p>
<p>There is nothing complicated. I just simply create a Login button using LinearLayout and let it be together with LikeView in RelativeLayout.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">...
&lt;RelativeLayout
    android:layout_width=\"wrap_content\"
    android:layout_height=\"wrap_content\"&gt;

    &lt;!-- Login Button in the same style as LikeView --&gt;
    &lt;LinearLayout
        android:id=\"@+id/btnLoginToLike\"
        android:background=\"@drawable/com_facebook_button_like_background\"
        android:layout_width=\"wrap_content\"
        android:layout_height=\"wrap_content\"
        android:orientation=\"horizontal\"
        android:clickable=\"true\" &gt;

        &lt;ImageView
            android:src=\"@drawable/com_facebook_button_icon\"
            android:layout_width=\"wrap_content\"
            android:layout_height=\"wrap_content\"
            android:layout_marginLeft=\"8dp\"
            android:layout_marginRight=\"8dp\"
            android:layout_marginTop=\"7.5dp\"
            android:layout_marginBottom=\"7.5dp\"/&gt;

        &lt;TextView
            android:id=\"@+id/tvLogin\"
            android:text=\"Login\"
            android:layout_marginLeft=\"2dp\"
            android:layout_marginRight=\"8dp\"
            android:textColor=\"@android:color/white\"
            android:textStyle=\"bold\"
            android:layout_gravity=\"center_vertical\"
            android:layout_width=\"wrap_content\"
            android:layout_height=\"wrap_content\"/&gt;

    &lt;/LinearLayout&gt;

    &lt;com.facebook.share.widget.LikeView
        android:id=\"@+id/likeView\"
        android:layout_width=\"wrap_content\"
        android:layout_height=\"wrap_content\"/&gt;

&lt;/RelativeLayout&gt;
...</pre>
<p>And then do the logic in Java code&nbsp;with some help&nbsp;of&nbsp;<code>LoginManager</code>, <code>CallbackManager</code>&nbsp;and&nbsp;<code>AccessToken</code>&nbsp;provided in Facebook SDK for Android v4 to manage a Login flow and status checking.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">public class MainActivity extends Activity {
    
    LinearLayout btnLoginToLike;
    LikeView likeView;
    CallbackManager callbackManager;

    
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        initInstances();
        initCallbackManager();
        refreshButtonsState();
    }

    private void initInstances() {
        btnLoginToLike = (LinearLayout) findViewById(R.id.btnLoginToLike);
        likeView = (LikeView) findViewById(R.id.likeView);
        likeView.setLikeViewStyle(LikeView.Style.STANDARD);
        likeView.setAuxiliaryViewPosition(LikeView.AuxiliaryViewPosition.INLINE);

        btnLoginToLike.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View v) {
                LoginManager.getInstance().logInWithReadPermissions(MainActivity.this, Arrays.asList(\"public_profile\"));
            }
        });
    }

    private void initCallbackManager() {
        callbackManager = CallbackManager.Factory.create();
        LoginManager.getInstance().registerCallback(callbackManager, new FacebookCallback&lt;LoginResult&gt;() {
            @Override
            public void onSuccess(LoginResult loginResult) {
                refreshButtonsState();
            }

            @Override
            public void onCancel() {

            }

            @Override
            public void onError(FacebookException e) {

            }
        });
    }

    private void refreshButtonsState() {
        if (!isLoggedIn()) {
            btnLoginToLike.setVisibility(View.VISIBLE);
            likeView.setVisibility(View.GONE);
        } else {
            btnLoginToLike.setVisibility(View.GONE);
            likeView.setVisibility(View.VISIBLE);
        }
    }

    public boolean isLoggedIn() {
        return AccessToken.getCurrentAccessToken() != null;
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        // Handle Facebook Login Result
        callbackManager.onActivityResult(requestCode, resultCode, data);
    }
}
</pre>
<p>It's done. Let's see the result =)</p>
<h2 class=\"section-heading\">Result</h2>
<p>If the application isn't connected to Facebook app yet. Our custom Login Button would be showed instead of LikeView as designed.</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/facebooklike/btnLogin2.png\" alt=\"btnLogin2\" /></p>
<p>Once Login Button is clicked, it will redirect user to Login process.</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/facebooklike/loginprocess.png\" alt=\"loginprocess\" /></p>
<p>After user is logged in, Login Button will be hidden and replaced with LikeView. You will see that Like count and Like status are also showed up perfectly just like one on website. Yah ! If a url is changed, those number and status are also automatically changed to match the information associated to an entered url.</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/facebooklike/loggedin.png\" alt=\"loggedin\" /></p>
<p>If user press Like, it will affect the button embedded on website as well.</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/facebooklike/liked.png\" alt=\"liked\" /></p>
<p><span style=\"color: #16a085;\"><strong>A by-product of this method is LikeView button also works on the device without Facebook application installed. It means that it works even on Chrome or on ARC Welder !</strong></span></p>
<p style=\"text-align: center;\"><span style=\"color: #16a085;\"><strong><img src=\"http://inthecheesefactory.com/uploads/source/facebooklike/arcwelder.jpg\" alt=\"arcwelder\" /></strong></span></p>
<h2 class=\"section-heading\">Known bug</h2>
<p>Although it is close enough to&nbsp;perfect but there is still some known bug. If like is done on website, like status on application will not be updated. And we couldn't do anything but wait for Facebook engineer to fix this issue.</p>
<h2 class=\"section-heading\">FBLikeAndroid Library</h2>
<p>To make it as easy as possible to use. I made a library to do a&nbsp;job for you. <span style=\"color: #2980b9;\"><strong>FBLikeAndroid</strong> is a library comes up with Login Button that will change to Native Like Button automatically when application is connected to Facebook app.</span></p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/facebooklike/fblikeandroid.png\" alt=\"fblikeandroid\" /></p>
<p>To use it, you have to create a Facebook app and setup your project as written&nbsp;above. And then simply add the following dependency to your app's&nbsp;<code>build.gradle</code>. <span style=\"color: #16a085;\">Please note that Facebook SDK v4 is already included in this dependency so you have no need to add any additional dependency.</span></p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">dependencies {
    compile 'com.inthecheesefactory.thecheeselibrary:fb-like:0.9.3'
}</pre>
<p>Place&nbsp;<code>com.inthecheesefactory.lib.fblike.widget.FBLikeView</code>&nbsp;anywhere to start using the component.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;com.inthecheesefactory.lib.fblike.widget.FBLikeView
        android:id=\"@+id/fbLikeView\"
        android:layout_width=\"wrap_content\"
        android:layout_height=\"wrap_content\"/&gt;</pre>
<p>LikeView inside FBLikeView is already set the appearance to STANDARD so you have no need to set it again unless you need to change its&nbsp;style. To access LikeView attached inside, you could do it through a getter function,&nbsp;<code>getLikeView()</code>. The following code is used to set a url for LikeView.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">FBLikeView fbLikeView = (FBLikeView) rootView.findViewById(R.id.fbLikeView);
fbLikeView.getLikeView().setObjectIdAndType(
        \"http://inthecheesefactory.com/blog/understand-android-activity-launchmode/en\",
        LikeView.ObjectType.OPEN_GRAPH);</pre>
<p>The final&nbsp;step, you have to call&nbsp;<code>FBLikeView.onActivityResult</code>&nbsp;in every single Activity's <code>onActivityResult</code> to connect FBLikeView buttons to Facebook Login flow.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        FBLikeView.onActivityResult(requestCode, resultCode, data);
    }</pre>
<p>That's all ! Easy, huh? =D</p>
<p>If you want to disconnect your android app to Facebook app, simply call the following command. The button will be automatically changed to Login state.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">FBLikeView.logout();</pre>
<p>Source Code of FBLikeAndroid&nbsp;Library is available&nbsp;at&nbsp;<a href=\"https://github.com/nuuneoi/FBLikeAndroid\">https://github.com/nuuneoi/FBLikeAndroid</a>. Please feel free to take a look or contribute anytime =)</p>
<h2 class=\"section-heading\">Submit for public use</h2>
<p>Right now LikeView works only with Facebook app's administrator, you.&nbsp;To make LikeView works for everyone, you need to send a submission to Facebook team.&nbsp;Here is the steps to do so:</p>
<p>1) Enter your Facebook App's&nbsp;<strong>App Details</strong>&nbsp;page.&nbsp;Enter&nbsp;<strong>Long Description</strong>, <strong>Privacy Policy URL</strong>&nbsp;and also upload&nbsp;<strong>App Icon</strong>&nbsp;you desired.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/facebooklike/appdetails.jpg\" alt=\"appdetails\" /></p>
<p>2) Enter&nbsp;<strong>Status &amp; Review</strong>&nbsp;page&nbsp;and press&nbsp;<strong>Start a Submission</strong></p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/facebooklike/submission1.png\" alt=\"submission1\" /></p>
<p>3) Check a&nbsp;<strong>Native Like Button</strong>&nbsp;box and press&nbsp;<strong>Add 1 Item</strong></p>
<p style=\"text-align: center;\"><strong><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/facebooklike/submission2.png\" alt=\"submission2\" /></strong></p>
<p>4) Press&nbsp;<strong>Add Notes</strong>&nbsp;placed next to Native Like Button item and provide step-by-step instructions how Native Like Button works in your app. From my experience, provide a link of visual image works far better than just typing some texts.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/facebooklike/AddNotes.jpg\" alt=\"AddNotes\" /></p>
<p>5) <strong>Upload&nbsp;apk file</strong>, upload your app's&nbsp;<strong>Screenshots (4 minimum)</strong>, check at&nbsp;<strong>I have tested that my application loads on all of the above platforms</strong>&nbsp;box and then&nbsp;press&nbsp;<strong>Submit for Review</strong></p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/facebooklike/submission3.jpg\" alt=\"submission3\" /></p>
<p>6) Enter&nbsp;<strong>Contact Email</strong>&nbsp;in&nbsp;<strong>Settings </strong>page</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/facebooklike/submission4.jpg\" alt=\"submission4\" /></p>
<p>7) The final step is to make created Facebook app be available to public&nbsp;by set the following button to <strong>On</strong>&nbsp;in&nbsp;<strong>Status &amp; Review </strong>page</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/facebooklike/submission5.jpg\" alt=\"submission5\" /></p>
<p>Do some hiking, fishing, snoggle diving and wait for a day or two to get a result from Facebook team. By average, it takes 2-3 times to let the it approved&nbsp;so please do it at least a week before your application is publicly launched.</p>
<p>This is what it looks like in <strong>Status &amp; Review</strong> page when the submission is approved.</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/facebooklike/submissionpassed.png\" alt=\"submissionpassed\" /></p>
<p>Once you got something like above, your LikeView will work for anyone !</p>
<p>Hope you find this article useful and ... don't forget to give a like or some +1 to this article ! =)</p>			") (link nil "http://inthecheesefactory.com/blog/how-to-add-facebook-like-button-in-android-app/en") (pubDate nil "
				Mon, 27 Apr 2015 09:52:00 +0000			") (guid nil "http://inthecheesefactory.com/blog/how-to-add-facebook-like-button-in-android-app/en"))) ("Understand Android Activity's launchMode: standard, singleTop, singleTask and singleInstance" "<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/standardgalleryl.jpg\" /></p>
<p>Activity is one of the most brilliant concept on Android from its well-design architecture on memory management which lets Multitasking works&nbsp;perfectly on this most popular mobile operating system.</p>
<p>Anyway, Activity is not just to be launched on the screen. The way it is launched is also concerned. There are so many details in this topic. One of those that is really important&nbsp;is <strong>launchMode</strong>, which is the one that we are going to talk about in this blog.</p>
<p>Since each Activity is made to work in&nbsp;different purpose. Some is designed to work separately with each Intent sent for example an&nbsp;Activity for email composing in email client.&nbsp;While some is designed to work as a singleton for example an&nbsp;email's inbox Activity.</p>
<p>That's why it does matter&nbsp;to specify whether&nbsp;Activity is needed to be created a new one or to use the existed one, or it may leads to the bad UX or malfunctional. Thanks to Android's core engineer. It is the way easy to make it done with some help of&nbsp;<strong>launchMode</strong>&nbsp;which is designed for this especially.</p>
<h2 class=\"section-heading\">Assign a&nbsp;launchMode</h2>
<p>Basically we could assign a launchMode directly as an attribute of&nbsp;<code>&lt;activity&gt;</code>&nbsp;tag&nbsp;inside&nbsp;<code>AndroidManifest.xml</code>&nbsp;file list this:</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;activity
android:name=\".SingleTaskActivity\"
android:label=\"singleTask launchMode\"
android:launchMode=\"singleTask\"&gt;</pre>
<p>There are 4 types of launchMode available. Let's see it one by one.</p>
<h2 class=\"section-heading\">standard</h2>
<p>This is the&nbsp;default mode.</p>
<p>The behavior of Activity set to this mode is a new Activity will always be created to work separately with each Intent sent. Imagine, if there are 10 Intents sent to compose an email, there should be 10 Activities launch to serve each&nbsp;Intent separately. As a result, there could be an unlimited number of this kind of Activity launched in a&nbsp;device.</p>
<p><span style=\"color: #d35400;\"><strong>Behavior on Android&nbsp;pre-Lollipop</strong></span></p>
<p>This kind of Activity would be created and placed on top of stack in the same task as one that&nbsp;sent an Intent.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/standardtopstandard.jpg\" alt=\"standardtopstandard\" /></p>
<p>An image below shows what will happen when we share an image to a standard Activity. It will be stacked in the same task as described although they are from the different application.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/standardgallery2.jpg\" alt=\"standardgallery2\" /></p>
<p>And this is what you will see in the Task Manager. (A little bit weird may be)</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/gallerystandard.jpg\" alt=\"gallerystandard\" /></p>
<p>If we switch the application to the another one and then switch back to Gallery, we will&nbsp;still see that standard launchMode place on top of Gallery's task. As a result, if we need to do anything with Gallery, we have to finish our job in that additional Activity first.</p>
<p><span style=\"color: #16a085;\"><strong>Behavior&nbsp;on Android Lollipop</strong></span></p>
<p>If those Activities are from the same application, it will work just like on pre-Lollipop, stacked on top of the task.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/standardstandardl.jpg\" alt=\"standardstandardl\" /></p>
<p>But in case that an Intent is sent from a different application. New task will be created and the newly created Activity will be placed as a root Activity like below.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/standardgalleryl.jpg\" alt=\"standardgalleryl\" /></p>
<p>And this is what you will see in Task Manager.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/gallerystandardl1.jpg\" alt=\"gallerystandardl1\" /></p>
<p>This happens because Task Management system is modified in Lollipop to make it better and more make sense. In Lollipop, you can just switch back to Gallery since they are in the different Task. You can fire another Intent, a new&nbsp;Task will be created to serve an Intent as same as the previous one.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/gallerystandardl2.jpg\" alt=\"gallerystandardl2\" /></p>
<p>An example of this kind of Activity is a <strong>Compose Email Activity</strong> or a <strong>Social Network's Status Posting Activity</strong>. If you think about an Activity that can work separately to serve&nbsp;an separate Intent, think about <strong>standard</strong> one.</p>
<h2 class=\"section-heading\">singleTop</h2>
<p>The next mode is <strong>singleTop</strong>. It acts almost the same as <strong>standard</strong> one which means that singleTop Activity instance could be created as many as we want. Only difference is if there already is an Activity instance with the same type at the top of stack in the caller Task, there would not be any new Activity created, instead an Intent will be sent to an existed Activity instance through <code>onNewIntent()</code> method.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/singletop.jpg\" alt=\"singletop\" /></p>
<p>In singleTop mode, you have to handle an incoming Intent in both <code>onCreate()</code> and <code>onNewIntent()</code> to make it works for all the cases.</p>
<p>A sample use case of this mode is a Search function. Let's think about creating a search box which will lead you to a SearchActivity to see the search result. For better UX,&nbsp;normally we always put a&nbsp;search box in the search result page as well to enable user&nbsp;to do another search without pressing back.</p>
<p>Now imagine, if we always launch a new SearchActivity to serve new search result, 10 new Activities for 10 searching. It would be&nbsp;extremely weird when you press back since you have to press back for 10 times to pass through those search result Activities to get back to your root Activity.</p>
<p>Instead, if there is SearchActivity on top of stack, we better send an Intent to an existed Activity instance and let it update the search result. Now there will be&nbsp;only one SearchActivity placed on top of stack and you can simply press just back button for a single time to get back to previous Activity.&nbsp;Makes a lot more sense now.</p>
<p>Anyway singleTop works with the same task as caller only. If you expect an Intent to be sent to an existed Activity placed on top of any other Task, I have to&nbsp;disappoint you by&nbsp;saying that it doesn't work that way. In case Intent is sent from another application to an singleTop Activity, a new Activity would be launched in&nbsp;the same aspect as standard launchMode&nbsp;<em>(pre-Lollipop: placed on top of the caller Task, Lollipop: a&nbsp;new Task would be created)</em>.</p>
<h2 class=\"section-heading\">singleTask</h2>
<p>This mode is quite different from standard and singleTop. <span style=\"color: #c0392b;\"><strong>An Activity with singleTask launchMode is allowed to&nbsp;have only one instance in the system (a.k.a. Singleton).</strong></span>&nbsp;If there is an existed Activity instance in the system, the whole Task hold the instance would be moved to top while Intent would be delivered through <code>onNewIntent()</code> method.&nbsp;Otherwise, new Activity&nbsp;would be created and placed in the proper Task.</p>
<p><span style=\"color: #2980b9;\"><strong>Working in the same application</strong></span></p>
<p>If there is no that singleTask Activity instance existed in the system yet, new one would be created and&nbsp;simply placed on top of stack in the same Task.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/singleTask1.jpg\" alt=\"singleTask1\" /></p>
<p><em><span style=\"color: #d35400;\">But if there is an existed one, all of Activities placed above&nbsp;that singleTask Activity would be automatically and cruelly destroyed in the proper way (lifecycle trigged) to make that an Activity we want to appear on top of stack. </span></em>In the mean time, an Intent would be&nbsp;sent to the singleTask Activity through the lovely&nbsp;<code>onNewIntent()</code>&nbsp;method.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/singleTaskD.jpg\" alt=\"singleTaskD\" /></p>
<p>Doesn't make a good sense in term of user experience but it&nbsp;is designed this way ...</p>
<p>You may notice one thing that it is mentioned in <a href=\"http://developer.android.com/guide/components/tasks-and-back-stack.html\" target=\"_blank\">document</a> that</p>
<blockquote>The system creates a new task and instantiates the activity at the root of the new task.</blockquote>
<p><span style=\"color: #c0392b;\">But from the experiment, it&nbsp;doesn't seem to work as described.</span> A singleTask Activity still stack up on top of the Task's Activity stack as we can see from what <code>dumpsys activity</code> command shows up.</p>
<pre class=\"brush:plain;auto-links:false;toolbar:false\" contenteditable=\"false\">Task id #239
TaskRecord{428efe30 #239 A=com.thecheesefactory.lab.launchmode U=0 sz=2}
Intent { act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10000000 cmp=com.thecheesefactory.lab.launchmode/.StandardActivity }
Hist #1: ActivityRecord{429a88d0 u0 com.thecheesefactory.lab.launchmode/.SingleTaskActivity t239}
Intent { cmp=com.thecheesefactory.lab.launchmode/.SingleTaskActivity }
ProcessRecord{42243130 18965:com.thecheesefactory.lab.launchmode/u0a123}
Hist #0: ActivityRecord{425fec98 u0 com.thecheesefactory.lab.launchmode/.StandardActivity t239}
Intent { act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10000000 cmp=com.thecheesefactory.lab.launchmode/.StandardActivity }
ProcessRecord{42243130 18965:com.thecheesefactory.lab.launchmode/u0a123}</pre>
<p>If you wish to to let a singleTask Activity acts like described in document:&nbsp;create a new Task and put an Activity as a root Activity. You need to assign&nbsp;<code>taskAffinity</code>&nbsp;attribute to the singleTask Activity like this.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;activity
android:name=\".SingleTaskActivity\"
android:label=\"singleTask launchMode\"
android:launchMode=\"singleTask\"
android:taskAffinity=\"\"&gt;</pre>
<p>This is a result when we try to launch <code>SingleTaskActivity</code>.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/singleTaskTaskAffinity.jpg\" alt=\"singleTaskTaskAffinity\" /></p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/screenshot17.jpg\" alt=\"screenshot17\" /></p>
<p>It's your job to consider whether&nbsp;to use <code>taskAffinity</code> or not by the behavior of the Activity.</p>
<p><span style=\"color: #c0392b;\"><strong>Collaborate with another application</strong></span></p>
<p>Once an Intent is sent from another application and there is no any Activity instance created in the system yet, <span style=\"text-decoration: underline;\">new Task would be created</span> with a newly created Activity placed as a root Activity.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/singleTaskAnotherApp1.jpg\" alt=\"singleTaskAnotherApp1\" /></p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/singletaskfromapp2.jpg\" alt=\"singletaskfromapp2\" /></p>
<p>Unless&nbsp;there is a Task of the&nbsp;application that is an owner of the calling&nbsp;singleTask Activity&nbsp;existed, a newly created Activity would be placed on top of it instead.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/singleTaskAnotherApp2.jpg\" alt=\"singleTaskAnotherApp2\" /></p>
<p><em><span style=\"color: #c0392b;\">In case that there is an Activity instance existed&nbsp;in any Task, the whole Task would be moved to top and every single Activity placed above the singleTask Activity will be destroyed with&nbsp;lifecycle.&nbsp;</span></em>If back button is pressed, user has to travel through the Activities in the stack before going back to the caller&nbsp;Task.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/singleTaskAnotherApp3.jpg\" alt=\"singleTaskAnotherApp3\" /></p>
<p>A sample use case of this mode is any Entry Point Activity for example Email Client's Inbox page or Social Network's Timeline. Those Activities are not designed to have more than one instance so singleTask would do a job perfectly. Anyway you have to use this mode wisely since Activities could be destroyed without user's acknowledgement in this mode like described above.</p>
<h2 class=\"section-heading\">singleInstance</h2>
<p>This mode is quite close to singleTask, only single instance of Activity could be existed in the system. <span style=\"color: #d35400;\"><strong>The difference is Task hold this Activity could have only one Activity, the singleInstance one.</strong></span> If&nbsp;another Activity is called from this kind of Activity, a new Task would be automatically created to place that new Activity. Likewise, if singleInstance Activity is called, new Task would be created to place the Activity.</p>
<p>Anyway the result is quite weird. From the information provided by <code>dumpsys</code>, it appears that there are two Tasks in the system but there is only one appeared in Task Manager depends on which is latest one that is moved to top. As a result, although there is a Task that is still working in the background but we couldn't switch it back to foreground. Doesn't make any sense at all.</p>
<p>This is what that happened when singleInstance Activity is called while there already&nbsp;is some&nbsp;Activity&nbsp;existed in the stack.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/singleInstance.jpg\" alt=\"singleInstance\" /></p>
<p>But this is what we see from Task Manager.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/singleInstances.jpg\" alt=\"singleInstances\" /></p>
<p>Since this Task could has only one Activity, we couldn't switch back to Task #1 anymore. Only&nbsp;way to do so is to relaunch the application from launcher but it appears that the singleInstance Task would be hidden in the background instead.</p>
<p>Anyway there is some workaround for the issue. Just like we did with singleTask Acvity, simply assign a <code>taskAffinity</code> attribute to the singleInstance Activity to enable multiple Tasks on Task Manager.</p>
<pre class=\"brush:plain;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;activity
android:name=\".SingleInstanceActivity\"
android:label=\"singleInstance launchMode\"
android:launchMode=\"singleInstance\"
android:taskAffinity=\"\"&gt;</pre>
<p>It makes more sense now.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/screenshot18.jpg\" alt=\"screenshot18\" /></p>
<p>This mode is rarely used. Some of the real use case is an Activity for Launcher or the application that you are 100% sure there is only one Activity. Anyway I suggest you not to use this mode unless it is really necessary.</p>
<h2 class=\"section-heading\">Intent Flags</h2>
<p>Beside from assigning the launch mode directly in <code>AndroidManifest.xml</code>, we&nbsp;are also able to assign more behavior through thing called&nbsp;<strong>Intent Flags</strong>,&nbsp;for example:</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">Intent intent = new Intent(StandardActivity.this, StandardActivity.class);
intent.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);
startActivity(intent);
</pre>
<p>would launch a&nbsp;<code>StandardActivity</code>&nbsp;with&nbsp;singleTop launchMode condition.</p>
<p>There are quite a lot of Flags you can play with. You could find more about it at <a href=\"http://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_BROUGHT_TO_FRONT\" target=\"_blank\">Intent</a>.</p>
<p>Hope you find this article useful =)</p>" "http://inthecheesefactory.com/blog/understand-android-activity-launchmode/en" (21806 14044) old 18 nil nil ((title nil "
				Understand Android Activity's launchMode: standard, singleTop, singleTask and singleInstance			") (description nil "
				<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/standardgalleryl.jpg\" /></p> 
<p>Activity is one of the most brilliant concept on Android from its well-design architecture on memory management which lets Multitasking works&nbsp;perfectly on this most popular mobile operating system.</p>
<p>Anyway, Activity is not just to be launched on the screen. The way it is launched is also concerned. There are so many details in this topic. One of those that is really important&nbsp;is <strong>launchMode</strong>, which is the one that we are going to talk about in this blog.</p>
<p>Since each Activity is made to work in&nbsp;different purpose. Some is designed to work separately with each Intent sent for example an&nbsp;Activity for email composing in email client.&nbsp;While some is designed to work as a singleton for example an&nbsp;email's inbox Activity.</p>
<p>That's why it does matter&nbsp;to specify whether&nbsp;Activity is needed to be created a new one or to use the existed one, or it may leads to the bad UX or malfunctional. Thanks to Android's core engineer. It is the way easy to make it done with some help of&nbsp;<strong>launchMode</strong>&nbsp;which is designed for this especially.</p>
<h2 class=\"section-heading\">Assign a&nbsp;launchMode</h2>
<p>Basically we could assign a launchMode directly as an attribute of&nbsp;<code>&lt;activity&gt;</code>&nbsp;tag&nbsp;inside&nbsp;<code>AndroidManifest.xml</code>&nbsp;file list this:</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;activity
            android:name=\".SingleTaskActivity\"
            android:label=\"singleTask launchMode\"
            android:launchMode=\"singleTask\"&gt;</pre>
<p>There are 4 types of launchMode available. Let's see it one by one.</p>
<h2 class=\"section-heading\">standard</h2>
<p>This is the&nbsp;default mode.</p>
<p>The behavior of Activity set to this mode is a new Activity will always be created to work separately with each Intent sent. Imagine, if there are 10 Intents sent to compose an email, there should be 10 Activities launch to serve each&nbsp;Intent separately. As a result, there could be an unlimited number of this kind of Activity launched in a&nbsp;device.</p>
<p><span style=\"color: #d35400;\"><strong>Behavior on Android&nbsp;pre-Lollipop</strong></span></p>
<p>This kind of Activity would be created and placed on top of stack in the same task as one that&nbsp;sent an Intent.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/standardtopstandard.jpg\" alt=\"standardtopstandard\" /></p>
<p>An image below shows what will happen when we share an image to a standard Activity. It will be stacked in the same task as described although they are from the different application.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/standardgallery2.jpg\" alt=\"standardgallery2\" /></p>
<p>And this is what you will see in the Task Manager. (A little bit weird may be)</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/gallerystandard.jpg\" alt=\"gallerystandard\" /></p>
<p>If we switch the application to the another one and then switch back to Gallery, we will&nbsp;still see that standard launchMode place on top of Gallery's task. As a result, if we need to do anything with Gallery, we have to finish our job in that additional Activity first.</p>
<p><span style=\"color: #16a085;\"><strong>Behavior&nbsp;on Android Lollipop</strong></span></p>
<p>If those Activities are from the same application, it will work just like on pre-Lollipop, stacked on top of the task.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/standardstandardl.jpg\" alt=\"standardstandardl\" /></p>
<p>But in case that an Intent is sent from a different application. New task will be created and the newly created Activity will be placed as a root Activity like below.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/standardgalleryl.jpg\" alt=\"standardgalleryl\" /></p>
<p>And this is what you will see in Task Manager.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/gallerystandardl1.jpg\" alt=\"gallerystandardl1\" /></p>
<p>This happens because Task Management system is modified in Lollipop to make it better and more make sense. In Lollipop, you can just switch back to Gallery since they are in the different Task. You can fire another Intent, a new&nbsp;Task will be created to serve an Intent as same as the previous one.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/gallerystandardl2.jpg\" alt=\"gallerystandardl2\" /></p>
<p>An example of this kind of Activity is a <strong>Compose Email Activity</strong> or a <strong>Social Network's Status Posting Activity</strong>. If you think about an Activity that can work separately to serve&nbsp;an separate Intent, think about <strong>standard</strong> one.</p>
<h2 class=\"section-heading\">singleTop</h2>
<p>The next mode is <strong>singleTop</strong>. It acts almost the same as <strong>standard</strong> one which means that singleTop Activity instance could be created as many as we want. Only difference is if there already is an Activity instance with the same type at the top of stack in the caller Task, there would not be any new Activity created, instead an Intent will be sent to an existed Activity instance through <code>onNewIntent()</code> method.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/singletop.jpg\" alt=\"singletop\" /></p>
<p>In singleTop mode, you have to handle an incoming Intent in both <code>onCreate()</code> and <code>onNewIntent()</code> to make it works for all the cases.</p>
<p>A sample use case of this mode is a Search function. Let's think about creating a search box which will lead you to a SearchActivity to see the search result. For better UX,&nbsp;normally we always put a&nbsp;search box in the search result page as well to enable user&nbsp;to do another search without pressing back.</p>
<p>Now imagine, if we always launch a new SearchActivity to serve new search result, 10 new Activities for 10 searching. It would be&nbsp;extremely weird when you press back since you have to press back for 10 times to pass through those search result Activities to get back to your root Activity.</p>
<p>Instead, if there is SearchActivity on top of stack, we better send an Intent to an existed Activity instance and let it update the search result. Now there will be&nbsp;only one SearchActivity placed on top of stack and you can simply press just back button for a single time to get back to previous Activity.&nbsp;Makes a lot more sense now.</p>
<p>Anyway singleTop works with the same task as caller only. If you expect an Intent to be sent to an existed Activity placed on top of any other Task, I have to&nbsp;disappoint you by&nbsp;saying that it doesn't work that way. In case Intent is sent from another application to an singleTop Activity, a new Activity would be launched in&nbsp;the same aspect as standard launchMode&nbsp;<em>(pre-Lollipop: placed on top of the caller Task, Lollipop: a&nbsp;new Task would be created)</em>.</p>
<h2 class=\"section-heading\">singleTask</h2>
<p>This mode is quite different from standard and singleTop. <span style=\"color: #c0392b;\"><strong>An Activity with singleTask launchMode is allowed to&nbsp;have only one instance in the system (a.k.a. Singleton).</strong></span>&nbsp;If there is an existed Activity instance in the system, the whole Task hold the instance would be moved to top while Intent would be delivered through <code>onNewIntent()</code> method.&nbsp;Otherwise, new Activity&nbsp;would be created and placed in the proper Task.</p>
<p><span style=\"color: #2980b9;\"><strong>Working in the same application</strong></span></p>
<p>If there is no that singleTask Activity instance existed in the system yet, new one would be created and&nbsp;simply placed on top of stack in the same Task.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/singleTask1.jpg\" alt=\"singleTask1\" /></p>
<p><em><span style=\"color: #d35400;\">But if there is an existed one, all of Activities placed above&nbsp;that singleTask Activity would be automatically and cruelly destroyed in the proper way (lifecycle trigged) to make that an Activity we want to appear on top of stack. </span></em>In the mean time, an Intent would be&nbsp;sent to the singleTask Activity through the lovely&nbsp;<code>onNewIntent()</code>&nbsp;method.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/singleTaskD.jpg\" alt=\"singleTaskD\" /></p>
<p>Doesn't make a good sense in term of user experience but it&nbsp;is designed this way ...</p>
<p>You may notice one thing that it is mentioned in <a href=\"http://developer.android.com/guide/components/tasks-and-back-stack.html\" target=\"_blank\">document</a> that</p>
<blockquote>The system creates a new task and instantiates the activity at the root of the new task.</blockquote>
<p><span style=\"color: #c0392b;\">But from the experiment, it&nbsp;doesn't seem to work as described.</span> A singleTask Activity still stack up on top of the Task's Activity stack as we can see from what <code>dumpsys activity</code> command shows up.</p>
<pre class=\"brush:plain;auto-links:false;toolbar:false\" contenteditable=\"false\">Task id #239
  TaskRecord{428efe30 #239 A=com.thecheesefactory.lab.launchmode U=0 sz=2}
  Intent { act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10000000 cmp=com.thecheesefactory.lab.launchmode/.StandardActivity }
    Hist #1: ActivityRecord{429a88d0 u0 com.thecheesefactory.lab.launchmode/.SingleTaskActivity t239}
      Intent { cmp=com.thecheesefactory.lab.launchmode/.SingleTaskActivity }
      ProcessRecord{42243130 18965:com.thecheesefactory.lab.launchmode/u0a123}
    Hist #0: ActivityRecord{425fec98 u0 com.thecheesefactory.lab.launchmode/.StandardActivity t239}
      Intent { act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] flg=0x10000000 cmp=com.thecheesefactory.lab.launchmode/.StandardActivity }
      ProcessRecord{42243130 18965:com.thecheesefactory.lab.launchmode/u0a123}</pre>
<p>If you wish to to let a singleTask Activity acts like described in document:&nbsp;create a new Task and put an Activity as a root Activity. You need to assign&nbsp;<code>taskAffinity</code>&nbsp;attribute to the singleTask Activity like this.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;activity
            android:name=\".SingleTaskActivity\"
            android:label=\"singleTask launchMode\"
            android:launchMode=\"singleTask\"
            android:taskAffinity=\"\"&gt;</pre>
<p>This is a result when we try to launch <code>SingleTaskActivity</code>.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/singleTaskTaskAffinity.jpg\" alt=\"singleTaskTaskAffinity\" /></p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/screenshot17.jpg\" alt=\"screenshot17\" /></p>
<p>It's your job to consider whether&nbsp;to use <code>taskAffinity</code> or not by the behavior of the Activity.</p>
<p><span style=\"color: #c0392b;\"><strong>Collaborate with another application</strong></span></p>
<p>Once an Intent is sent from another application and there is no any Activity instance created in the system yet, <span style=\"text-decoration: underline;\">new Task would be created</span> with a newly created Activity placed as a root Activity.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/singleTaskAnotherApp1.jpg\" alt=\"singleTaskAnotherApp1\" /></p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/singletaskfromapp2.jpg\" alt=\"singletaskfromapp2\" /></p>
<p>Unless&nbsp;there is a Task of the&nbsp;application that is an owner of the calling&nbsp;singleTask Activity&nbsp;existed, a newly created Activity would be placed on top of it instead.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/singleTaskAnotherApp2.jpg\" alt=\"singleTaskAnotherApp2\" /></p>
<p><em><span style=\"color: #c0392b;\">In case that there is an Activity instance existed&nbsp;in any Task, the whole Task would be moved to top and every single Activity placed above the singleTask Activity will be destroyed with&nbsp;lifecycle.&nbsp;</span></em>If back button is pressed, user has to travel through the Activities in the stack before going back to the caller&nbsp;Task.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/singleTaskAnotherApp3.jpg\" alt=\"singleTaskAnotherApp3\" /></p>
<p>A sample use case of this mode is any Entry Point Activity for example Email Client's Inbox page or Social Network's Timeline. Those Activities are not designed to have more than one instance so singleTask would do a job perfectly. Anyway you have to use this mode wisely since Activities could be destroyed without user's acknowledgement in this mode like described above.</p>
<h2 class=\"section-heading\">singleInstance</h2>
<p>This mode is quite close to singleTask, only single instance of Activity could be existed in the system. <span style=\"color: #d35400;\"><strong>The difference is Task hold this Activity could have only one Activity, the singleInstance one.</strong></span> If&nbsp;another Activity is called from this kind of Activity, a new Task would be automatically created to place that new Activity. Likewise, if singleInstance Activity is called, new Task would be created to place the Activity.</p>
<p>Anyway the result is quite weird. From the information provided by <code>dumpsys</code>, it appears that there are two Tasks in the system but there is only one appeared in Task Manager depends on which is latest one that is moved to top. As a result, although there is a Task that is still working in the background but we couldn't switch it back to foreground. Doesn't make any sense at all.</p>
<p>This is what that happened when singleInstance Activity is called while there already&nbsp;is some&nbsp;Activity&nbsp;existed in the stack.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/singleInstance.jpg\" alt=\"singleInstance\" /></p>
<p>But this is what we see from Task Manager.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/singleInstances.jpg\" alt=\"singleInstances\" /></p>
<p>Since this Task could has only one Activity, we couldn't switch back to Task #1 anymore. Only&nbsp;way to do so is to relaunch the application from launcher but it appears that the singleInstance Task would be hidden in the background instead.</p>
<p>Anyway there is some workaround for the issue. Just like we did with singleTask Acvity, simply assign a <code>taskAffinity</code> attribute to the singleInstance Activity to enable multiple Tasks on Task Manager.</p>
<pre class=\"brush:plain;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;activity
            android:name=\".SingleInstanceActivity\"
            android:label=\"singleInstance launchMode\"
            android:launchMode=\"singleInstance\"
            android:taskAffinity=\"\"&gt;</pre>
<p>It makes more sense now.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/launchMode/screenshot18.jpg\" alt=\"screenshot18\" /></p>
<p>This mode is rarely used. Some of the real use case is an Activity for Launcher or the application that you are 100% sure there is only one Activity. Anyway I suggest you not to use this mode unless it is really necessary.</p>
<h2 class=\"section-heading\">Intent Flags</h2>
<p>Beside from assigning the launch mode directly in <code>AndroidManifest.xml</code>, we&nbsp;are also able to assign more behavior through thing called&nbsp;<strong>Intent Flags</strong>,&nbsp;for example:</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">Intent intent = new Intent(StandardActivity.this, StandardActivity.class);
intent.addFlags(Intent.FLAG_ACTIVITY_SINGLE_TOP);
startActivity(intent);
</pre>
<p>would launch a&nbsp;<code>StandardActivity</code>&nbsp;with&nbsp;singleTop launchMode condition.</p>
<p>There are quite a lot of Flags you can play with. You could find more about it at <a href=\"http://developer.android.com/reference/android/content/Intent.html#FLAG_ACTIVITY_BROUGHT_TO_FRONT\" target=\"_blank\">Intent</a>.</p>
<p>Hope you find this article useful =)</p>			") (link nil "http://inthecheesefactory.com/blog/understand-android-activity-launchmode/en") (pubDate nil "
				Wed, 15 Apr 2015 10:01:00 +0000			") (guid nil "http://inthecheesefactory.com/blog/understand-android-activity-launchmode/en"))) ("How to install Google Play Services on Genymotion Step by Step" "<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/genymotion/covergenmotion.jpg\" /></p>
<p>Due to Genymotion's fluidness and ease of use, it now becomes the most popular android emulator allows&nbsp;android developers to test their app directly on their computer.</p>
<p>However, it still lacks of Google Services just like Google Play Store, Google Maps, etc. on Genymotion emulator which&nbsp;makes us developer not be able to test those functionalities that use Google Services for example GCM Push Notifications or Google Maps.</p>
<p>Anyway it is not a problem anymore since there is some simple steps to do to make Google Services be avaiable on Genymotion with some help from <strong>CyanogenMod's gapps</strong>.</p>
<p><strong>Step 1: Install&nbsp;ARM Translation</strong> - The secret behind Genymotion's fluidness is its ROM is compiled to x86 to match the most popular computer's CPU Architecture. But CyanogenMod's gapps is compiled in ARM. That's the reason why we can't just simply install gapps on Genymotion. To make it works, we need to install an <strong>ARM Translation</strong> which will let those ARM apps be able to run on this x86 virtual device.</p>
<p>To install, download&nbsp;<a href=\"http://filetrip.net/dl?4SUOrdcMRv\" target=\"_blank\">Genymotion-ARM-Translation_v1.1zip</a>&nbsp;and then drop&amp;drop the downloaded file to an opened Genymotion virtual device. After file transfering is done, there will be a confirmation dialog like below. Just simple click <strong>OK</strong> to flash it on virtual device.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/genymotion/armtranslationflash.jpg\" alt=\"armtranslationflash\" /></p>
<p>There will be an another dialog to let you know that the&nbsp;flashing process is done.&nbsp;</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/genymotion/armtranslationflashed.jpg\" alt=\"armtranslationflashed\" /></p>
<p>You need to reboot the virtual device now but we don't suggest to just close the virtual device and relaunch&nbsp;it once again since it may leads to some weird behaviour. To make it done completely find, you need to reboot the device through command line like this:</p>
<pre class=\"brush:bash;auto-links:false;toolbar:false\" contenteditable=\"false\">adb reboot</pre>
<p>In case you accidentally close the virtual device, don't be panic. You might need to relaunch for a few times before it can&nbsp;boot up.</p>
<p><strong>Step 2: Install gapps</strong> - Before we go on to the next step, you need to download the flashable zip of gapps by your virtual device's Android version:</p>
<p><a href=\"https://www.androidfilehost.com/?fid=95784891001614559\" target=\"_blank\">Android 5.0.x</a>, <a href=\"https://www.androidfilehost.com/?fid=95832962473395379\" target=\"_blank\">Android 4.4.x</a>, <a href=\"https://www.androidfilehost.com/?fid=23060877490000124\" target=\"_blank\">Android 4.3.x</a>, <a href=\"https://www.androidfilehost.com/?fid=23060877490000128\" target=\"_blank\">Android 4.2.x</a>, <a href=\"https://www.androidfilehost.com/?fid=22979706399755082\" target=\"_blank\">Android 4.1.x</a>, <a href=\"https://www.androidfilehost.com/?fid=22979706399755108\" target=\"_blank\">Android 4.0.x</a>, <a href=\"https://www.androidfilehost.com/?fid=22979706399755027\" target=\"_blank\">Android 2.3.3</a></p>
<p>And then drop&amp;drop the downloaded file to a virtual device like previous and go through the flashing process.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/genymotion/flashgapps.jpg\" alt=\"flashgapps\" /></p>
<p>Reboot the virtual device once again.</p>
<pre class=\"brush:bash;auto-links:false;toolbar:false\" contenteditable=\"false\">adb reboot</pre>
<p>After the virtual device is booted up, you will notice that <strong>Google Play services has stopped</strong>&nbsp;problem will keep popping up like this:</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/genymotion/unfortunate.jpg\" alt=\"unfortunate\" /></p>
<p>Don't be surprised and don't panic. You did it all right. This error happens because the installed gapps is just&nbsp;too old and didn't match the latest ROM Genymotion provided. All you need to do is be patient and login to Google Play Store and update all of installed app.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/genymotion/updateall.jpg\" alt=\"updateall\" /></p>
<p>And also don't forget to update <strong>Google Play Services</strong>&nbsp;as well. It should be notified through the&nbsp;device's notification area after your pressed the <em>Update All</em> button in Google Play Store.</p>
<p>Congratulations, Google Play Services are now available on your Genymotion virtual device. A by-product of this installation is you are also able to run the app compiled in ARM on Genymotion as well.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/genymotion/done.jpg\" alt=\"done\" /></p>
<p>Hope you find this article helpful. =)</p>
<p><strong>Source:</strong> <a href=\"http://forum.xda-developers.com/showthread.php?t=2528952\" target=\"_blank\">XDA-Developers</a>, <a href=\"http://wiki.cyanogenmod.org/w/Google_Apps\" target=\"_blank\">CyanogenMod</a></p>" "http://inthecheesefactory.com/blog/how-to-install-google-services-on-genymotion/en" (21802 22748) old 19 nil nil ((title nil "
				How to install Google Play Services on Genymotion Step by Step			") (description nil "
				<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/genymotion/covergenmotion.jpg\" /></p> 
<p>Due to Genymotion's fluidness and ease of use, it now becomes the most popular android emulator allows&nbsp;android developers to test their app directly on their computer.</p>
<p>However, it still lacks of Google Services just like Google Play Store, Google Maps, etc. on Genymotion emulator which&nbsp;makes us developer not be able to test those functionalities that use Google Services for example GCM Push Notifications or Google Maps.</p>
<p>Anyway it is not a problem anymore since there is some simple steps to do to make Google Services be avaiable on Genymotion with some help from <strong>CyanogenMod's gapps</strong>.</p>
<p><strong>Step 1: Install&nbsp;ARM Translation</strong> - The secret behind Genymotion's fluidness is its ROM is compiled to x86 to match the most popular computer's CPU Architecture. But CyanogenMod's gapps is compiled in ARM. That's the reason why we can't just simply install gapps on Genymotion. To make it works, we need to install an <strong>ARM Translation</strong> which will let those ARM apps be able to run on this x86 virtual device.</p>
<p>To install, download&nbsp;<a href=\"http://filetrip.net/dl?4SUOrdcMRv\" target=\"_blank\">Genymotion-ARM-Translation_v1.1zip</a>&nbsp;and then drop&amp;drop the downloaded file to an opened Genymotion virtual device. After file transfering is done, there will be a confirmation dialog like below. Just simple click <strong>OK</strong> to flash it on virtual device.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/genymotion/armtranslationflash.jpg\" alt=\"armtranslationflash\" /></p>
<p>There will be an another dialog to let you know that the&nbsp;flashing process is done.&nbsp;</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/genymotion/armtranslationflashed.jpg\" alt=\"armtranslationflashed\" /></p>
<p>You need to reboot the virtual device now but we don't suggest to just close the virtual device and relaunch&nbsp;it once again since it may leads to some weird behaviour. To make it done completely find, you need to reboot the device through command line like this:</p>
<pre class=\"brush:bash;auto-links:false;toolbar:false\" contenteditable=\"false\">adb reboot</pre>
<p>In case you accidentally close the virtual device, don't be panic. You might need to relaunch for a few times before it can&nbsp;boot up.</p>
<p><strong>Step 2: Install gapps</strong> - Before we go on to the next step, you need to download the flashable zip of gapps by your virtual device's Android version:</p>
<p><a href=\"https://www.androidfilehost.com/?fid=95784891001614559\" target=\"_blank\">Android 5.0.x</a>, <a href=\"https://www.androidfilehost.com/?fid=95832962473395379\" target=\"_blank\">Android 4.4.x</a>, <a href=\"https://www.androidfilehost.com/?fid=23060877490000124\" target=\"_blank\">Android 4.3.x</a>, <a href=\"https://www.androidfilehost.com/?fid=23060877490000128\" target=\"_blank\">Android 4.2.x</a>, <a href=\"https://www.androidfilehost.com/?fid=22979706399755082\" target=\"_blank\">Android 4.1.x</a>, <a href=\"https://www.androidfilehost.com/?fid=22979706399755108\" target=\"_blank\">Android 4.0.x</a>, <a href=\"https://www.androidfilehost.com/?fid=22979706399755027\" target=\"_blank\">Android 2.3.3</a></p>
<p>And then drop&amp;drop the downloaded file to a virtual device like previous and go through the flashing process.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/genymotion/flashgapps.jpg\" alt=\"flashgapps\" /></p>
<p>Reboot the virtual device once again.</p>
<pre class=\"brush:bash;auto-links:false;toolbar:false\" contenteditable=\"false\">adb reboot</pre>
<p>After the virtual device is booted up, you will notice that <strong>Google Play services has stopped</strong>&nbsp;problem will keep popping up like this:</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/genymotion/unfortunate.jpg\" alt=\"unfortunate\" /></p>
<p>Don't be surprised and don't panic. You did it all right. This error happens because the installed gapps is just&nbsp;too old and didn't match the latest ROM Genymotion provided. All you need to do is be patient and login to Google Play Store and update all of installed app.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/genymotion/updateall.jpg\" alt=\"updateall\" /></p>
<p>And also don't forget to update <strong>Google Play Services</strong>&nbsp;as well. It should be notified through the&nbsp;device's notification area after your pressed the <em>Update All</em> button in Google Play Store.</p>
<p>Congratulations, Google Play Services are now available on your Genymotion virtual device. A by-product of this installation is you are also able to run the app compiled in ARM on Genymotion as well.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/genymotion/done.jpg\" alt=\"done\" /></p>
<p>Hope you find this article helpful. =)</p>
<p><strong>Source:</strong> <a href=\"http://forum.xda-developers.com/showthread.php?t=2528952\" target=\"_blank\">XDA-Developers</a>, <a href=\"http://wiki.cyanogenmod.org/w/Google_Apps\" target=\"_blank\">CyanogenMod</a></p>			") (link nil "http://inthecheesefactory.com/blog/how-to-install-google-services-on-genymotion/en") (pubDate nil "
				Sun, 12 Apr 2015 11:37:00 +0000			") (guid nil "http://inthecheesefactory.com/blog/how-to-install-google-services-on-genymotion/en"))) ("Introduction to Glide, Image Loader Library for Android, recommended by Google" "<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/glidepicasso/cover.jpg\" /></p>
<p>In the passed Google Developer Summit Thailand, Google introduced us an Image Loader Library for Android developed by bumptech named <a href=\"https://github.com/bumptech/glide\" target=\"_blank\">Glide</a>&nbsp;as a library that recommended by Google. It has been used in many Google open source projects till now including Google I/O 2014 official application.</p>
<p>It succeeded in making me interested. I spent a whole night playing with it and decided to&nbsp;share&nbsp;&nbsp;my experience&nbsp;in this blog post. As a begining, I must say that it looks 90% similar to Picasso. To be more precise, I think it is something like a Picasso-clone.</p>
<p>Anyway it is quite different in details. You will learn how.</p>
<p><span class=\"section-heading\">Import to project</span></p>
<p>Both Picasso and Glide are on jcenter. You can simply import it to your project with&nbsp;dependency like this:</p>
<p class=\"code-caption\"><strong>Picasso<br /></strong></p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">dependencies {
compile 'com.squareup.picasso:picasso:2.5.1'
}</pre>
<p class=\"code-caption\"><strong>Glide</strong></p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">dependencies {
compile 'com.github.bumptech.glide:glide:3.5.2'
compile 'com.android.support:support-v4:22.0.0'
}</pre>
<p>Anyway Glide also needs <strong>Android Support Library v4</strong>, please don't forget to import&nbsp;<code>support-v4</code>&nbsp;to your project like above as well. But it is not kind of a problem since Android Support Library v4 is basically needed in every single new-age Android project.</p>
<p><span class=\"section-heading\">Basic</span></p>
<p>As I said, it is very similar to Picasso. The way to load an image to ImageView with Glide is quite the same as Picasso.</p>
<p class=\"code-caption\"><strong>Picasso</strong></p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">Picasso.with(context)
.load(\"http://inthecheesefactory.com/uploads/source/glidepicasso/cover.jpg\")
.into(ivImg);</pre>
<p class=\"code-caption\"><strong>Glide</strong></p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">Glide.with(context)
.load(\"http://inthecheesefactory.com/uploads/source/glidepicasso/cover.jpg\")
.into(ivImg);</pre>
<p>Although it looks quite the same but in details Glide is designed far better since <code>with</code> doesn't accept only Context but also Activity and Fragment. Context will be automatically extracted from those things you throw in.</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/glidepicasso/with.png\" alt=\"with\" /></p>
<p>And the brilliant benefit from passing Activity/Fragment to Glide is: image loading&nbsp;would be integrated with Activity/Fragment's lifecycle for example, pause loading in Paused state and automatically resume on Resumed state. So I encourage you to pass the Activity or Fragment to Glide not just a Context if possible.</p>
<p><span class=\"section-heading\">Default Bitmap Format is&nbsp;RGB_565</span></p>
<p>Here is the result of image loading comparing to Picasso. (1920x1080 pixels image is loaded into&nbsp;768x432 pixels ImageView)</p>
<p><a href=\"http://inthecheesefactory.com/uploads/source/glidepicasso/firstload.jpg\" target=\"_blank\"><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/glidepicasso/firstload.jpg\" alt=\"firstload\" /></a></p>
<p>You can notice that image loaded by Glide has the worse quality compared to Picasso. Why? This is because Glide default Bitmap Format is set to <code>RGB_565</code>&nbsp;since it consumed just 50% memory footprint compared to <code>ARGB_8888</code>.</p>
<p>Here is the memory&nbsp;consumption graphs between Picasso at ARGB8888&nbsp;and&nbsp;Glide at RGB565. (Base application consumes around&nbsp;8MB)</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/glidepicasso/ram1_1.png\" alt=\"ram1_1\" /></p>
<p>You don't have to do anything&nbsp;if you are ok with the image's quality&nbsp;already. But if think it&nbsp;is unacceptable or just not good enough for you, you can switch Bitmap Format to <code>ARGB_8888</code>&nbsp;by creating a new class which extended from <code>GlideModule</code> like this:</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">public class GlideConfiguration implements GlideModule {
@Override
public void applyOptions(Context context, GlideBuilder builder) {
// Apply options to the builder here.
builder.setDecodeFormat(DecodeFormat.PREFER_ARGB_8888);
}
@Override
public void registerComponents(Context context, Glide glide) {
// register ModelLoaders here.
}
}</pre>
<p>And then define it as <code>meta-data</code>&nbsp;inside&nbsp;<code>AndroidManifest.xml</code></p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;meta-data android:name=\"com.inthecheesefactory.lab.glidepicasso.GlideConfiguration\"
android:value=\"GlideModule\"/&gt;</pre>
<p>It&nbsp;looks far better now!</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/glidepicasso/quality2.jpg\" alt=\"quality2\" /></p>
<p>Let's take a look at memory consumption graphs once again. It appears that although Glide consumes almost 2 times than previous but Picasso still consumes a lot memory footprint more than Glide.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/glidepicasso/ram2_1.png\" alt=\"ram2_1\" /></p>
<p>The reason is Picasso loads the full-size image (1920x1080 pixels) into the memory and let GPU does the real-time resizing when drawn. While Glide loads the exact ImageView-size (768x432 pixels) into the memory which is a best practice. Anyway you can change the behavior of Picasso to do&nbsp;the same with&nbsp;<code>resize()</code> command:</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">Picasso.with(this)
.load(\"http://nuuneoi.com/uploads/source/playstore/cover.jpg\")
.resize(768, 432)
.into(ivImgPicasso);</pre>
<p>But the problem is you need to manually calculate the ImageView's size. Or if your ImageView has the exact size (not set to wrap_content), you can simply do like this.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">Picasso.with(this)
.load(\"http://nuuneoi.com/uploads/source/playstore/cover.jpg\")
.fit()
.centerCrop()
.into(ivImgPicasso);</pre>
<p>Memory consumption graphs&nbsp;are&nbsp;now finally almost the same !</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/glidepicasso/memory3.png\" alt=\"memory3\" /></p>
<p>Although memory consumption are quite the same but I must say that Glide beats Picasso in term of functionality of this part since it could calculate the ImageView size automatically in every single case.</p>
<p><span class=\"section-heading\">Image's quality in details</span></p>
<p>Here is the result when I tried to zoom an ImageView to the actual size.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/glidepicasso/quality3.png\" alt=\"quality3\" /></p>
<p>It is noticeable that image loaded by Glide has some hard pixels&nbsp;and is not as smooth as the Picasso one. And&nbsp;till now, I still couldn't find the straight way to change image resizing algorithm.</p>
<p><span style=\"color: #16a085;\">But if you ask me is it bad? I would say that it is not that noticeable in&nbsp;real use. Quality is acceptable but you just need to set Bitmap Format to ARGB_8888, that's all.</span></p>
<p><span class=\"section-heading\">Disk Caching<br /></span></p>
<p>Default disk caching concept&nbsp;of&nbsp;Picasso and&nbsp;Glide are quite different. From the experiment, the same Full HD image is loaded into ImageView with Picasso and Glide. When I checked the cache folder, it appears that&nbsp;Glide cached the ImageView-size (768x432 pixels) while Picasso cached the full-size one&nbsp;(1920x1080 pixels).</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/glidepicasso/cache.jpg\" alt=\"cache\" /></p>
<p>And yes, hard pixels&nbsp;described above is also&nbsp;there. In addition,&nbsp;if image is loaded&nbsp;in RGB565 mode, the cached image will be also in RGB565.</p>
<p>When I tried to adjust ImageView to the&nbsp;different sizes. The result is whatever the size is, Picasso will cache only single size of image, the full-size one. Glide acts differently, caches separate file&nbsp;for&nbsp;each&nbsp;size of ImageView. Although an image has already been loaded once but if you need&nbsp;to load another size the same image, it needs to be downloaded once again before&nbsp;be resized to the right&nbsp;resolution and then be&nbsp;cached.</p>
<p>To be more clear, if there is an ImageView in the first page with 200x200 pixels dimension and there is the another one in the second page with 100x100 pixels that are needed to show the same image. You have to download the same image twice.</p>
<p>Anyway you could adjust its behavior by <span style=\"color: #2980b9;\">let Glide cache&nbsp;both the full-size image and the resized one</span> with this command.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">        Glide.with(this)
.load(\"http://nuuneoi.com/uploads/source/playstore/cover.jpg\")
.diskCacheStrategy(DiskCacheStrategy.ALL)
.into(ivImgGlide);</pre>
<p>The next time image is requested to show on any ImageView, the full-size image would be loaded from cache, resized and then cached.</p>
<p>An advantage&nbsp;of the way Glide was designed is image could be loaded and showed very fast. While the Picasso way causes some delay on loading since it needs to be resized first before is&nbsp;set to an ImageView even you add this command to make it showed immediately.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">//Picasso
.noFade();</pre>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/glidepicasso/loading3.gif\" alt=\"loading3\" /></p>
<p>There is some trade off between Picasso's and Glide's way of disk caching. You can&nbsp;choose the way fit your app's requirement best.</p>
<p>For me, I prefer Glide to&nbsp;Picasso since it is far faster&nbsp;although it needs more space to cache the image.</p>
<p><span class=\"section-heading\">Features<br /></span></p>
<p>You can do almost all the same&nbsp;things just like Picasso can&nbsp;do with the same style&nbsp;of coding&nbsp;for example, <strong>Image Resizing</strong></p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">// Picasso
.resize(300, 200);
// Glide
.override(300, 200);</pre>
<p><strong>Center Cropping</strong></p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">// Picasso
.centerCrop();
// Glide
.centerCrop();</pre>
<p><strong>Transforming</strong></p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">// Picasso
.transform(new CircleTransform())
// Glide
.transform(new CircleTransform(context))</pre>
<p>Setting the <strong>Placeholder</strong>&nbsp;and&nbsp;<strong>Error&nbsp;</strong>image</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">// Picasso
.placeholder(R.drawable.placeholder)
.error(R.drawable.imagenotfound)
// Glide
.placeholder(R.drawable.placeholder)
.error(R.drawable.imagenotfound)</pre>
<p>As I said, if you are familiar with Picasso, moving to Glide would be just like chewing a candy&nbsp;for you. =)</p>
<p><span class=\"section-heading\">What that Glide has but Picasso&nbsp;doesn't</span></p>
<p>An&nbsp;ability to load <span style=\"color: #16a085;\"><strong>GIF Animation&nbsp;</strong></span>to a simple ImageView&nbsp;might be the most interesting feature of Glide. And yes, you can't do that with&nbsp;Picasso.</p>
<p><img src=\"http://inthecheesefactory.com/uploads/source/glidepicasso/gifanimation2.gif\" alt=\"gifanimation2\" /></p>
<p>And since Glide is designed to work perfectly with Activity/Fragment's lifecycle so the animation would be automatically paused and resumed&nbsp;along with Activity/Fragment's state.</p>
<p>The way Glide caches is still be the same, resized first and then&nbsp;cached.</p>
<p>Anyway from an&nbsp;measurement I found that <span style=\"color: #d35400;\">GIF Animation consumes quite a lot of memory</span>. Please use it wisely.</p>
<p>Besides GIF Animation loading, Glide is also able to&nbsp;decode any <em>local</em> video file to a still image.</p>
<p>Another feature that might be useful is you can configure the way image appears&nbsp;with an&nbsp;Animator (R.animator) while Picasso could do only one animation, fading in.</p>
<p>The last one if you could <span style=\"color: #16a085;\">generate a thumbnail file of an image you loaded</span>&nbsp;with <code>thumbnail()</code>.</p>
<p>Actually there are some other features you can play with but most of them are not that important for general use for example, transcode an image into Byte Array, etc.</p>
<p><span class=\"section-heading\">Configurations</span></p>
<p>You can adjust so many configurations for example, size and location of disk caching, maximum limit&nbsp;of memory caching, Bitmap Format and many more. You can read more about this at&nbsp;<a href=\"https://github.com/bumptech/glide/wiki/Configuration\" target=\"_blank\">Configuration</a>&nbsp;page.</p>
<p><span class=\"section-heading\">Library's size</span></p>
<p>Picasso (v2.5.1)'s size is around 118KB while&nbsp;Glide (v3.5.2)'s is around 430KB.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/glidepicasso/librarysize.png\" alt=\"librarysize\" /></p>
<p>Anyway 312KB difference might not be that significant.</p>
<p>Method count of Picasso and Glide are at 840 and 2678 respectively.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/glidepicasso/methodcount.png\" alt=\"methodcount\" /></p>
<p>I must say 2678 is quite a lot for 65535 methods limit of Android DEX file. ProGuard is recommended to turn on if you choose Glide. (And you should turn it on anyway for production release).</p>
<p><span class=\"section-heading\">Conclusion<br /></span></p>
<p>Neither Glide nor&nbsp;Picasso is&nbsp;perfect. The way Glide loads an image to memory and do the caching is better than Picasso which let&nbsp;an image loaded far faster. In addition, it also helps preventing an app from popular OutOfMemoryError.&nbsp;GIF Animation loading is a killing feature provided by Glide. Anyway&nbsp;Picasso decodes an image&nbsp;with better&nbsp;quality than Glide.</p>
<p>Which one do I prefer? Although I use Picasso for such a very long time, I must admit that I now prefer Glide. <span style=\"color: #27ae60;\">But I would recommend you to change Bitmap Format to ARGB_8888 and let Glide cache both full-size image and resized one first. The rest would do your job&nbsp;great!</span></p>
<p><span class=\"section-heading\">Resources<br /></span></p>
<p>There are not so many online resources related to Glide. But here are what I found. Please take a look on links below.</p>
<p>-&nbsp;<a href=\"http://google-opensource.blogspot.com/2014/09/glide-30-media-management-library-for.html\" target=\"_blank\">Glide 3.0: a media management library for Android</a></p>
<p>- <a href=\"https://github.com/bumptech/glide/wiki\" target=\"_blank\">Glide Wiki</a></p>
<p>-&nbsp;<a href=\"http://pluu.github.io/blog/android-studio/2015/01/15/android-glide-picasso/\" target=\"_blank\">Android Picasso vs Glide</a></p>
<p>-&nbsp;<a href=\"http://vardhan-justlikethat.blogspot.com/2014/09/android-image-loading-libraries-picasso.html\" target=\"_blank\">Android: Image loading libraries Picasso vs Glide</a></p>" "http://inthecheesefactory.com/blog/get-to-know-glide-recommended-by-google/en" (21776 20824) old 20 nil nil ((title nil "
				Introduction to Glide, Image Loader Library for Android, recommended by Google			") (description nil "
				<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/glidepicasso/cover.jpg\" /></p> 
<p>In the passed Google Developer Summit Thailand, Google introduced us an Image Loader Library for Android developed by bumptech named <a href=\"https://github.com/bumptech/glide\" target=\"_blank\">Glide</a>&nbsp;as a library that recommended by Google. It has been used in many Google open source projects till now including Google I/O 2014 official application.</p>
<p>It succeeded in making me interested. I spent a whole night playing with it and decided to&nbsp;share&nbsp;&nbsp;my experience&nbsp;in this blog post. As a begining, I must say that it looks 90% similar to Picasso. To be more precise, I think it is something like a Picasso-clone.</p>
<p>Anyway it is quite different in details. You will learn how.</p>
<p><span class=\"section-heading\">Import to project</span></p>
<p>Both Picasso and Glide are on jcenter. You can simply import it to your project with&nbsp;dependency like this:</p>
<p class=\"code-caption\"><strong>Picasso<br /></strong></p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">dependencies {
    compile 'com.squareup.picasso:picasso:2.5.1'
}</pre>
<p class=\"code-caption\"><strong>Glide</strong></p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">dependencies {
    compile 'com.github.bumptech.glide:glide:3.5.2'
    compile 'com.android.support:support-v4:22.0.0'
}</pre>
<p>Anyway Glide also needs <strong>Android Support Library v4</strong>, please don't forget to import&nbsp;<code>support-v4</code>&nbsp;to your project like above as well. But it is not kind of a problem since Android Support Library v4 is basically needed in every single new-age Android project.</p>
<p><span class=\"section-heading\">Basic</span></p>
<p>As I said, it is very similar to Picasso. The way to load an image to ImageView with Glide is quite the same as Picasso.</p>
<p class=\"code-caption\"><strong>Picasso</strong></p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">Picasso.with(context)
    .load(\"http://inthecheesefactory.com/uploads/source/glidepicasso/cover.jpg\")
    .into(ivImg);</pre>
<p class=\"code-caption\"><strong>Glide</strong></p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">Glide.with(context)
    .load(\"http://inthecheesefactory.com/uploads/source/glidepicasso/cover.jpg\")
    .into(ivImg);</pre>
<p>Although it looks quite the same but in details Glide is designed far better since <code>with</code> doesn't accept only Context but also Activity and Fragment. Context will be automatically extracted from those things you throw in.</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/glidepicasso/with.png\" alt=\"with\" /></p>
<p>And the brilliant benefit from passing Activity/Fragment to Glide is: image loading&nbsp;would be integrated with Activity/Fragment's lifecycle for example, pause loading in Paused state and automatically resume on Resumed state. So I encourage you to pass the Activity or Fragment to Glide not just a Context if possible.</p>
<p><span class=\"section-heading\">Default Bitmap Format is&nbsp;RGB_565</span></p>
<p>Here is the result of image loading comparing to Picasso. (1920x1080 pixels image is loaded into&nbsp;768x432 pixels ImageView)</p>
<p><a href=\"http://inthecheesefactory.com/uploads/source/glidepicasso/firstload.jpg\" target=\"_blank\"><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/glidepicasso/firstload.jpg\" alt=\"firstload\" /></a></p>
<p>You can notice that image loaded by Glide has the worse quality compared to Picasso. Why? This is because Glide default Bitmap Format is set to <code>RGB_565</code>&nbsp;since it consumed just 50% memory footprint compared to <code>ARGB_8888</code>.</p>
<p>Here is the memory&nbsp;consumption graphs between Picasso at ARGB8888&nbsp;and&nbsp;Glide at RGB565. (Base application consumes around&nbsp;8MB)</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/glidepicasso/ram1_1.png\" alt=\"ram1_1\" /></p>
<p>You don't have to do anything&nbsp;if you are ok with the image's quality&nbsp;already. But if think it&nbsp;is unacceptable or just not good enough for you, you can switch Bitmap Format to <code>ARGB_8888</code>&nbsp;by creating a new class which extended from <code>GlideModule</code> like this:</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">public class GlideConfiguration implements GlideModule {

    @Override
    public void applyOptions(Context context, GlideBuilder builder) {
        // Apply options to the builder here.
        builder.setDecodeFormat(DecodeFormat.PREFER_ARGB_8888);
    }

    @Override
    public void registerComponents(Context context, Glide glide) {
        // register ModelLoaders here.
    }
}</pre>
<p>And then define it as <code>meta-data</code>&nbsp;inside&nbsp;<code>AndroidManifest.xml</code></p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;meta-data android:name=\"com.inthecheesefactory.lab.glidepicasso.GlideConfiguration\"
            android:value=\"GlideModule\"/&gt;</pre>
<p>It&nbsp;looks far better now!</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/glidepicasso/quality2.jpg\" alt=\"quality2\" /></p>
<p>Let's take a look at memory consumption graphs once again. It appears that although Glide consumes almost 2 times than previous but Picasso still consumes a lot memory footprint more than Glide.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/glidepicasso/ram2_1.png\" alt=\"ram2_1\" /></p>
<p>The reason is Picasso loads the full-size image (1920x1080 pixels) into the memory and let GPU does the real-time resizing when drawn. While Glide loads the exact ImageView-size (768x432 pixels) into the memory which is a best practice. Anyway you can change the behavior of Picasso to do&nbsp;the same with&nbsp;<code>resize()</code> command:</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">Picasso.with(this)
    .load(\"http://nuuneoi.com/uploads/source/playstore/cover.jpg\")
    .resize(768, 432)
    .into(ivImgPicasso);</pre>
<p>But the problem is you need to manually calculate the ImageView's size. Or if your ImageView has the exact size (not set to wrap_content), you can simply do like this.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">Picasso.with(this)
    .load(\"http://nuuneoi.com/uploads/source/playstore/cover.jpg\")
    .fit()
    .centerCrop()
    .into(ivImgPicasso);</pre>
<p>Memory consumption graphs&nbsp;are&nbsp;now finally almost the same !</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/glidepicasso/memory3.png\" alt=\"memory3\" /></p>
<p>Although memory consumption are quite the same but I must say that Glide beats Picasso in term of functionality of this part since it could calculate the ImageView size automatically in every single case.</p>
<p><span class=\"section-heading\">Image's quality in details</span></p>
<p>Here is the result when I tried to zoom an ImageView to the actual size.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/glidepicasso/quality3.png\" alt=\"quality3\" /></p>
<p>It is noticeable that image loaded by Glide has some hard pixels&nbsp;and is not as smooth as the Picasso one. And&nbsp;till now, I still couldn't find the straight way to change image resizing algorithm.</p>
<p><span style=\"color: #16a085;\">But if you ask me is it bad? I would say that it is not that noticeable in&nbsp;real use. Quality is acceptable but you just need to set Bitmap Format to ARGB_8888, that's all.</span></p>
<p><span class=\"section-heading\">Disk Caching<br /></span></p>
<p>Default disk caching concept&nbsp;of&nbsp;Picasso and&nbsp;Glide are quite different. From the experiment, the same Full HD image is loaded into ImageView with Picasso and Glide. When I checked the cache folder, it appears that&nbsp;Glide cached the ImageView-size (768x432 pixels) while Picasso cached the full-size one&nbsp;(1920x1080 pixels).</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/glidepicasso/cache.jpg\" alt=\"cache\" /></p>
<p>And yes, hard pixels&nbsp;described above is also&nbsp;there. In addition,&nbsp;if image is loaded&nbsp;in RGB565 mode, the cached image will be also in RGB565.</p>
<p>When I tried to adjust ImageView to the&nbsp;different sizes. The result is whatever the size is, Picasso will cache only single size of image, the full-size one. Glide acts differently, caches separate file&nbsp;for&nbsp;each&nbsp;size of ImageView. Although an image has already been loaded once but if you need&nbsp;to load another size the same image, it needs to be downloaded once again before&nbsp;be resized to the right&nbsp;resolution and then be&nbsp;cached.</p>
<p>To be more clear, if there is an ImageView in the first page with 200x200 pixels dimension and there is the another one in the second page with 100x100 pixels that are needed to show the same image. You have to download the same image twice.</p>
<p>Anyway you could adjust its behavior by <span style=\"color: #2980b9;\">let Glide cache&nbsp;both the full-size image and the resized one</span> with this command.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">        Glide.with(this)
             .load(\"http://nuuneoi.com/uploads/source/playstore/cover.jpg\")
             .diskCacheStrategy(DiskCacheStrategy.ALL)
             .into(ivImgGlide);</pre>
<p>The next time image is requested to show on any ImageView, the full-size image would be loaded from cache, resized and then cached.</p>
<p>An advantage&nbsp;of the way Glide was designed is image could be loaded and showed very fast. While the Picasso way causes some delay on loading since it needs to be resized first before is&nbsp;set to an ImageView even you add this command to make it showed immediately.</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">//Picasso
.noFade();</pre>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/glidepicasso/loading3.gif\" alt=\"loading3\" /></p>
<p>There is some trade off between Picasso's and Glide's way of disk caching. You can&nbsp;choose the way fit your app's requirement best.</p>
<p>For me, I prefer Glide to&nbsp;Picasso since it is far faster&nbsp;although it needs more space to cache the image.</p>
<p><span class=\"section-heading\">Features<br /></span></p>
<p>You can do almost all the same&nbsp;things just like Picasso can&nbsp;do with the same style&nbsp;of coding&nbsp;for example, <strong>Image Resizing</strong></p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">// Picasso
.resize(300, 200);

// Glide
.override(300, 200);</pre>
<p><strong>Center Cropping</strong></p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">// Picasso
.centerCrop();

// Glide
.centerCrop();</pre>
<p><strong>Transforming</strong></p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">// Picasso
.transform(new CircleTransform())

// Glide
.transform(new CircleTransform(context))</pre>
<p>Setting the <strong>Placeholder</strong>&nbsp;and&nbsp;<strong>Error&nbsp;</strong>image</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">// Picasso
.placeholder(R.drawable.placeholder)
.error(R.drawable.imagenotfound)

// Glide
.placeholder(R.drawable.placeholder)
.error(R.drawable.imagenotfound)</pre>
<p>As I said, if you are familiar with Picasso, moving to Glide would be just like chewing a candy&nbsp;for you. =)</p>
<p><span class=\"section-heading\">What that Glide has but Picasso&nbsp;doesn't</span></p>
<p>An&nbsp;ability to load <span style=\"color: #16a085;\"><strong>GIF Animation&nbsp;</strong></span>to a simple ImageView&nbsp;might be the most interesting feature of Glide. And yes, you can't do that with&nbsp;Picasso.</p>
<p><img src=\"http://inthecheesefactory.com/uploads/source/glidepicasso/gifanimation2.gif\" alt=\"gifanimation2\" /></p>
<p>And since Glide is designed to work perfectly with Activity/Fragment's lifecycle so the animation would be automatically paused and resumed&nbsp;along with Activity/Fragment's state.</p>
<p>The way Glide caches is still be the same, resized first and then&nbsp;cached.</p>
<p>Anyway from an&nbsp;measurement I found that <span style=\"color: #d35400;\">GIF Animation consumes quite a lot of memory</span>. Please use it wisely.</p>
<p>Besides GIF Animation loading, Glide is also able to&nbsp;decode any <em>local</em> video file to a still image.</p>
<p>Another feature that might be useful is you can configure the way image appears&nbsp;with an&nbsp;Animator (R.animator) while Picasso could do only one animation, fading in.</p>
<p>The last one if you could <span style=\"color: #16a085;\">generate a thumbnail file of an image you loaded</span>&nbsp;with <code>thumbnail()</code>.</p>
<p>Actually there are some other features you can play with but most of them are not that important for general use for example, transcode an image into Byte Array, etc.</p>
<p><span class=\"section-heading\">Configurations</span></p>
<p>You can adjust so many configurations for example, size and location of disk caching, maximum limit&nbsp;of memory caching, Bitmap Format and many more. You can read more about this at&nbsp;<a href=\"https://github.com/bumptech/glide/wiki/Configuration\" target=\"_blank\">Configuration</a>&nbsp;page.</p>
<p><span class=\"section-heading\">Library's size</span></p>
<p>Picasso (v2.5.1)'s size is around 118KB while&nbsp;Glide (v3.5.2)'s is around 430KB.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/glidepicasso/librarysize.png\" alt=\"librarysize\" /></p>
<p>Anyway 312KB difference might not be that significant.</p>
<p>Method count of Picasso and Glide are at 840 and 2678 respectively.</p>
<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/glidepicasso/methodcount.png\" alt=\"methodcount\" /></p>
<p>I must say 2678 is quite a lot for 65535 methods limit of Android DEX file. ProGuard is recommended to turn on if you choose Glide. (And you should turn it on anyway for production release).</p>
<p><span class=\"section-heading\">Conclusion<br /></span></p>
<p>Neither Glide nor&nbsp;Picasso is&nbsp;perfect. The way Glide loads an image to memory and do the caching is better than Picasso which let&nbsp;an image loaded far faster. In addition, it also helps preventing an app from popular OutOfMemoryError.&nbsp;GIF Animation loading is a killing feature provided by Glide. Anyway&nbsp;Picasso decodes an image&nbsp;with better&nbsp;quality than Glide.</p>
<p>Which one do I prefer? Although I use Picasso for such a very long time, I must admit that I now prefer Glide. <span style=\"color: #27ae60;\">But I would recommend you to change Bitmap Format to ARGB_8888 and let Glide cache both full-size image and resized one first. The rest would do your job&nbsp;great!</span></p>
<p><span class=\"section-heading\">Resources<br /></span></p>
<p>There are not so many online resources related to Glide. But here are what I found. Please take a look on links below.</p>
<p>-&nbsp;<a href=\"http://google-opensource.blogspot.com/2014/09/glide-30-media-management-library-for.html\" target=\"_blank\">Glide 3.0: a media management library for Android</a></p>
<p>- <a href=\"https://github.com/bumptech/glide/wiki\" target=\"_blank\">Glide Wiki</a></p>
<p>-&nbsp;<a href=\"http://pluu.github.io/blog/android-studio/2015/01/15/android-glide-picasso/\" target=\"_blank\">Android Picasso vs Glide</a></p>
<p>-&nbsp;<a href=\"http://vardhan-justlikethat.blogspot.com/2014/09/android-image-loading-libraries-picasso.html\" target=\"_blank\">Android: Image loading libraries Picasso vs Glide</a></p>			") (link nil "http://inthecheesefactory.com/blog/get-to-know-glide-recommended-by-google/en") (pubDate nil "
				Mon, 23 Mar 2015 17:46:00 +0000			") (guid nil "http://inthecheesefactory.com/blog/get-to-know-glide-recommended-by-google/en"))) ("Correct the ImageView's adjustViewBounds behaviour on API Level 17 and below with AdjustableImageView" "<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/adjustableimageview/cover.jpg\" /></p>
<p>A requirement that almost every single application has is <strong>\"I want to scale up an ImageView proportionally to fit its parent. How can&nbsp;I do that?\"&nbsp;</strong>Like this:</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/adjustableimageview/adjustviewbounds.jpg\" alt=\"adjustviewbounds\" width=\"600\" /></p>
<p>Actually ImageView has already come with this capability. You can just simply set <code>android:adjustViewBounds</code>&nbsp;to&nbsp;<code>true</code>&nbsp;and that's all.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;ImageView
android:layout_width=\"match_parent\"
android:layout_height=\"wrap_content\"
android:adjustViewBounds=\"true\"
android:src=\"@mipmap/ic_launcher\" /&gt;</pre>
<p>Here is the result.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/adjustableimageview/22_1.png\" alt=\"22_1\" width=\"600\" /></p>
<p>Everything looks fine? Actually not. If you switch your preview version to API Level 17 or below, you will see that ImageView&nbsp;doesn't scale up anymore.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/adjustableimageview/17_1.png\" alt=\"17_1\" width=\"600\" /></p>
<p>It is not a bug but a correct behaviour that is&nbsp;officially&nbsp;noted&nbsp;in the&nbsp;<a href=\"http://developer.android.com/reference/android/widget/ImageView.html#setAdjustViewBounds(boolean)\" target=\"_blank\">documentation</a>.</p>
<blockquote><strong>Note:</strong> If the application targets API level 17 or lower, adjustViewBounds will allow the drawable to shrink the view bounds, but not grow to fill available measured space in all cases. This is for compatibility with legacy <code><a href=\"http://developer.android.com/reference/android/view/View.MeasureSpec.html\">MeasureSpec</a></code> and <code><a href=\"http://developer.android.com/reference/android/widget/RelativeLayout.html\">RelativeLayout</a></code> behavior.</blockquote>
<p>It means that in API Level 17 and below, the maximum width and maximum height are bounded to the size of image defined in <code>android:src</code>. As a result, it happens like picture above.</p>
<p>Have a small look at Market Share of Android Platform Versions. It appears that Android phone running API Level 17 and below takes almost 50% share.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/adjustableimageview/platformversions.png\" alt=\"platformversions\" /></p>
<p>It is not a good solution to set minSdkVersion to 18 just to avoid this problem.</p>
<p>It is far better to modify some ImageView's source&nbsp;code to give it&nbsp;an API Level 18+'s behavior and use it instead of a normal ImageView. Here it comes, a Custom ImageView that does the job !</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">import android.content.Context;
import android.graphics.drawable.Drawable;
import android.util.AttributeSet;
import android.view.ViewGroup;
import android.view.ViewParent;
import android.widget.ImageView;
/**
* Created by nuuneoi on 2/17/15 AD.
*/
public class AdjustableImageView extends ImageView {
boolean mAdjustViewBounds;
public AdjustableImageView(Context context) {
super(context);
}
public AdjustableImageView(Context context, AttributeSet attrs) {
super(context, attrs);
}
public AdjustableImageView(Context context, AttributeSet attrs, int defStyleAttr) {
super(context, attrs, defStyleAttr);
}
@Override
public void setAdjustViewBounds(boolean adjustViewBounds) {
mAdjustViewBounds = adjustViewBounds;
super.setAdjustViewBounds(adjustViewBounds);
}
@Override
protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
Drawable mDrawable = getDrawable();
if (mDrawable == null) {
super.onMeasure(widthMeasureSpec, heightMeasureSpec);
return;
}
if (mAdjustViewBounds) {
int mDrawableWidth = mDrawable.getIntrinsicWidth();
int mDrawableHeight = mDrawable.getIntrinsicHeight();
int heightSize = MeasureSpec.getSize(heightMeasureSpec);
int widthSize = MeasureSpec.getSize(widthMeasureSpec);
int heightMode = MeasureSpec.getMode(heightMeasureSpec);
int widthMode = MeasureSpec.getMode(widthMeasureSpec);
if (heightMode == MeasureSpec.EXACTLY &amp;&amp; widthMode != MeasureSpec.EXACTLY) {
// Fixed Height &amp; Adjustable Width
int height = heightSize;
int width = height * mDrawableWidth / mDrawableHeight;
if (isInScrollingContainer())
setMeasuredDimension(width, height);
else
setMeasuredDimension(Math.min(width, widthSize), Math.min(height, heightSize));
} else if (widthMode == MeasureSpec.EXACTLY &amp;&amp; heightMode != MeasureSpec.EXACTLY) {
// Fixed Width &amp; Adjustable Height
int width = widthSize;
int height = width * mDrawableHeight / mDrawableWidth;
if (isInScrollingContainer())
setMeasuredDimension(width, height);
else
setMeasuredDimension(Math.min(width, widthSize), Math.min(height, heightSize));
} else {
super.onMeasure(widthMeasureSpec, heightMeasureSpec);
}
} else {
super.onMeasure(widthMeasureSpec, heightMeasureSpec);
}
}
private boolean isInScrollingContainer() {
ViewParent p = getParent();
while (p != null &amp;&amp; p instanceof ViewGroup) {
if (((ViewGroup) p).shouldDelayChildPressedState()) {
return true;
}
p = p.getParent();
}
return false;
}
}
</pre>
<p>The way these codes work is&nbsp;straightforward. It would calculate the height proportionally in case the width is fixed and vice versa inside <code>onMeasure</code>. In case this <code>AdjustableImageView</code> object is placed inside non-scrollable container, width and height would be limited to the space left in parent. Otherwise, it would be scaled up without any restriction.</p>
<p>To use it, simply change <code>ImageView</code> to <code>com.inthecheesefactory.thecheeselibrary.widget.AdjustableImageView</code>&nbsp;in the layout xml.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;com.inthecheesefactory.thecheeselibrary.widget.AdjustableImageView
android:layout_width=\"match_parent\"
android:layout_height=\"wrap_content\"
android:adjustViewBounds=\"true\"
android:src=\"@mipmap/ic_launcher\" /&gt;</pre>
<p>And it is now done !</p>
<h2 class=\"section-heading\">Make it easy with AdjustableImageView Library</h2>
<p>We know that it is such a boring task creating a file, copy&nbsp;the code, paste it, reformat, check if&nbsp;everything is right, blah blah blah.</p>
<p>Your life is now 10 times easier with the library dependency we prepared for you. It is now live on jcenter. Once you add the dependency to your project,&nbsp;<code>AdjustableImageView</code>&nbsp;and&nbsp;<code>AdjustableImageButton</code>&nbsp;will be ready to make your day. Source codes of this library&nbsp;are hosted on&nbsp;<a href=\"https://github.com/nuuneoi/AdjustableImageView\" target=\"_blank\">GitHub</a>. Please feel free to have a look.</p>
<p>Here is the gradle dependency. Just simply add this line to your<code>build.gradle</code></p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">dependencies {
compile 'com.inthecheesefactory.thecheeselibrary:adjustable-imageview:1.0.0'
}</pre>
<p><code>AdjustableImageView</code>&nbsp;and&nbsp;<code>AdjustableImageButton</code>&nbsp;are now ready to use&nbsp;inside&nbsp;<code><span class=\"pl-ent\">com</span>.inthecheesefactory.thecheeselibrary.widget.*</code>&nbsp;package.</p>
<p>Simply replace ImageView and&nbsp;ImageButton&nbsp;with those classes provided by the library.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"
xmlns:tools=\"http://schemas.android.com/tools\" android:layout_width=\"match_parent\"
android:layout_height=\"match_parent\"
android:orientation=\"vertical\"
tools:context=\".MainActivity\"&gt;
&lt;ScrollView
android:layout_width=\"match_parent\"
android:layout_height=\"match_parent\"
android:fillViewport=\"true\"&gt;
&lt;LinearLayout android:layout_width=\"match_parent\"
android:layout_height=\"match_parent\"
android:orientation=\"vertical\"&gt;
&lt;com.inthecheesefactory.thecheeselibrary.widget.AdjustableImageView
android:layout_width=\"match_parent\"
android:layout_height=\"wrap_content\"
android:adjustViewBounds=\"true\"
android:src=\"@mipmap/ic_launcher\"/&gt;
&lt;com.inthecheesefactory.thecheeselibrary.widget.AdjustableImageView
android:layout_width=\"match_parent\"
android:layout_height=\"wrap_content\"
android:adjustViewBounds=\"true\"
android:src=\"@mipmap/ic_launcher\"/&gt;
&lt;/LinearLayout&gt;
&lt;/ScrollView&gt;
&lt;/LinearLayout&gt;
</pre>
<p>As a result, ImageView is now scaled up perfectly no matter which Android version the application&nbsp;is running on.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/adjustableimageview/final.png\" alt=\"final\" width=\"600\" /></p>
<p>This is a good&nbsp;example why we should install multiple SDK Platforms in the machine and not just the latest one. Since if you want to let Android Studio preview your layout with&nbsp;specific Android version, you need to install SDK Platform for that version or it wouldn't be listed as a choice in preview pane. Per my suggestion, you should install every single SDK Platform from&nbsp;API Level 14 on. Loss some disk space but what that you get back&nbsp;is worthy.</p>" "http://inthecheesefactory.com/blog/correct-imageview-adjustviewbounds-with-adjustable-imageview/en" (21763 17432) old 21 nil nil ((title nil "
				Correct the ImageView's adjustViewBounds behaviour on API Level 17 and below with AdjustableImageView			") (description nil "
				<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/adjustableimageview/cover.jpg\" /></p> 
<p>A requirement that almost every single application has is <strong>\"I want to scale up an ImageView proportionally to fit its parent. How can&nbsp;I do that?\"&nbsp;</strong>Like this:</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/adjustableimageview/adjustviewbounds.jpg\" alt=\"adjustviewbounds\" width=\"600\" /></p>
<p>Actually ImageView has already come with this capability. You can just simply set <code>android:adjustViewBounds</code>&nbsp;to&nbsp;<code>true</code>&nbsp;and that's all.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;ImageView
    android:layout_width=\"match_parent\"
    android:layout_height=\"wrap_content\"
    android:adjustViewBounds=\"true\"
    android:src=\"@mipmap/ic_launcher\" /&gt;</pre>
<p>Here is the result.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/adjustableimageview/22_1.png\" alt=\"22_1\" width=\"600\" /></p>
<p>Everything looks fine? Actually not. If you switch your preview version to API Level 17 or below, you will see that ImageView&nbsp;doesn't scale up anymore.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/adjustableimageview/17_1.png\" alt=\"17_1\" width=\"600\" /></p>
<p>It is not a bug but a correct behaviour that is&nbsp;officially&nbsp;noted&nbsp;in the&nbsp;<a href=\"http://developer.android.com/reference/android/widget/ImageView.html#setAdjustViewBounds(boolean)\" target=\"_blank\">documentation</a>.</p>
<blockquote><strong>Note:</strong> If the application targets API level 17 or lower, adjustViewBounds will allow the drawable to shrink the view bounds, but not grow to fill available measured space in all cases. This is for compatibility with legacy <code><a href=\"http://developer.android.com/reference/android/view/View.MeasureSpec.html\">MeasureSpec</a></code> and <code><a href=\"http://developer.android.com/reference/android/widget/RelativeLayout.html\">RelativeLayout</a></code> behavior.</blockquote>
<p>It means that in API Level 17 and below, the maximum width and maximum height are bounded to the size of image defined in <code>android:src</code>. As a result, it happens like picture above.</p>
<p>Have a small look at Market Share of Android Platform Versions. It appears that Android phone running API Level 17 and below takes almost 50% share.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/adjustableimageview/platformversions.png\" alt=\"platformversions\" /></p>
<p>It is not a good solution to set minSdkVersion to 18 just to avoid this problem.</p>
<p>It is far better to modify some ImageView's source&nbsp;code to give it&nbsp;an API Level 18+'s behavior and use it instead of a normal ImageView. Here it comes, a Custom ImageView that does the job !</p>
<pre class=\"brush:java;auto-links:false;toolbar:false\" contenteditable=\"false\">import android.content.Context;
import android.graphics.drawable.Drawable;
import android.util.AttributeSet;
import android.view.ViewGroup;
import android.view.ViewParent;
import android.widget.ImageView;

/**
 * Created by nuuneoi on 2/17/15 AD.
 */
public class AdjustableImageView extends ImageView {

    boolean mAdjustViewBounds;

    public AdjustableImageView(Context context) {
        super(context);
    }

    public AdjustableImageView(Context context, AttributeSet attrs) {
        super(context, attrs);
    }

    public AdjustableImageView(Context context, AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
    }

    @Override
    public void setAdjustViewBounds(boolean adjustViewBounds) {
        mAdjustViewBounds = adjustViewBounds;
        super.setAdjustViewBounds(adjustViewBounds);
    }

    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        Drawable mDrawable = getDrawable();
        if (mDrawable == null) {
            super.onMeasure(widthMeasureSpec, heightMeasureSpec);
            return;
        }

        if (mAdjustViewBounds) {
            int mDrawableWidth = mDrawable.getIntrinsicWidth();
            int mDrawableHeight = mDrawable.getIntrinsicHeight();
            int heightSize = MeasureSpec.getSize(heightMeasureSpec);
            int widthSize = MeasureSpec.getSize(widthMeasureSpec);
            int heightMode = MeasureSpec.getMode(heightMeasureSpec);
            int widthMode = MeasureSpec.getMode(widthMeasureSpec);

            if (heightMode == MeasureSpec.EXACTLY &amp;&amp; widthMode != MeasureSpec.EXACTLY) {
                // Fixed Height &amp; Adjustable Width
                int height = heightSize;
                int width = height * mDrawableWidth / mDrawableHeight;
                if (isInScrollingContainer())
                    setMeasuredDimension(width, height);
                else
                    setMeasuredDimension(Math.min(width, widthSize), Math.min(height, heightSize));
            } else if (widthMode == MeasureSpec.EXACTLY &amp;&amp; heightMode != MeasureSpec.EXACTLY) {
                // Fixed Width &amp; Adjustable Height
                int width = widthSize;
                int height = width * mDrawableHeight / mDrawableWidth;
                if (isInScrollingContainer())
                    setMeasuredDimension(width, height);
                else
                    setMeasuredDimension(Math.min(width, widthSize), Math.min(height, heightSize));
            } else {
                super.onMeasure(widthMeasureSpec, heightMeasureSpec);
            }
        } else {
            super.onMeasure(widthMeasureSpec, heightMeasureSpec);
        }
    }

    private boolean isInScrollingContainer() {
        ViewParent p = getParent();
        while (p != null &amp;&amp; p instanceof ViewGroup) {
            if (((ViewGroup) p).shouldDelayChildPressedState()) {
                return true;
            }
            p = p.getParent();
        }
        return false;
    }
}
</pre>
<p>The way these codes work is&nbsp;straightforward. It would calculate the height proportionally in case the width is fixed and vice versa inside <code>onMeasure</code>. In case this <code>AdjustableImageView</code> object is placed inside non-scrollable container, width and height would be limited to the space left in parent. Otherwise, it would be scaled up without any restriction.</p>
<p>To use it, simply change <code>ImageView</code> to <code>com.inthecheesefactory.thecheeselibrary.widget.AdjustableImageView</code>&nbsp;in the layout xml.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;com.inthecheesefactory.thecheeselibrary.widget.AdjustableImageView
    android:layout_width=\"match_parent\"
    android:layout_height=\"wrap_content\"
    android:adjustViewBounds=\"true\"
    android:src=\"@mipmap/ic_launcher\" /&gt;</pre>
<p>And it is now done !</p>
<h2 class=\"section-heading\">Make it easy with AdjustableImageView Library</h2>
<p>We know that it is such a boring task creating a file, copy&nbsp;the code, paste it, reformat, check if&nbsp;everything is right, blah blah blah.</p>
<p>Your life is now 10 times easier with the library dependency we prepared for you. It is now live on jcenter. Once you add the dependency to your project,&nbsp;<code>AdjustableImageView</code>&nbsp;and&nbsp;<code>AdjustableImageButton</code>&nbsp;will be ready to make your day. Source codes of this library&nbsp;are hosted on&nbsp;<a href=\"https://github.com/nuuneoi/AdjustableImageView\" target=\"_blank\">GitHub</a>. Please feel free to have a look.</p>
<p>Here is the gradle dependency. Just simply add this line to your<code>build.gradle</code></p>
<pre class=\"brush:html;auto-links:false;toolbar:false\" contenteditable=\"false\">dependencies {
    compile 'com.inthecheesefactory.thecheeselibrary:adjustable-imageview:1.0.0'
}</pre>
<p><code>AdjustableImageView</code>&nbsp;and&nbsp;<code>AdjustableImageButton</code>&nbsp;are now ready to use&nbsp;inside&nbsp;<code><span class=\"pl-ent\">com</span>.inthecheesefactory.thecheeselibrary.widget.*</code>&nbsp;package.</p>
<p>Simply replace ImageView and&nbsp;ImageButton&nbsp;with those classes provided by the library.</p>
<pre class=\"brush:xml;auto-links:false;toolbar:false\" contenteditable=\"false\">&lt;LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"
    xmlns:tools=\"http://schemas.android.com/tools\" android:layout_width=\"match_parent\"
    android:layout_height=\"match_parent\"
    android:orientation=\"vertical\"
    tools:context=\".MainActivity\"&gt;

    &lt;ScrollView
        android:layout_width=\"match_parent\"
        android:layout_height=\"match_parent\"
        android:fillViewport=\"true\"&gt;

        &lt;LinearLayout android:layout_width=\"match_parent\"
            android:layout_height=\"match_parent\"
            android:orientation=\"vertical\"&gt;

            &lt;com.inthecheesefactory.thecheeselibrary.widget.AdjustableImageView
                android:layout_width=\"match_parent\"
                android:layout_height=\"wrap_content\"
                android:adjustViewBounds=\"true\"
                android:src=\"@mipmap/ic_launcher\"/&gt;

            &lt;com.inthecheesefactory.thecheeselibrary.widget.AdjustableImageView
                android:layout_width=\"match_parent\"
                android:layout_height=\"wrap_content\"
                android:adjustViewBounds=\"true\"
                android:src=\"@mipmap/ic_launcher\"/&gt;
        &lt;/LinearLayout&gt;

    &lt;/ScrollView&gt;

&lt;/LinearLayout&gt;
</pre>
<p>As a result, ImageView is now scaled up perfectly no matter which Android version the application&nbsp;is running on.</p>
<p><img class=\"drop-shadow\" style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/adjustableimageview/final.png\" alt=\"final\" width=\"600\" /></p>
<p>This is a good&nbsp;example why we should install multiple SDK Platforms in the machine and not just the latest one. Since if you want to let Android Studio preview your layout with&nbsp;specific Android version, you need to install SDK Platform for that version or it wouldn't be listed as a choice in preview pane. Per my suggestion, you should install every single SDK Platform from&nbsp;API Level 14 on. Loss some disk space but what that you get back&nbsp;is worthy.</p>			") (link nil "http://inthecheesefactory.com/blog/correct-imageview-adjustviewbounds-with-adjustable-imageview/en") (pubDate nil "
				Fri, 13 Mar 2015 20:10:00 +0000			") (guid nil "http://inthecheesefactory.com/blog/correct-imageview-adjustviewbounds-with-adjustable-imageview/en"))) ("Turn anything into a Pokemon with Hipception, a new photo decoration trend. Download FREE now from App Store and Google Play Store." "<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/hipception/cover2.jpg\" /></p>
<p>After being an outsource developer and also writing the article related to application development techniques for a big while. Now it's time to release our own application !.&nbsp;<strong>\"Hipception\"</strong>, which stands for Hipster + Inception, a photo decoration for hipster allows you to apply popular application's frame to your photo in seconds !</p>
<p>To make it be more clear on what it is ... here are the sample photos of Hipception ~~~~</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/hipception/2016-07-24-11-21-05.jpg\" alt=\"\" width=\"960\" height=\"540\" /></p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/hipception/2016-07-24-11-37-12.jpg\" alt=\"\" width=\"960\" height=\"540\" /></p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/hipception/2016-07-24-11-39-26.jpg\" alt=\"\" width=\"960\" height=\"540\" /></p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/hipception/2016-07-24-11-38-15.jpg\" alt=\"\" width=\"960\" height=\"540\" /></p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/hipception/2016-07-24-11-40-48.jpg\" alt=\"\" width=\"960\" height=\"540\" /></p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/hipception/2016-07-24-11-42-08.jpg\" alt=\"\" width=\"960\" height=\"540\" /></p>
<p>This is what we call <strong>\"Hipception\"</strong> photo style. The new trend of photo decoration nowadays.</p>
<p>As you can see from samples above. Applying&nbsp;an application's frame on your photo could obviously make your photo significantly more magnificent. <strong>Hipception</strong> <strong>application</strong> was developed for this ! With this application, you could create a Hipception-styled photo in seconds. It is very easy to use. No manual needed !</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/hipception/ss4.jpg\" alt=\"\" width=\"960\" height=\"569\" /></p>
<p>There are so many options that you can adjust such as:</p>
<p style=\"padding-left: 30px;\">- There are 5 selectable frames:&nbsp;<strong>Pokemon Go</strong>, <strong>Instagram</strong>, <strong>Facebook</strong>, <strong>Twitter</strong> and&nbsp;<strong>Facetime.</strong></p>
<p style=\"padding-left: 30px;\">- Each frame has its own adjustable parameters, for example, Monster's name and its CP could be changed in Pokemon Go frame while username, profile picture and like count could be changed per your need in Instagram frame.</p>
<p style=\"padding-left: 30px;\">- There are 11 inside-frame photo effects that you can choose.</p>
<p style=\"padding-left: 30px;\">- 5 different&nbsp;background styles could be chosen.</p>
<p style=\"padding-left: 30px;\">- Background blurness level could be changed as well.</p>
<p>Hipception application is now available for free on both <strong>Google Play Store</strong> and <strong>App Store</strong>. It works on&nbsp;any Android and iOS devices out there&nbsp;=D. Download now !</p>
<p style=\"text-align: center;\"><a href=\"https://play.google.com/store/apps/details?id=com.inthecheesefactory.hipception\" target=\"_blank\"><img src=\"http://inthecheesefactory.com/uploads/source/availablegoogleplay.png\" alt=\"\" width=\"200\" height=\"66\" /></a>&nbsp;<a href=\"https://itunes.apple.com/th/app/hipception/id1055369686?mt=8\" target=\"_blank\"><img src=\"http://inthecheesefactory.com/uploads/source/availableappstore.png\" alt=\"\" width=\"200\" height=\"67\" /></a></p>
<p>I wish that you like our very first own application. It would be great if you could&nbsp;give us a rating and review on the store. We love to see your feedback !</p>" "http://inthecheesefactory.com/blog/hipception-photo-decoration-app-for-hipster/en" (22420 17240) new 1 nil nil ((title nil "
				Turn anything into a Pokemon with Hipception, a new photo decoration trend. Download FREE now from App Store and Google Play Store.			") (description nil "
				<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/hipception/cover2.jpg\" /></p> 
<p>After being an outsource developer and also writing the article related to application development techniques for a big while. Now it's time to release our own application !.&nbsp;<strong>\"Hipception\"</strong>, which stands for Hipster + Inception, a photo decoration for hipster allows you to apply popular application's frame to your photo in seconds !</p>
<p>To make it be more clear on what it is ... here are the sample photos of Hipception ~~~~</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/hipception/2016-07-24-11-21-05.jpg\" alt=\"\" width=\"960\" height=\"540\" /></p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/hipception/2016-07-24-11-37-12.jpg\" alt=\"\" width=\"960\" height=\"540\" /></p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/hipception/2016-07-24-11-39-26.jpg\" alt=\"\" width=\"960\" height=\"540\" /></p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/hipception/2016-07-24-11-38-15.jpg\" alt=\"\" width=\"960\" height=\"540\" /></p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/hipception/2016-07-24-11-40-48.jpg\" alt=\"\" width=\"960\" height=\"540\" /></p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/hipception/2016-07-24-11-42-08.jpg\" alt=\"\" width=\"960\" height=\"540\" /></p>
<p>This is what we call <strong>\"Hipception\"</strong> photo style. The new trend of photo decoration nowadays.</p>
<p>As you can see from samples above. Applying&nbsp;an application's frame on your photo could obviously make your photo significantly more magnificent. <strong>Hipception</strong> <strong>application</strong> was developed for this ! With this application, you could create a Hipception-styled photo in seconds. It is very easy to use. No manual needed !</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/hipception/ss4.jpg\" alt=\"\" width=\"960\" height=\"569\" /></p>
<p>There are so many options that you can adjust such as:</p>
<p style=\"padding-left: 30px;\">- There are 5 selectable frames:&nbsp;<strong>Pokemon Go</strong>, <strong>Instagram</strong>, <strong>Facebook</strong>, <strong>Twitter</strong> and&nbsp;<strong>Facetime.</strong></p>
<p style=\"padding-left: 30px;\">- Each frame has its own adjustable parameters, for example, Monster's name and its CP could be changed in Pokemon Go frame while username, profile picture and like count could be changed per your need in Instagram frame.</p>
<p style=\"padding-left: 30px;\">- There are 11 inside-frame photo effects that you can choose.</p>
<p style=\"padding-left: 30px;\">- 5 different&nbsp;background styles could be chosen.</p>
<p style=\"padding-left: 30px;\">- Background blurness level could be changed as well.</p>
<p>Hipception application is now available for free on both <strong>Google Play Store</strong> and <strong>App Store</strong>. It works on&nbsp;any Android and iOS devices out there&nbsp;=D. Download now !</p>
<p style=\"text-align: center;\"><a href=\"https://play.google.com/store/apps/details?id=com.inthecheesefactory.hipception\" target=\"_blank\"><img src=\"http://inthecheesefactory.com/uploads/source/availablegoogleplay.png\" alt=\"\" width=\"200\" height=\"66\" /></a>&nbsp;<a href=\"https://itunes.apple.com/th/app/hipception/id1055369686?mt=8\" target=\"_blank\"><img src=\"http://inthecheesefactory.com/uploads/source/availableappstore.png\" alt=\"\" width=\"200\" height=\"67\" /></a></p>
<p>I wish that you like our very first own application. It would be great if you could&nbsp;give us a rating and review on the store. We love to see your feedback !</p>			") (link nil "http://inthecheesefactory.com/blog/hipception-photo-decoration-app-for-hipster/en") (pubDate nil "
				Sun, 24 Jul 2016 04:26:00 +0000			") (guid nil "http://inthecheesefactory.com/blog/hipception-photo-decoration-app-for-hipster/en"))) ("file:// scheme is now not allowed to be attached with Intent on targetSdkVersion 24 (Android Nougat). And here is the solution." "<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/fileuri/cover.jpg\" /></p>
<p>Android Nougat is almost be publicly released. And as an Android developer, we need to prepare ourself to adjust <strong>targetSdkVersion</strong> to the latest one, <span style=\"text-decoration: underline;\">24</span>, to let everything works perfectly on the newest release of Android.</p>
<p>And as always, everytime we adjust targetSdkVersion, we need to check and make sure that every single part&nbsp;of our&nbsp;code works perfectly fine. If you just simply change the number, I could say that your application is taking a high risk of crashing or malfunction. In this case, when you change your app's targetSdkVersion to 24, we need to check that every single function works flawlessly on Android Nougat (24).</p>
<p>And this is one of the checklist you need to mark done before releasing your new version. There is one big security change on Android N like quoted below:</p>
<blockquote>Passing&nbsp;<code>file://</code>&nbsp;URIs outside the package domain may leave the receiver with an unaccessible path. Therefore, attempts to pass a&nbsp;<code>file://</code>&nbsp;URI trigger a&nbsp;<code>FileUriExposedException</code>. The recommended way to share the content of a private file is using the&nbsp;<code><a href=\"https://developer.android.com/reference/android/support/v4/content/FileProvider.html\">FileProvider</a></code>.</blockquote>
<p>Summarily, <code>file://</code>&nbsp;is not allowed to attach with Intent anymore or it will throw&nbsp;<code>FileUriExposedException</code>&nbsp;which may cause your app crash immediately called.</p>
<p>This blog will talk about this issue and also about the solution how to make it work on Android N.</p>
<h2 class=\"section-heading\">Real example with a crashing problem</h2>
<p>You may be curious which situation that can really cause the problem. So to make it&nbsp;be easy to you all, let me show you a real usage example that causes crashing. <strong>The easiest example is the way we take a photo through Intent with&nbsp;<span style=\"text-decoration: underline;\"><code>ACTION_IMAGE_CAPTURE</code></span>&nbsp;type.</strong>&nbsp;Previously we just pass the target file path with&nbsp;<code>file://</code>&nbsp; format as an Intent extra which works fine on Android Pre-N but will just simply crash on Android N and above.</p>
<p>Here is the code. Please note that you can find and download it from&nbsp;<a href=\"https://github.com/nuuneoi/Lab-Intent-FileProvider\" target=\"_blank\">GitHub</a>.</p>
<pre class=\"language-java\"><code>@RuntimePermissions
public class MainActivity extends AppCompatActivity implements View.OnClickListener {
private static final int REQUEST_TAKE_PHOTO = 1;
Button btnTakePhoto;
ImageView ivPreview;
String mCurrentPhotoPath;
@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_main);
initInstances();
}
private void initInstances() {
btnTakePhoto = (Button) findViewById(R.id.btnTakePhoto);
ivPreview = (ImageView) findViewById(R.id.ivPreview);
btnTakePhoto.setOnClickListener(this);
}
/////////////////////
// OnClickListener //
/////////////////////
@Override
public void onClick(View view) {
if (view == btnTakePhoto) {
MainActivityPermissionsDispatcher.startCameraWithCheck(this);
}
}
////////////
// Camera //
////////////
@NeedsPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE)
void startCamera() {
try {
dispatchTakePictureIntent();
} catch (IOException e) {
}
}
@OnShowRationale(Manifest.permission.WRITE_EXTERNAL_STORAGE)
void showRationaleForCamera(final PermissionRequest request) {
new AlertDialog.Builder(this)
.setMessage(\"Access to External Storage is required\")
.setPositiveButton(\"Allow\", new DialogInterface.OnClickListener() {
@Override
public void onClick(DialogInterface dialogInterface, int i) {
request.proceed();
}
})
.setNegativeButton(\"Deny\", new DialogInterface.OnClickListener() {
@Override
public void onClick(DialogInterface dialogInterface, int i) {
request.cancel();
}
})
.show();
}
@Override
protected void onActivityResult(int requestCode, int resultCode, Intent data) {
super.onActivityResult(requestCode, resultCode, data);
if (requestCode == REQUEST_TAKE_PHOTO &amp;&amp; resultCode == RESULT_OK) {
// Show the thumbnail on ImageView
Uri imageUri = Uri.parse(mCurrentPhotoPath);
File file = new File(imageUri.getPath());
try {
InputStream ims = new FileInputStream(file);
ivPreview.setImageBitmap(BitmapFactory.decodeStream(ims));
} catch (FileNotFoundException e) {
return;
}
// ScanFile so it will be appeared on Gallery
MediaScannerConnection.scanFile(MainActivity.this,
new String[]{imageUri.getPath()}, null,
new MediaScannerConnection.OnScanCompletedListener() {
public void onScanCompleted(String path, Uri uri) {
}
});
}
}
@Override
public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
super.onRequestPermissionsResult(requestCode, permissions, grantResults);
MainActivityPermissionsDispatcher.onRequestPermissionsResult(this, requestCode, grantResults);
}
private File createImageFile() throws IOException {
// Create an image file name
String timeStamp = new SimpleDateFormat(\"yyyyMMdd_HHmmss\").format(new Date());
String imageFileName = \"JPEG_\" + timeStamp + \"_\";
File storageDir = new File(Environment.getExternalStoragePublicDirectory(
Environment.DIRECTORY_DCIM), \"Camera\");
File image = File.createTempFile(
imageFileName,  /* prefix */
\".jpg\",         /* suffix */
storageDir      /* directory */
);
// Save a file: path for use with ACTION_VIEW intents
mCurrentPhotoPath = \"file:\" + image.getAbsolutePath();
return image;
}
private void dispatchTakePictureIntent() throws IOException {
Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
// Ensure that there's a camera activity to handle the intent
if (takePictureIntent.resolveActivity(getPackageManager()) != null) {
// Create the File where the photo should go
File photoFile = null;
try {
photoFile = createImageFile();
} catch (IOException ex) {
// Error occurred while creating the File
return;
}
// Continue only if the File was successfully created
if (photoFile != null) {
Uri photoURI = Uri.fromFile(createImageFile());
takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, photoURI);
startActivityForResult(takePictureIntent, REQUEST_TAKE_PHOTO);
}
}
}
}</code></pre>
<p>When code above is run, there will be a Button shown on screen. Once Button is clicked, camera app will be launched to let you take a photo. After everything is done, the taken photo will be shown on the ImageView as a result.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/fileuri/screenshot777.jpg\" alt=\"\" width=\"960\" height=\"590\" /></p>
<p>What the code does is quite straightforward. Generated file path pointed to DCIM folder under External Storage will be sent to camera app in&nbsp;<code>file://</code> format and will be used as file path of a photo taken.</p>
<p>Code above works fine even on Android Nougat since targetSdkVersion is still be&nbsp;23. Now let's change it to 24.</p>
<pre class=\"language-groovy\"><code>android {
...
defaultConfig {
...
targetSdkVersion 24
}
}
</code></pre>
<p>Here is the result. It still works on Android Pre-N but it appears to&nbsp;cause crashing on Android Nougat like this:</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/fileuri/screenshot1.jpg\" alt=\"\" width=\"480\" height=\"501\" /></p>
<p>And here is the stacktrace.</p>
<pre class=\"language-markup\"><code>FATAL EXCEPTION: main
Process: com.inthecheesefactory.lab.intent_fileprovider, PID: 28905
android.os.FileUriExposedException: file:///storage/emulated/0/DCIM/Camera/JPEG_20160723_124304_642070113.jpg exposed beyond app through ClipData.Item.getUri()
at android.os.StrictMode.onFileUriExposed(StrictMode.java:1799)
at android.net.Uri.checkFileUriExposed(Uri.java:2346)
at android.content.ClipData.prepareToLeaveProcess(ClipData.java:832)
...</code></pre>
<p>The reason is quite obvious. <code>file://</code> is not allowed as an attached URI in Intent or&nbsp;<code>FileUriExposedException</code>&nbsp;would be thrown.</p>
<p>And this is a&nbsp;big issue that you have to make sure that all code related to this case has already been fixed&nbsp;before releasing a new version with targetSdkVersion 24 or your app may crash on some of your user's&nbsp;device.</p>
<h2 class=\"section-heading\">Why Nougat does not allow passing&nbsp;file:// with Intent anymore?</h2>
<p>You may be curious why Android team decide to change this behavior. Actually there is a good reason behind.</p>
<p>If file path is sent to the target application (Camera app in this case), file will be fully accessed through the Camera app's process not the sender one.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/fileuri/withfile.jpg\" alt=\"\" width=\"600\" height=\"533\" /></p>
<p>But let's consider&nbsp;thoroughly, actually Camera is launched by our application to take a photo and save as a file on our app's behalf.&nbsp;So the access right to that file should be our app's not Camera's. Every operation did with the file should be done through our application not by Camera app itself.</p>
<p>And that's why <code>file://</code>&nbsp;is now prohibited on targetSdkVersion 24 to force every developer to&nbsp;do&nbsp;this task&nbsp;in the proper way.</p>
<h2 class=\"section-heading\">Solution</h2>
<p>So if <code>file://</code> is not allowed anymore,&nbsp;which approach should we go for? The answer is we should send the URI through <code>content://</code> scheme instead which is the URI scheme for <strong>Content Provider</strong>. In this case, we would like to share an access to a file through our app so <code>FileProvider</code> is needed to be implemented. Flow is now changed like below:</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/fileuri/withfileprovider.jpg\" alt=\"\" width=\"600\" height=\"533\" /></p>
<p>And now, with FileProvider,&nbsp;file operation would be done through our app process like it supposes to be !</p>
<p>It is quite easy to implement FileProvider on your application. First you need to add a FileProvider <code>&lt;provider&gt;</code> tag in&nbsp;<code>AndroidManifest.xml</code>&nbsp;under&nbsp;<code>&lt;application&gt;</code>&nbsp;tag like below:</p>
<p><strong>AndroidManifest.xml</strong></p>
<pre class=\"language-markup\"><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;
&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"
...
&lt;application
...
&lt;provider
android:name=\"android.support.v4.content.FileProvider\"
android:authorities=\"${applicationId}.provider\"
android:exported=\"false\"
android:grantUriPermissions=\"true\"&gt;
&lt;meta-data
android:name=\"android.support.FILE_PROVIDER_PATHS\"
android:resource=\"@xml/provider_paths\"/&gt;
&lt;/provider&gt;
&lt;/application&gt;
&lt;/manifest&gt;
</code></pre>
<p>And then create a <code>provider_paths.xml</code> file in&nbsp;<code>xml</code> folder under&nbsp;<code>res</code> folder. Folder may be needed to create&nbsp;if it doesn't exist.</p>
<p>The content of the file is shown below. It describes that we would like to share access to the External Storage at root folder <strong>(path=\".\")</strong> with the name <strong>external_files</strong>.</p>
<p><strong>res/xml/provider_paths.xml</strong></p>
<pre class=\"language-markup\"><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;
&lt;paths xmlns:android=\"http://schemas.android.com/apk/res/android\"&gt;
&lt;external-path name=\"external_files\" path=\".\"/&gt;
&lt;/paths&gt;</code></pre>
<p>Done! FileProvider is now declared and be ready to use.</p>
<p>The final step is to change the line of code below in&nbsp;<code>MainActivity.java</code></p>
<pre class=\"language-java\"><code>Uri photoURI = Uri.fromFile(createImageFile());</code></pre>
<p>to</p>
<pre class=\"language-java\"><code>Uri photoURI = FileProvider.getUriForFile(MainActivity.this,
BuildConfig.APPLICATION_ID + \".provider\",
createImageFile());
</code></pre>
<p>And .... done ! Your application should now work perfectly fine on any Android version including Android Nougat. Yah !</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/fileuri/screenshot548.jpg\" alt=\"\" width=\"480\" height=\"498\" /></p>
<h2 class=\"section-heading\">How about the existed app launched previously?</h2>
<p>As you can see from the experiment result above. This behavior will happen only&nbsp;when you change your app's targetSdkVersion to 24 or above. So if your previously launched application was set the targetSdkVersion to 23 or lower, it supposes not to be a problem even on Android Nougat. <code>file://</code>&nbsp;should&nbsp;still works perfectly fine.</p>
<p>Anyway, to match the Android Best Practice, when there is a new API Level, we better always change targetSdkVersion to the latest one for the best user experience. =)</p>" "http://inthecheesefactory.com/blog/how-to-share-access-to-file-with-fileprovider-on-android-nougat/en" (22419 9876) new 2 nil nil ((title nil "
				file:// scheme is now not allowed to be attached with Intent on targetSdkVersion 24 (Android Nougat). And here is the solution.			") (description nil "
				<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/fileuri/cover.jpg\" /></p> 
<p>Android Nougat is almost be publicly released. And as an Android developer, we need to prepare ourself to adjust <strong>targetSdkVersion</strong> to the latest one, <span style=\"text-decoration: underline;\">24</span>, to let everything works perfectly on the newest release of Android.</p>
<p>And as always, everytime we adjust targetSdkVersion, we need to check and make sure that every single part&nbsp;of our&nbsp;code works perfectly fine. If you just simply change the number, I could say that your application is taking a high risk of crashing or malfunction. In this case, when you change your app's targetSdkVersion to 24, we need to check that every single function works flawlessly on Android Nougat (24).</p>
<p>And this is one of the checklist you need to mark done before releasing your new version. There is one big security change on Android N like quoted below:</p>
<blockquote>Passing&nbsp;<code>file://</code>&nbsp;URIs outside the package domain may leave the receiver with an unaccessible path. Therefore, attempts to pass a&nbsp;<code>file://</code>&nbsp;URI trigger a&nbsp;<code>FileUriExposedException</code>. The recommended way to share the content of a private file is using the&nbsp;<code><a href=\"https://developer.android.com/reference/android/support/v4/content/FileProvider.html\">FileProvider</a></code>.</blockquote>
<p>Summarily, <code>file://</code>&nbsp;is not allowed to attach with Intent anymore or it will throw&nbsp;<code>FileUriExposedException</code>&nbsp;which may cause your app crash immediately called.</p>
<p>This blog will talk about this issue and also about the solution how to make it work on Android N.</p>
<h2 class=\"section-heading\">Real example with a crashing problem</h2>
<p>You may be curious which situation that can really cause the problem. So to make it&nbsp;be easy to you all, let me show you a real usage example that causes crashing. <strong>The easiest example is the way we take a photo through Intent with&nbsp;<span style=\"text-decoration: underline;\"><code>ACTION_IMAGE_CAPTURE</code></span>&nbsp;type.</strong>&nbsp;Previously we just pass the target file path with&nbsp;<code>file://</code>&nbsp; format as an Intent extra which works fine on Android Pre-N but will just simply crash on Android N and above.</p>
<p>Here is the code. Please note that you can find and download it from&nbsp;<a href=\"https://github.com/nuuneoi/Lab-Intent-FileProvider\" target=\"_blank\">GitHub</a>.</p>
<pre class=\"language-java\"><code>@RuntimePermissions
public class MainActivity extends AppCompatActivity implements View.OnClickListener {

    private static final int REQUEST_TAKE_PHOTO = 1;

    Button btnTakePhoto;
    ImageView ivPreview;

    String mCurrentPhotoPath;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        initInstances();
    }

    private void initInstances() {
        btnTakePhoto = (Button) findViewById(R.id.btnTakePhoto);
        ivPreview = (ImageView) findViewById(R.id.ivPreview);

        btnTakePhoto.setOnClickListener(this);
    }

    /////////////////////
    // OnClickListener //
    /////////////////////

    @Override
    public void onClick(View view) {
        if (view == btnTakePhoto) {
            MainActivityPermissionsDispatcher.startCameraWithCheck(this);
        }
    }

    ////////////
    // Camera //
    ////////////

    @NeedsPermission(Manifest.permission.WRITE_EXTERNAL_STORAGE)
    void startCamera() {
        try {
            dispatchTakePictureIntent();
        } catch (IOException e) {
        }
    }

    @OnShowRationale(Manifest.permission.WRITE_EXTERNAL_STORAGE)
    void showRationaleForCamera(final PermissionRequest request) {
        new AlertDialog.Builder(this)
                .setMessage(\"Access to External Storage is required\")
                .setPositiveButton(\"Allow\", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialogInterface, int i) {
                        request.proceed();
                    }
                })
                .setNegativeButton(\"Deny\", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialogInterface, int i) {
                        request.cancel();
                    }
                })
                .show();
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == REQUEST_TAKE_PHOTO &amp;&amp; resultCode == RESULT_OK) {
            // Show the thumbnail on ImageView
            Uri imageUri = Uri.parse(mCurrentPhotoPath);
            File file = new File(imageUri.getPath());
            try {
                InputStream ims = new FileInputStream(file);
                ivPreview.setImageBitmap(BitmapFactory.decodeStream(ims));
            } catch (FileNotFoundException e) {
                return;
            }

            // ScanFile so it will be appeared on Gallery
            MediaScannerConnection.scanFile(MainActivity.this,
                    new String[]{imageUri.getPath()}, null,
                    new MediaScannerConnection.OnScanCompletedListener() {
                        public void onScanCompleted(String path, Uri uri) {
                        }
                    });
        }
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        MainActivityPermissionsDispatcher.onRequestPermissionsResult(this, requestCode, grantResults);
    }

    private File createImageFile() throws IOException {
        // Create an image file name
        String timeStamp = new SimpleDateFormat(\"yyyyMMdd_HHmmss\").format(new Date());
        String imageFileName = \"JPEG_\" + timeStamp + \"_\";
        File storageDir = new File(Environment.getExternalStoragePublicDirectory(
                Environment.DIRECTORY_DCIM), \"Camera\");
        File image = File.createTempFile(
                imageFileName,  /* prefix */
                \".jpg\",         /* suffix */
                storageDir      /* directory */
        );

        // Save a file: path for use with ACTION_VIEW intents
        mCurrentPhotoPath = \"file:\" + image.getAbsolutePath();
        return image;
    }

    private void dispatchTakePictureIntent() throws IOException {
        Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
        // Ensure that there's a camera activity to handle the intent
        if (takePictureIntent.resolveActivity(getPackageManager()) != null) {
            // Create the File where the photo should go
            File photoFile = null;
            try {
                photoFile = createImageFile();
            } catch (IOException ex) {
                // Error occurred while creating the File
                return;
            }
            // Continue only if the File was successfully created
            if (photoFile != null) {
                Uri photoURI = Uri.fromFile(createImageFile());
                takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, photoURI);
                startActivityForResult(takePictureIntent, REQUEST_TAKE_PHOTO);
            }
        }
    }
}</code></pre>
<p>When code above is run, there will be a Button shown on screen. Once Button is clicked, camera app will be launched to let you take a photo. After everything is done, the taken photo will be shown on the ImageView as a result.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/fileuri/screenshot777.jpg\" alt=\"\" width=\"960\" height=\"590\" /></p>
<p>What the code does is quite straightforward. Generated file path pointed to DCIM folder under External Storage will be sent to camera app in&nbsp;<code>file://</code> format and will be used as file path of a photo taken.</p>
<p>Code above works fine even on Android Nougat since targetSdkVersion is still be&nbsp;23. Now let's change it to 24.</p>
<pre class=\"language-groovy\"><code>android {
    ...
    defaultConfig {
        ...
        targetSdkVersion 24
    }
}
</code></pre>
<p>Here is the result. It still works on Android Pre-N but it appears to&nbsp;cause crashing on Android Nougat like this:</p>
<p style=\"text-align: center;\"><img src=\"http://inthecheesefactory.com/uploads/source/fileuri/screenshot1.jpg\" alt=\"\" width=\"480\" height=\"501\" /></p>
<p>And here is the stacktrace.</p>
<pre class=\"language-markup\"><code>FATAL EXCEPTION: main
    Process: com.inthecheesefactory.lab.intent_fileprovider, PID: 28905
    android.os.FileUriExposedException: file:///storage/emulated/0/DCIM/Camera/JPEG_20160723_124304_642070113.jpg exposed beyond app through ClipData.Item.getUri()
    at android.os.StrictMode.onFileUriExposed(StrictMode.java:1799)
    at android.net.Uri.checkFileUriExposed(Uri.java:2346)
    at android.content.ClipData.prepareToLeaveProcess(ClipData.java:832)
    ...</code></pre>
<p>The reason is quite obvious. <code>file://</code> is not allowed as an attached URI in Intent or&nbsp;<code>FileUriExposedException</code>&nbsp;would be thrown.</p>
<p>And this is a&nbsp;big issue that you have to make sure that all code related to this case has already been fixed&nbsp;before releasing a new version with targetSdkVersion 24 or your app may crash on some of your user's&nbsp;device.</p>
<h2 class=\"section-heading\">Why Nougat does not allow passing&nbsp;file:// with Intent anymore?</h2>
<p>You may be curious why Android team decide to change this behavior. Actually there is a good reason behind.</p>
<p>If file path is sent to the target application (Camera app in this case), file will be fully accessed through the Camera app's process not the sender one.</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/fileuri/withfile.jpg\" alt=\"\" width=\"600\" height=\"533\" /></p>
<p>But let's consider&nbsp;thoroughly, actually Camera is launched by our application to take a photo and save as a file on our app's behalf.&nbsp;So the access right to that file should be our app's not Camera's. Every operation did with the file should be done through our application not by Camera app itself.</p>
<p>And that's why <code>file://</code>&nbsp;is now prohibited on targetSdkVersion 24 to force every developer to&nbsp;do&nbsp;this task&nbsp;in the proper way.</p>
<h2 class=\"section-heading\">Solution</h2>
<p>So if <code>file://</code> is not allowed anymore,&nbsp;which approach should we go for? The answer is we should send the URI through <code>content://</code> scheme instead which is the URI scheme for <strong>Content Provider</strong>. In this case, we would like to share an access to a file through our app so <code>FileProvider</code> is needed to be implemented. Flow is now changed like below:</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/fileuri/withfileprovider.jpg\" alt=\"\" width=\"600\" height=\"533\" /></p>
<p>And now, with FileProvider,&nbsp;file operation would be done through our app process like it supposes to be !</p>
<p>It is quite easy to implement FileProvider on your application. First you need to add a FileProvider <code>&lt;provider&gt;</code> tag in&nbsp;<code>AndroidManifest.xml</code>&nbsp;under&nbsp;<code>&lt;application&gt;</code>&nbsp;tag like below:</p>
<p><strong>AndroidManifest.xml</strong></p>
<pre class=\"language-markup\"><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;
&lt;manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"
    ...
    &lt;application
        ...
        &lt;provider
            android:name=\"android.support.v4.content.FileProvider\"
            android:authorities=\"${applicationId}.provider\"
            android:exported=\"false\"
            android:grantUriPermissions=\"true\"&gt;
            &lt;meta-data
                android:name=\"android.support.FILE_PROVIDER_PATHS\"
                android:resource=\"@xml/provider_paths\"/&gt;
        &lt;/provider&gt;
    &lt;/application&gt;
&lt;/manifest&gt;
</code></pre>
<p>And then create a <code>provider_paths.xml</code> file in&nbsp;<code>xml</code> folder under&nbsp;<code>res</code> folder. Folder may be needed to create&nbsp;if it doesn't exist.</p>
<p>The content of the file is shown below. It describes that we would like to share access to the External Storage at root folder <strong>(path=\".\")</strong> with the name <strong>external_files</strong>.</p>
<p><strong>res/xml/provider_paths.xml</strong></p>
<pre class=\"language-markup\"><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;
&lt;paths xmlns:android=\"http://schemas.android.com/apk/res/android\"&gt;
    &lt;external-path name=\"external_files\" path=\".\"/&gt;
&lt;/paths&gt;</code></pre>
<p>Done! FileProvider is now declared and be ready to use.</p>
<p>The final step is to change the line of code below in&nbsp;<code>MainActivity.java</code></p>
<pre class=\"language-java\"><code>Uri photoURI = Uri.fromFile(createImageFile());</code></pre>
<p>to</p>
<pre class=\"language-java\"><code>Uri photoURI = FileProvider.getUriForFile(MainActivity.this,
        BuildConfig.APPLICATION_ID + \".provider\",
        createImageFile());
</code></pre>
<p>And .... done ! Your application should now work perfectly fine on any Android version including Android Nougat. Yah !</p>
<p><img style=\"display: block; margin-left: auto; margin-right: auto;\" src=\"http://inthecheesefactory.com/uploads/source/fileuri/screenshot548.jpg\" alt=\"\" width=\"480\" height=\"498\" /></p>
<h2 class=\"section-heading\">How about the existed app launched previously?</h2>
<p>As you can see from the experiment result above. This behavior will happen only&nbsp;when you change your app's targetSdkVersion to 24 or above. So if your previously launched application was set the targetSdkVersion to 23 or lower, it supposes not to be a problem even on Android Nougat. <code>file://</code>&nbsp;should&nbsp;still works perfectly fine.</p>
<p>Anyway, to match the Android Best Practice, when there is a new API Level, we better always change targetSdkVersion to the latest one for the best user experience. =)</p>			") (link nil "http://inthecheesefactory.com/blog/how-to-share-access-to-file-with-fileprovider-on-android-nougat/en") (pubDate nil "
				Sat, 23 Jul 2016 08:11:00 +0000			") (guid nil "http://inthecheesefactory.com/blog/how-to-share-access-to-file-with-fileprovider-on-android-nougat/en"))) ("How to make onActivityResult get called on Nested Fragment" "<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/nestedfragment/cover.jpg\" /></p>
<p>One of the common problem we always meet in the world of Fragment is: although we could&nbsp;call <code>startActivityForResult</code>&nbsp;directly from Nested Fragment but it appears that&nbsp;<code>onActivityResult</code> would never been called which brought a lot of trouble to handle Activity Result from Nested Fragment.</p>
<p>Why does this&nbsp;happen? That's because Fragment is not first designed to be nested. Once its capability was expanded, the architecture behind Fragment couldn't cover all the case. And we developers have to handle the problem case by case by ourselves.</p>
<p>But don't worry, we already have a sustainable and robust workaround for this problem.&nbsp;Ok, let's&nbsp;start !</p>
<h2 class=\"section-heading\">Architecture behind Fragment's startActivityForResult</h2>
<p>Although we could call <code>startActivityForResult</code> directly from Fragment but actually mechanic&nbsp;behind are all handled by Activity. Once you call startActivityForResult from a Fragment, <span style=\"text-decoration: underline;\">requestCode will be changed</span>&nbsp;to attach Fragment's identity to the code. That will&nbsp;let Activity be able to track back&nbsp;that&nbsp;who send this request&nbsp;once&nbsp;result is received.</p>
<p>Once Activity was navigated back, the result will be sent to Activity's <code>onActivityResult</code> with the modified requestCode which will be decoded to original requestCode + Fragment's identity. After that, Activity will send the Activity Result to that&nbsp;Fragment through <code>onActivityResult</code>. And it's all done.</p>
<p>The problem is: Activity could send the result to only the Fragment that has been attached directly to Activity but not the nested one. <strong>That's the reason why onActivityResult of nested fragment would never been called no matter what.</strong></p>
<h2 class=\"section-heading\">The Solution</h2>
<p>This behavior&nbsp;is one of the most popular issue in town. We could found a lot of thread related to this in&nbsp;stackoverflow. There are a lot of workaround provided by people there. Anyway none of them is sustainable enough to be used in any case (at least all of those that I discovered). So we spend a day research all the mechanic behind and try to find&nbsp;the way to cover all the cases&nbsp;available. And finally we&nbsp;found one!</p>
<p>The problem, as described above, is the request&nbsp;could be sent from nested fragment but couldn't be received properly.&nbsp;<span style=\"color: #c0392b;\"><strong>Thus there is no need to do those things in&nbsp;Fragment. Let them be all done in Activity level.</strong></span></p>
<p>So we will call <code>getActivity().startActivityForResult(...)</code>&nbsp;from Fragment&nbsp;instead of&nbsp;just&nbsp;<code>startActivityResult(...)</code>&nbsp;&nbsp;from now on. Like this:</p>
<pre class=\"language-java\"><code>// In Fragment
Intent intent = new Intent(getActivity(), SecondActivity.class);
getActivity().startActivityForResult(intent, 12345);</code></pre>
<p>As a result, all of the result received will be handled at the single place: <code>onActivityResult</code> of the Activity that Fragment is placed on.</p>
<p>Question is how to send the Activity Result to Fragment?</p>
<p>Due to the fact that we couldn't&nbsp;directly communicate with all of the nested fragment in the normal way, or at least in the easy way. And another fact is, every Fragment knows that&nbsp;which&nbsp;requestCode it has to handled since it is also the one that call startActivityForResult. So we choose the way to <strong>\"broadcast to every single Fragment that is active at time. And let those Fragments check requestCode and do what they want.\"</strong></p>
<p>Talk about broadcasting, LocalBroadcastManager could do the job but the mechanic is the way too old. I choose another alternative, an EventBus, which has a lot of choices out there. The one that I chose was <a href=\"http://square.github.io/otto/\" target=\"_blank\">Otto</a>&nbsp;from square. It is really good at performance and robustness.</p>
<p>First of all, add a&nbsp;following line&nbsp;in&nbsp;<code>build.gradle</code>&nbsp;to include Otto to our project:</p>
<pre class=\"language-groovy\"><code>dependencies {
compile 'com.squareup:otto:1.3.6'
}</code></pre>
<p>In the Otto way, let's create a Bus Event as a package carry those Activity Result values.</p>
<p class=\"no-margin\"><strong>ActivityResultEvent.java</strong></p>
<pre class=\"language-java\"><code>import android.content.Intent;
/**
* Created by nuuneoi on 3/12/2015.
*/
public class ActivityResultEvent {
private int requestCode;
private int resultCode;
private Intent data;
public ActivityResultEvent(int requestCode, int resultCode, Intent data) {
this.requestCode = requestCode;
this.resultCode = resultCode;
this.data = data;
}
public int getRequestCode() {
return requestCode;
}
public void setRequestCode(int requestCode) {
this.requestCode = requestCode;
}
public int getResultCode() {
return resultCode;
}
public void setResultCode(int resultCode) {
this.resultCode = resultCode;
}
public Intent getData() {
return data;
}
public void setData(Intent data) {
this.data = data;
}
}
</code></pre>
<p>And of course, also create a Singleton of Event Bus which will be used to send a package from an Activity to all of active Fragments.</p>
<p class=\"no-margin\"><strong>ActivityResultBus.java</strong></p>
<pre class=\"language-java\"><code>import android.os.Handler;
import android.os.Looper;
import com.squareup.otto.Bus;
/**
* Created by nuuneoi on 3/12/2015.
*/
public class ActivityResultBus extends Bus {
private static ActivityResultBus instance;
public static ActivityResultBus getInstance() {
if (instance == null)
instance = new ActivityResultBus();
return instance;
}
private Handler mHandler = new Handler(Looper.getMainLooper());
public void postQueue(final Object obj) {
mHandler.post(new Runnable() {
@Override
public void run() {
ActivityResultBus.getInstance().post(obj);
}
});
}
}
</code></pre>
<p>You may notice that I also create a custom method named&nbsp;<code>postQueue</code>&nbsp;in the bus object. This one&nbsp;is used to send a package into the bus. And the reason why we have to do it this way is because we have to delay a package sending&nbsp;a little bit since at the moment that Activitiy's onActivityResult has been&nbsp;called, the Fragment is not become active yet. So we need to let Handler send those commands to the queue of Main Thread with handler.post(...) like coded above.</p>
<p>And then we will override onActivityResult on Activity and add a&nbsp;following line to send the package to the bus once the result is received.</p>
<pre class=\"language-java\"><code>public class MainActivity extends ActionBarActivity {
...
@Override
protected void onActivityResult(int requestCode, int resultCode, Intent data) {
super.onActivityResult(requestCode, resultCode, data);
ActivityResultBus.getInstance().postQueue(
new ActivityResultEvent(requestCode, resultCode, data));
}
...
}</code></pre>
<p>In Fragment part, we need to listen to the package sent from Activity. We could do it easily in Otto way like this.</p>
<pre class=\"language-java\"><code>public class BodyFragment extends Fragment {
...
@Override
public void onStart() {
super.onStart();
ActivityResultBus.getInstance().register(mActivityResultSubscriber);
}
@Override
public void onStop() {
super.onStop();
ActivityResultBus.getInstance().unregister(mActivityResultSubscriber);
}
private Object mActivityResultSubscriber = new Object() {
@Subscribe
public void onActivityResultReceived(ActivityResultEvent event) {
int requestCode = event.getRequestCode();
int resultCode = event.getResultCode();
Intent data = event.getData();
onActivityResult(requestCode, resultCode, data);
}
};
...
}
</code></pre>
<p>That's all. <code>Fragment's onActivityResult</code> will be called from now on ! You can now just simply override onActivityResult, check the requestCode and do what you want.</p>
<pre class=\"language-java\"><code>public class BodyFragment extends Fragment {
...
@Override
public void onActivityResult(int requestCode, int resultCode, Intent data) {
super.onActivityResult(requestCode, resultCode, data);
// Don't forget to check requestCode before continuing your job
if (requestCode == 12345) {
// Do your job
tvResult.setText(\"Result Code = \" + resultCode);
}
}
...
}</code></pre>
<p>With this solution, it could be applied&nbsp;for any single fragment whether it is nested or not. And yes,&nbsp;it also covers all the case! Moreover, the codes&nbsp;are&nbsp;also nice and clean.</p>
<h2 class=\"section-heading\">Limitation</h2>
<p>There is just only one limitation. <span style=\"color: #c0392b;\"><strong>Don't use the same requestCode in different Fragment.</strong></span> As you can see, every single Fragment that is active at time will be receive the package. If you use the same requestCode in different Fragment, it may&nbsp;delivers the wrong outcome. Except that you intend to do it, you can.</p>
<h2 class=\"section-heading\">Make it easy with StatedFragment</h2>
<p>Good news! The code we&nbsp;described in this article are already included in our&nbsp;<a href=\"http://github.com/nuuneoi/StatedFragment\" target=\"_blank\">StatedFragment</a>&nbsp;in version 0.9.3 and above. You could now use it easily like this:</p>
<p>Add a dependency in&nbsp;<code>build.gradle</code></p>
<pre class=\"language-groovy\"><code>dependencies {
compile 'com.inthecheesefactory.thecheeselibrary:stated-fragment-support-v4:0.9.3'
}</code></pre>
<p>In case you use Fragment&nbsp;from&nbsp;android.app.*, please add the following instead.</p>
<pre class=\"language-groovy\"><code>dependencies {
compile 'com.inthecheesefactory.thecheeselibrary:stated-fragment:0.9.3'
}</code></pre>
<p>To enable it, just simply&nbsp;override method&nbsp;<code>onActivityResult</code>&nbsp;in the Activity&nbsp;and add a following line:</p>
<pre class=\"language-java\"><code>public class MainActivity extends ActionBarActivity {
...
@Override
protected void onActivityResult(int requestCode, int resultCode, Intent data) {
super.onActivityResult(requestCode, resultCode, data);
ActivityResultBus.getInstance().postQueue(
new ActivityResultEvent(requestCode, resultCode, data));
}
...
}</code></pre>
<p>For Fragment, you could simple extends <code>StatedFragment</code>. <code>onActivityResult</code> will be now useful.</p>
<pre class=\"language-java\"><code>public class BodyFragment extends StatedFragment {
...
@Override
public void onActivityResult(int requestCode, int resultCode, Intent data) {
super.onActivityResult(requestCode, resultCode, data);
// Add your code here
Toast.makeText(getActivity(), \"Fragment Got it: \" + requestCode + \", \" + resultCode, Toast.LENGTH_SHORT).show();
}
...
}</code></pre>
<p>As I said. Easy, huh?</p>
<p>Hope that this article is helpful to you all. Best wishes to you all =)</p>" "http://inthecheesefactory.com/blog/how-to-fix-nested-fragment-onactivityresult-issue/en" (21762 60048) new 22 nil nil ((title nil "
				How to make onActivityResult get called on Nested Fragment			") (description nil "
				<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/nestedfragment/cover.jpg\" /></p> 
<p>One of the common problem we always meet in the world of Fragment is: although we could&nbsp;call <code>startActivityForResult</code>&nbsp;directly from Nested Fragment but it appears that&nbsp;<code>onActivityResult</code> would never been called which brought a lot of trouble to handle Activity Result from Nested Fragment.</p>
<p>Why does this&nbsp;happen? That's because Fragment is not first designed to be nested. Once its capability was expanded, the architecture behind Fragment couldn't cover all the case. And we developers have to handle the problem case by case by ourselves.</p>
<p>But don't worry, we already have a sustainable and robust workaround for this problem.&nbsp;Ok, let's&nbsp;start !</p>
<h2 class=\"section-heading\">Architecture behind Fragment's startActivityForResult</h2>
<p>Although we could call <code>startActivityForResult</code> directly from Fragment but actually mechanic&nbsp;behind are all handled by Activity. Once you call startActivityForResult from a Fragment, <span style=\"text-decoration: underline;\">requestCode will be changed</span>&nbsp;to attach Fragment's identity to the code. That will&nbsp;let Activity be able to track back&nbsp;that&nbsp;who send this request&nbsp;once&nbsp;result is received.</p>
<p>Once Activity was navigated back, the result will be sent to Activity's <code>onActivityResult</code> with the modified requestCode which will be decoded to original requestCode + Fragment's identity. After that, Activity will send the Activity Result to that&nbsp;Fragment through <code>onActivityResult</code>. And it's all done.</p>
<p>The problem is: Activity could send the result to only the Fragment that has been attached directly to Activity but not the nested one. <strong>That's the reason why onActivityResult of nested fragment would never been called no matter what.</strong></p>
<h2 class=\"section-heading\">The Solution</h2>
<p>This behavior&nbsp;is one of the most popular issue in town. We could found a lot of thread related to this in&nbsp;stackoverflow. There are a lot of workaround provided by people there. Anyway none of them is sustainable enough to be used in any case (at least all of those that I discovered). So we spend a day research all the mechanic behind and try to find&nbsp;the way to cover all the cases&nbsp;available. And finally we&nbsp;found one!</p>
<p>The problem, as described above, is the request&nbsp;could be sent from nested fragment but couldn't be received properly.&nbsp;<span style=\"color: #c0392b;\"><strong>Thus there is no need to do those things in&nbsp;Fragment. Let them be all done in Activity level.</strong></span></p>
<p>So we will call <code>getActivity().startActivityForResult(...)</code>&nbsp;from Fragment&nbsp;instead of&nbsp;just&nbsp;<code>startActivityResult(...)</code>&nbsp;&nbsp;from now on. Like this:</p>
<pre class=\"language-java\"><code>// In Fragment
Intent intent = new Intent(getActivity(), SecondActivity.class);
getActivity().startActivityForResult(intent, 12345);</code></pre>
<p>As a result, all of the result received will be handled at the single place: <code>onActivityResult</code> of the Activity that Fragment is placed on.</p>
<p>Question is how to send the Activity Result to Fragment?</p>
<p>Due to the fact that we couldn't&nbsp;directly communicate with all of the nested fragment in the normal way, or at least in the easy way. And another fact is, every Fragment knows that&nbsp;which&nbsp;requestCode it has to handled since it is also the one that call startActivityForResult. So we choose the way to <strong>\"broadcast to every single Fragment that is active at time. And let those Fragments check requestCode and do what they want.\"</strong></p>
<p>Talk about broadcasting, LocalBroadcastManager could do the job but the mechanic is the way too old. I choose another alternative, an EventBus, which has a lot of choices out there. The one that I chose was <a href=\"http://square.github.io/otto/\" target=\"_blank\">Otto</a>&nbsp;from square. It is really good at performance and robustness.</p>
<p>First of all, add a&nbsp;following line&nbsp;in&nbsp;<code>build.gradle</code>&nbsp;to include Otto to our project:</p>
<pre class=\"language-groovy\"><code>dependencies {
  compile 'com.squareup:otto:1.3.6'
}</code></pre>
<p>In the Otto way, let's create a Bus Event as a package carry those Activity Result values.</p>
<p class=\"no-margin\"><strong>ActivityResultEvent.java</strong></p>
<pre class=\"language-java\"><code>import android.content.Intent;

/**
 * Created by nuuneoi on 3/12/2015.
 */
public class ActivityResultEvent {

    private int requestCode;
    private int resultCode;
    private Intent data;

    public ActivityResultEvent(int requestCode, int resultCode, Intent data) {
        this.requestCode = requestCode;
        this.resultCode = resultCode;
        this.data = data;
    }

    public int getRequestCode() {
        return requestCode;
    }

    public void setRequestCode(int requestCode) {
        this.requestCode = requestCode;
    }

    public int getResultCode() {
        return resultCode;
    }

    public void setResultCode(int resultCode) {
        this.resultCode = resultCode;
    }

    public Intent getData() {
        return data;
    }

    public void setData(Intent data) {
        this.data = data;
    }
}
</code></pre>
<p>And of course, also create a Singleton of Event Bus which will be used to send a package from an Activity to all of active Fragments.</p>
<p class=\"no-margin\"><strong>ActivityResultBus.java</strong></p>
<pre class=\"language-java\"><code>import android.os.Handler;
import android.os.Looper;

import com.squareup.otto.Bus;

/**
 * Created by nuuneoi on 3/12/2015.
 */
public class ActivityResultBus extends Bus {

    private static ActivityResultBus instance;

    public static ActivityResultBus getInstance() {
        if (instance == null)
            instance = new ActivityResultBus();
        return instance;
    }

    private Handler mHandler = new Handler(Looper.getMainLooper());

    public void postQueue(final Object obj) {
        mHandler.post(new Runnable() {
            @Override
            public void run() {
                ActivityResultBus.getInstance().post(obj);
            }
        });
    }

}
</code></pre>
<p>You may notice that I also create a custom method named&nbsp;<code>postQueue</code>&nbsp;in the bus object. This one&nbsp;is used to send a package into the bus. And the reason why we have to do it this way is because we have to delay a package sending&nbsp;a little bit since at the moment that Activitiy's onActivityResult has been&nbsp;called, the Fragment is not become active yet. So we need to let Handler send those commands to the queue of Main Thread with handler.post(...) like coded above.</p>
<p>And then we will override onActivityResult on Activity and add a&nbsp;following line to send the package to the bus once the result is received.</p>
<pre class=\"language-java\"><code>public class MainActivity extends ActionBarActivity {

    ...

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        ActivityResultBus.getInstance().postQueue(
                    new ActivityResultEvent(requestCode, resultCode, data));
    }

    ...

}</code></pre>
<p>In Fragment part, we need to listen to the package sent from Activity. We could do it easily in Otto way like this.</p>
<pre class=\"language-java\"><code>public class BodyFragment extends Fragment {

    ...

    @Override
    public void onStart() {
        super.onStart();
        ActivityResultBus.getInstance().register(mActivityResultSubscriber);
    }

    @Override
    public void onStop() {
        super.onStop();
        ActivityResultBus.getInstance().unregister(mActivityResultSubscriber);
    }

    private Object mActivityResultSubscriber = new Object() {
        @Subscribe
        public void onActivityResultReceived(ActivityResultEvent event) {
            int requestCode = event.getRequestCode();
            int resultCode = event.getResultCode();
            Intent data = event.getData();
            onActivityResult(requestCode, resultCode, data);
        }
    };

    ...

}
</code></pre>
<p>That's all. <code>Fragment's onActivityResult</code> will be called from now on ! You can now just simply override onActivityResult, check the requestCode and do what you want.</p>
<pre class=\"language-java\"><code>public class BodyFragment extends Fragment {

    ...

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        // Don't forget to check requestCode before continuing your job
        if (requestCode == 12345) {
            // Do your job
            tvResult.setText(\"Result Code = \" + resultCode);
        }
    }

    ...

}</code></pre>
<p>With this solution, it could be applied&nbsp;for any single fragment whether it is nested or not. And yes,&nbsp;it also covers all the case! Moreover, the codes&nbsp;are&nbsp;also nice and clean.</p>
<h2 class=\"section-heading\">Limitation</h2>
<p>There is just only one limitation. <span style=\"color: #c0392b;\"><strong>Don't use the same requestCode in different Fragment.</strong></span> As you can see, every single Fragment that is active at time will be receive the package. If you use the same requestCode in different Fragment, it may&nbsp;delivers the wrong outcome. Except that you intend to do it, you can.</p>
<h2 class=\"section-heading\">Make it easy with StatedFragment</h2>
<p>Good news! The code we&nbsp;described in this article are already included in our&nbsp;<a href=\"http://github.com/nuuneoi/StatedFragment\" target=\"_blank\">StatedFragment</a>&nbsp;in version 0.9.3 and above. You could now use it easily like this:</p>
<p>Add a dependency in&nbsp;<code>build.gradle</code></p>
<pre class=\"language-groovy\"><code>dependencies {
    compile 'com.inthecheesefactory.thecheeselibrary:stated-fragment-support-v4:0.9.3'
}</code></pre>
<p>In case you use Fragment&nbsp;from&nbsp;android.app.*, please add the following instead.</p>
<pre class=\"language-groovy\"><code>dependencies {
    compile 'com.inthecheesefactory.thecheeselibrary:stated-fragment:0.9.3'
}</code></pre>
<p>To enable it, just simply&nbsp;override method&nbsp;<code>onActivityResult</code>&nbsp;in the Activity&nbsp;and add a following line:</p>
<pre class=\"language-java\"><code>public class MainActivity extends ActionBarActivity {

    ...

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        ActivityResultBus.getInstance().postQueue(
                    new ActivityResultEvent(requestCode, resultCode, data));
    }

    ...

}</code></pre>
<p>For Fragment, you could simple extends <code>StatedFragment</code>. <code>onActivityResult</code> will be now useful.</p>
<pre class=\"language-java\"><code>public class BodyFragment extends StatedFragment {

    ...

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        // Add your code here
        Toast.makeText(getActivity(), \"Fragment Got it: \" + requestCode + \", \" + resultCode, Toast.LENGTH_SHORT).show();
    }

    ...

}</code></pre>
<p>As I said. Easy, huh?</p>
<p>Hope that this article is helpful to you all. Best wishes to you all =)</p>			") (link nil "http://inthecheesefactory.com/blog/how-to-fix-nested-fragment-onactivityresult-issue/en") (pubDate nil "
				Fri, 13 Mar 2015 13:48:00 +0000			") (guid nil "http://inthecheesefactory.com/blog/how-to-fix-nested-fragment-onactivityresult-issue/en"))) ("How to setup ACRA, an Android Application Crash Tracking system, on your own host" "<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/acra/cover3.jpg\" /></p>
<p>One truth about&nbsp;developing a mobile application is there are so many constraints&nbsp;for example,&nbsp;a hardware limitation (CPU, RAM, Battery, etc).&nbsp;If your code design is not good enough, prepare to say hi to the most critical problem on earth: \"Crash\". According to a&nbsp;study, it shows&nbsp;that:</p>
<blockquote>Application Crashing is the most complained problem from&nbsp;mobile app user.</blockquote>
<p>and moreover</p>
<blockquote>If application crashes&nbsp;3 times in a row, about half of users will remove it from their phone.</blockquote>
<p>Crash Tracking System, which lets developer to collect&nbsp;every single details of crash directly from user's device, has been invented to take care of this issue especially. The most two popular Crash Tracking System to date are&nbsp;<a href=\"http://fabric.io\" target=\"_blank\">Crashlytics</a>&nbsp;and&nbsp;<a href=\"http://blog.parse.com/2014/12/09/introducing-parse-crash-reporting-2/\" target=\"_blank\">Parse Crash Reporting</a>, which are both totally-free service. Developer could integreate any of them in their app without charge.&nbsp;Whenever application crashes, the whole stacktrace will be sent to the backend which allow developer to fix every&nbsp;critical&nbsp;problems at the easiest manner. With this method, you&nbsp;would be able to deliver a&nbsp;<strong>Crash-Free Application</strong> in very short time<strong>.</strong></p>
<p>However, those data are collected in the service provider's&nbsp;server which may raise some concern for a big company about user data's privacy.</p>
<p>So ... is there any&nbsp;crash tracking system that allow us to set up our own server?&nbsp;<strong>Of course, there is!</strong> And it is actually quite easy to set up one. Here we go&nbsp;<span style=\"color: #d35400;\"><strong>Application&nbsp;Crash Reporting on Android (ACRA)</strong></span>, a library enabling Android Application to automatically post their crash reports to our own&nbsp;server.</p>
<p>Let's&nbsp;start.</p>
<h2 class=\"section-heading\">Setting up a server</h2>
<p>Server side is a prerequisite for client side. So let's start with server side first.</p>
<p>Since ACRA is well designed and is quite popular. It allows developer to develop their own server system which we could see many of them out there. Anyway the best one I recommend is&nbsp;<strong>Acralyzer</strong>&nbsp;which is also developed by ACRA team. Acralyzer works on top of&nbsp;<strong>Apache CouchDB</strong>, so there is no need to install&nbsp;any additional software but&nbsp;only CouchDB.</p>
<p>Acralyzer is quite be a full-featured backend for crash tracking system. The same stacktrace from different will be grouped as a single issue. If you are done fixing any&nbsp;issue, you can close it easily in just a single click. Moreover it also works in real-time. Only weakness I found in this system is its UI is a little too geeky. But who's care? It is made for developer =P</p>
<p>It is quite easy to install one. Here is the&nbsp;full instruction on how to install Acralyzer on <strong>Ubuntu</strong>.</p>
<p>Start with installing couchdb. Open Terminal and type a command:</p>
<pre class=\"language-bash\"><code>apt-get install couchdb</code></pre>
<p>Test the installation with this command:</p>
<pre class=\"language-bash\"><code>curl http://127.0.0.1:5984</code></pre>
<p>If you did it right,&nbsp;it would return as:</p>
<pre class=\"language-bash\"><code>{\"couchdb\":\"Welcome\",\"version\":\"1.2.0\"}</code></pre>
<p>Edit&nbsp;<code><strong><span style=\"font-family: 'courier new', courier;\">/etc/couchdb/local.ini</span></strong></code>&nbsp;file to allow us to access&nbsp;CouchDB through&nbsp;External IP (by default, it could be accessed through 127.0.0.1 only). Just simply&nbsp;uncomment&nbsp;these two lines:</p>
<pre class=\"language-bash\"><code>;port = 5984
;bind_address = 127.0.0.1</code></pre>
<p>and change it to</p>
<pre class=\"language-html\"><code>port = 5984
bind_address = 0.0.0.0</code></pre>
<p>In the same file, you have to do adding a username/password as an administrator account.&nbsp;Find this line (it supposes to be almost at the end of file):</p>
<pre class=\"language-bash\"><code>[admins]</code></pre>
<p>Add a username/password in the <span style=\"text-decoration: underline;\">next line</span> in <strong>username = password</strong>&nbsp;form, for example:</p>
<pre class=\"language-bash\"><code>nuuneoi = 12345</code></pre>
<p><span style=\"color: #e74c3c;\">Please feel free to place a raw password there. Once CouchDB is restarted, your password will be hashed automatically and will be unreadable.</span></p>
<p>Save your edited file and restart CouchDB through command line:</p>
<pre class=\"language-bash\"><code>curl -X POST http://localhost:5984/_restart -H\"Content-Type: application/json\"</code></pre>
<p>From now you, you will be able to access CouchDB through web browser. This web service&nbsp;is called <strong>Futon</strong>, a CouchDB's&nbsp;UI Backend. Just simply open this url on your web browser.</p>
<pre class=\"language-plain\"><code>http://&lt;YOUR_SERVER_IP&gt;:5984/_utils</code></pre>
<p>Here we go, Futon.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/acra/futon.png\" alt=\"futon\" />&nbsp;</p>
<p><span style=\"color: #c0392b;\"><strong>First of all, login into the system with your administrator account set previously.</strong></span></p>
<p>Now we are going to install an <strong>acro-storage</strong> (Acralyzer's Storage Endpoing). From the right menu, press <strong>Replicator</strong>&nbsp;and&nbsp;fill in the form <strong>from Remote Database</strong>&nbsp;and&nbsp;<strong>to Local Database</strong>&nbsp;like this:</p>
<pre class=\"language-plain\"><code>from Remote Database: http://get.acralyzer.com/distrib-acra-storage
to Local Database: acra-myapp</code></pre>
<p>Press <strong>Replicate</strong> and wait until it is done.</p>
<p>Next install&nbsp;<strong>Acralyzer</strong>&nbsp;with the same method but different parameters.</p>
<pre class=\"language-plain\"><code>from Remote Database: http://get.acralyzer.com/distrib-acralyzer
to Local Database: acralyzer</code></pre>
<p>Press <strong>Replicate</strong>&nbsp;to install.</p>
<p>If you did it right, there will be <strong>2&nbsp;databases</strong>&nbsp;added in the system, <strong>acra-myapp</strong>&nbsp;and&nbsp;<strong>acralyzer.</strong></p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/acra/acra3.png\" alt=\"acra3\" /></p>
<p>We are almost there. Next step, we have to create a user for the client. Open Web Browser and go to this url:</p>
<pre class=\"language-html\"><code>http://&lt;YOUR_SERVER_IP&gt;:5984/acralyzer/_design/acralyzer/index.html</code></pre>
<p>Go to <strong>Admin</strong> tab and press <strong>Users</strong></p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/acra/admincreateuser.png\" alt=\"admincreateuser\" /></p>
<p>Fill in any Username/Password you desire&nbsp;(no need to be the same as administrator account) and press&nbsp;<strong>Create User</strong>.&nbsp;These information will appear.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/acra/users2.png\" alt=\"users2\" /></p>
<p><span style=\"text-decoration: underline;\">Copy them all and paste it to your favorite text editor. We would use it in client setting up part.</span></p>
<p>The last thing we have to do it to protect the data inside <strong>acra-myapp</strong>&nbsp;by limit access&nbsp;just to the&nbsp;administrator&nbsp;or anyone would be able to access it. To do that, go into&nbsp;acra-myapp and press&nbsp;<strong>Securities</strong>, fill in<strong>&nbsp;Roles</strong>&nbsp;in <strong>Members</strong>&nbsp;section like this:</p>
<pre class=\"language-plain\"><code>[\"reader\"]</code></pre>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/acra/reader.png\" alt=\"reader\" /></p>
<p>Done !</p>
<p>After this, you could access the Dashboard&nbsp;from the same link as above:</p>
<pre class=\"language-plain\"><code>http://&lt;YOUR_SERVER_IP&gt;:5984/acralyzer/_design/acralyzer/index.html</code></pre>
<p><span style=\"color: #2980b9;\">Please note that acro-myapp is created just for one app. In case you want to create a&nbsp;backend&nbsp;system&nbsp;for another app, please replicate another acro-storage with the same exact procedure but change the Local Database name to <code>acra-&lt;your_app_name&gt;</code>. Please note that it is necessary to&nbsp;start the name with acra- or it would not be listed as a choice&nbsp;on Dashboard.</span></p>
<p>If there is more than one app in the system, there will be a drop-down listbox in Acralyzer Dashboard page to let you choose which one you want to see the issues. Please feel free to give a try.</p>
<h2 class=\"section-heading\">Setting up ACRA on Client Side</h2>
<p>It is pretty easy to setup ACRA on client side. First of all, add a dependency on your <code>build.gradle</code></p>
<pre class=\"language-plain\"><code>compile 'ch.acra:acra:4.6.1'</code></pre>
<p>Sync your gradle files and then create a custom Application class and don't forget to define it in <code>AndroidManifest.xml</code>. (I assume that every Android Developer could do this)</p>
<p>Add a Annotation <strong>@ReportCrashes</strong>&nbsp;above your custom&nbsp;Application created.</p>
<pre class=\"language-java\"><code>import android.app.Application;
import org.acra.ACRA;
import org.acra.annotation.ReportsCrashes;
import org.acra.sender.HttpSender;
/**
* Created by nuuneoi on 2/19/2015.
*/
@ReportsCrashes(
)
public class MainApplication extends Application {
@Override
public void onCreate() {
super.onCreate();
ACRA.init(this);
}
}</code></pre>
<p>Now let's copy message generated from server side above and paste it <strong>inside @ReportsCrashes</strong>&nbsp;like this:</p>
<pre class=\"language-java\"><code>@ReportsCrashes(
httpMethod = HttpSender.Method.PUT,
reportType = HttpSender.Type.JSON,
formUri = \"http://YOUR_SERVER_IP:5984/acra-myapp/_design/acra-storage/_update/report\",
formUriBasicAuthLogin = \"tester\",
formUriBasicAuthPassword = \"12345\"
)</code></pre>
<p>And the final step, just don't forget to add INTERNET permission inside&nbsp;<code><span style=\"font-family: 'courier new', courier;\">AndroidManifest.xml</span></code>&nbsp;or ACRA may not be able to send those stacktraces to your server.</p>
<pre class=\"language-xml\"><code>&lt;uses-permission android:name=\"android.permission.INTERNET\"/&gt;</code></pre>
<p>Congratulations.&nbsp;It is now all done !</p>
<h2 class=\"section-heading\">Testing</h2>
<p>Now let's do some testing by force some crashing in your Activity. For example,</p>
<pre class=\"language-java\"><code>    TextView tvHello;
@Override
protected void onCreate(Bundle savedInstanceState) {
super.onCreate(savedInstanceState);
setContentView(R.layout.activity_main);
tvHello.setText(\"Test Crash\");
}</code></pre>
<p>Run your application and then change a&nbsp;reason of crash and then run it again.&nbsp;And check your dashboard, you will see that those&nbsp;bugs report are sent to the backend system&nbsp;already.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/acra/acra.png\" alt=\"acra\" /></p>
<p>Each bug item is a group of same reports&nbsp;from different user sent&nbsp;at the&nbsp;different time.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/acra/reportslist.png\" alt=\"reportslist\" /></p>
<p>Take a deeper look into report, you will see that it comes with a full stacktrace.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/acra/stacktrace.png\" alt=\"stacktrace\" /></p>
<p>And also bunch of information which is enough to let you scroll for&nbsp;7 pages...</p>
<p>If you finish fixing any bug, you could close the issue by simply press at the \"bug\" icon as highlighted in picture below.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/acra/closeissue.png\" alt=\"closeissue\" /></p>
<p>Hope that you guys find this article useful especially for a big company who need a Application Crash Tracking System but has a privacy&nbsp;concern on using those ready-to-use&nbsp;services.</p>
<p>Actually ACRA comes with&nbsp;a lot of features for example, show a <code>Toast</code>&nbsp;or popup a Report Dialog&nbsp;when crashes. You could find those options in&nbsp;<a href=\"https://github.com/ACRA/acra\" target=\"_blank\">ACRA</a>&nbsp;website.</p>
<p>Acralytics is also the same, there are a lot of features to play with for example, you could set the server to send us email once there is a bug report sent into our system. More info are at&nbsp;<a href=\"https://github.com/ACRA/acralyzer\" target=\"_blank\">Acralyzer</a>.</p>
<p>See ya again next blog ! =)</p>" "http://inthecheesefactory.com/blog/how-to-install-and-use-acra-android/en" (21747 16308) new 23 nil nil ((title nil "
				How to setup ACRA, an Android Application Crash Tracking system, on your own host			") (description nil "
				<p><img class=\"width-100percent\" src=\"http://inthecheesefactory.com/uploads/source/acra/cover3.jpg\" /></p> 
<p>One truth about&nbsp;developing a mobile application is there are so many constraints&nbsp;for example,&nbsp;a hardware limitation (CPU, RAM, Battery, etc).&nbsp;If your code design is not good enough, prepare to say hi to the most critical problem on earth: \"Crash\". According to a&nbsp;study, it shows&nbsp;that:</p>
<blockquote>Application Crashing is the most complained problem from&nbsp;mobile app user.</blockquote>
<p>and moreover</p>
<blockquote>If application crashes&nbsp;3 times in a row, about half of users will remove it from their phone.</blockquote>
<p>Crash Tracking System, which lets developer to collect&nbsp;every single details of crash directly from user's device, has been invented to take care of this issue especially. The most two popular Crash Tracking System to date are&nbsp;<a href=\"http://fabric.io\" target=\"_blank\">Crashlytics</a>&nbsp;and&nbsp;<a href=\"http://blog.parse.com/2014/12/09/introducing-parse-crash-reporting-2/\" target=\"_blank\">Parse Crash Reporting</a>, which are both totally-free service. Developer could integreate any of them in their app without charge.&nbsp;Whenever application crashes, the whole stacktrace will be sent to the backend which allow developer to fix every&nbsp;critical&nbsp;problems at the easiest manner. With this method, you&nbsp;would be able to deliver a&nbsp;<strong>Crash-Free Application</strong> in very short time<strong>.</strong></p>
<p>However, those data are collected in the service provider's&nbsp;server which may raise some concern for a big company about user data's privacy.</p>
<p>So ... is there any&nbsp;crash tracking system that allow us to set up our own server?&nbsp;<strong>Of course, there is!</strong> And it is actually quite easy to set up one. Here we go&nbsp;<span style=\"color: #d35400;\"><strong>Application&nbsp;Crash Reporting on Android (ACRA)</strong></span>, a library enabling Android Application to automatically post their crash reports to our own&nbsp;server.</p>
<p>Let's&nbsp;start.</p>
<h2 class=\"section-heading\">Setting up a server</h2>
<p>Server side is a prerequisite for client side. So let's start with server side first.</p>
<p>Since ACRA is well designed and is quite popular. It allows developer to develop their own server system which we could see many of them out there. Anyway the best one I recommend is&nbsp;<strong>Acralyzer</strong>&nbsp;which is also developed by ACRA team. Acralyzer works on top of&nbsp;<strong>Apache CouchDB</strong>, so there is no need to install&nbsp;any additional software but&nbsp;only CouchDB.</p>
<p>Acralyzer is quite be a full-featured backend for crash tracking system. The same stacktrace from different will be grouped as a single issue. If you are done fixing any&nbsp;issue, you can close it easily in just a single click. Moreover it also works in real-time. Only weakness I found in this system is its UI is a little too geeky. But who's care? It is made for developer =P</p>
<p>It is quite easy to install one. Here is the&nbsp;full instruction on how to install Acralyzer on <strong>Ubuntu</strong>.</p>
<p>Start with installing couchdb. Open Terminal and type a command:</p>
<pre class=\"language-bash\"><code>apt-get install couchdb</code></pre>
<p>Test the installation with this command:</p>
<pre class=\"language-bash\"><code>curl http://127.0.0.1:5984</code></pre>
<p>If you did it right,&nbsp;it would return as:</p>
<pre class=\"language-bash\"><code>{\"couchdb\":\"Welcome\",\"version\":\"1.2.0\"}</code></pre>
<p>Edit&nbsp;<code><strong><span style=\"font-family: 'courier new', courier;\">/etc/couchdb/local.ini</span></strong></code>&nbsp;file to allow us to access&nbsp;CouchDB through&nbsp;External IP (by default, it could be accessed through 127.0.0.1 only). Just simply&nbsp;uncomment&nbsp;these two lines:</p>
<pre class=\"language-bash\"><code>;port = 5984
;bind_address = 127.0.0.1</code></pre>
<p>and change it to</p>
<pre class=\"language-html\"><code>port = 5984
bind_address = 0.0.0.0</code></pre>
<p>In the same file, you have to do adding a username/password as an administrator account.&nbsp;Find this line (it supposes to be almost at the end of file):</p>
<pre class=\"language-bash\"><code>[admins]</code></pre>
<p>Add a username/password in the <span style=\"text-decoration: underline;\">next line</span> in <strong>username = password</strong>&nbsp;form, for example:</p>
<pre class=\"language-bash\"><code>nuuneoi = 12345</code></pre>
<p><span style=\"color: #e74c3c;\">Please feel free to place a raw password there. Once CouchDB is restarted, your password will be hashed automatically and will be unreadable.</span></p>
<p>Save your edited file and restart CouchDB through command line:</p>
<pre class=\"language-bash\"><code>curl -X POST http://localhost:5984/_restart -H\"Content-Type: application/json\"</code></pre>
<p>From now you, you will be able to access CouchDB through web browser. This web service&nbsp;is called <strong>Futon</strong>, a CouchDB's&nbsp;UI Backend. Just simply open this url on your web browser.</p>
<pre class=\"language-plain\"><code>http://&lt;YOUR_SERVER_IP&gt;:5984/_utils</code></pre>
<p>Here we go, Futon.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/acra/futon.png\" alt=\"futon\" />&nbsp;</p>
<p><span style=\"color: #c0392b;\"><strong>First of all, login into the system with your administrator account set previously.</strong></span></p>
<p>Now we are going to install an <strong>acro-storage</strong> (Acralyzer's Storage Endpoing). From the right menu, press <strong>Replicator</strong>&nbsp;and&nbsp;fill in the form <strong>from Remote Database</strong>&nbsp;and&nbsp;<strong>to Local Database</strong>&nbsp;like this:</p>
<pre class=\"language-plain\"><code>from Remote Database: http://get.acralyzer.com/distrib-acra-storage

to Local Database: acra-myapp</code></pre>
<p>Press <strong>Replicate</strong> and wait until it is done.</p>
<p>Next install&nbsp;<strong>Acralyzer</strong>&nbsp;with the same method but different parameters.</p>
<pre class=\"language-plain\"><code>from Remote Database: http://get.acralyzer.com/distrib-acralyzer

to Local Database: acralyzer</code></pre>
<p>Press <strong>Replicate</strong>&nbsp;to install.</p>
<p>If you did it right, there will be <strong>2&nbsp;databases</strong>&nbsp;added in the system, <strong>acra-myapp</strong>&nbsp;and&nbsp;<strong>acralyzer.</strong></p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/acra/acra3.png\" alt=\"acra3\" /></p>
<p>We are almost there. Next step, we have to create a user for the client. Open Web Browser and go to this url:</p>
<pre class=\"language-html\"><code>http://&lt;YOUR_SERVER_IP&gt;:5984/acralyzer/_design/acralyzer/index.html</code></pre>
<p>Go to <strong>Admin</strong> tab and press <strong>Users</strong></p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/acra/admincreateuser.png\" alt=\"admincreateuser\" /></p>
<p>Fill in any Username/Password you desire&nbsp;(no need to be the same as administrator account) and press&nbsp;<strong>Create User</strong>.&nbsp;These information will appear.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/acra/users2.png\" alt=\"users2\" /></p>
<p><span style=\"text-decoration: underline;\">Copy them all and paste it to your favorite text editor. We would use it in client setting up part.</span></p>
<p>The last thing we have to do it to protect the data inside <strong>acra-myapp</strong>&nbsp;by limit access&nbsp;just to the&nbsp;administrator&nbsp;or anyone would be able to access it. To do that, go into&nbsp;acra-myapp and press&nbsp;<strong>Securities</strong>, fill in<strong>&nbsp;Roles</strong>&nbsp;in <strong>Members</strong>&nbsp;section like this:</p>
<pre class=\"language-plain\"><code>[\"reader\"]</code></pre>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/acra/reader.png\" alt=\"reader\" /></p>
<p>Done !</p>
<p>After this, you could access the Dashboard&nbsp;from the same link as above:</p>
<pre class=\"language-plain\"><code>http://&lt;YOUR_SERVER_IP&gt;:5984/acralyzer/_design/acralyzer/index.html</code></pre>
<p><span style=\"color: #2980b9;\">Please note that acro-myapp is created just for one app. In case you want to create a&nbsp;backend&nbsp;system&nbsp;for another app, please replicate another acro-storage with the same exact procedure but change the Local Database name to <code>acra-&lt;your_app_name&gt;</code>. Please note that it is necessary to&nbsp;start the name with acra- or it would not be listed as a choice&nbsp;on Dashboard.</span></p>
<p>If there is more than one app in the system, there will be a drop-down listbox in Acralyzer Dashboard page to let you choose which one you want to see the issues. Please feel free to give a try.</p>
<h2 class=\"section-heading\">Setting up ACRA on Client Side</h2>
<p>It is pretty easy to setup ACRA on client side. First of all, add a dependency on your <code>build.gradle</code></p>
<pre class=\"language-plain\"><code>compile 'ch.acra:acra:4.6.1'</code></pre>
<p>Sync your gradle files and then create a custom Application class and don't forget to define it in <code>AndroidManifest.xml</code>. (I assume that every Android Developer could do this)</p>
<p>Add a Annotation <strong>@ReportCrashes</strong>&nbsp;above your custom&nbsp;Application created.</p>
<pre class=\"language-java\"><code>import android.app.Application;

import org.acra.ACRA;
import org.acra.annotation.ReportsCrashes;
import org.acra.sender.HttpSender;

/**
 * Created by nuuneoi on 2/19/2015.
 */

@ReportsCrashes(
)
public class MainApplication extends Application {

    @Override
    public void onCreate() {
        super.onCreate();

        ACRA.init(this);
    }

}</code></pre>
<p>Now let's copy message generated from server side above and paste it <strong>inside @ReportsCrashes</strong>&nbsp;like this:</p>
<pre class=\"language-java\"><code>@ReportsCrashes(
    httpMethod = HttpSender.Method.PUT,
    reportType = HttpSender.Type.JSON,
    formUri = \"http://YOUR_SERVER_IP:5984/acra-myapp/_design/acra-storage/_update/report\",
    formUriBasicAuthLogin = \"tester\",
    formUriBasicAuthPassword = \"12345\"
)</code></pre>
<p>And the final step, just don't forget to add INTERNET permission inside&nbsp;<code><span style=\"font-family: 'courier new', courier;\">AndroidManifest.xml</span></code>&nbsp;or ACRA may not be able to send those stacktraces to your server.</p>
<pre class=\"language-xml\"><code>&lt;uses-permission android:name=\"android.permission.INTERNET\"/&gt;</code></pre>
<p>Congratulations.&nbsp;It is now all done !</p>
<h2 class=\"section-heading\">Testing</h2>
<p>Now let's do some testing by force some crashing in your Activity. For example,</p>
<pre class=\"language-java\"><code>    TextView tvHello;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        tvHello.setText(\"Test Crash\");
    }</code></pre>
<p>Run your application and then change a&nbsp;reason of crash and then run it again.&nbsp;And check your dashboard, you will see that those&nbsp;bugs report are sent to the backend system&nbsp;already.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/acra/acra.png\" alt=\"acra\" /></p>
<p>Each bug item is a group of same reports&nbsp;from different user sent&nbsp;at the&nbsp;different time.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/acra/reportslist.png\" alt=\"reportslist\" /></p>
<p>Take a deeper look into report, you will see that it comes with a full stacktrace.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/acra/stacktrace.png\" alt=\"stacktrace\" /></p>
<p>And also bunch of information which is enough to let you scroll for&nbsp;7 pages...</p>
<p>If you finish fixing any bug, you could close the issue by simply press at the \"bug\" icon as highlighted in picture below.</p>
<p style=\"text-align: center;\"><img class=\"drop-shadow\" src=\"http://inthecheesefactory.com/uploads/source/acra/closeissue.png\" alt=\"closeissue\" /></p>
<p>Hope that you guys find this article useful especially for a big company who need a Application Crash Tracking System but has a privacy&nbsp;concern on using those ready-to-use&nbsp;services.</p>
<p>Actually ACRA comes with&nbsp;a lot of features for example, show a <code>Toast</code>&nbsp;or popup a Report Dialog&nbsp;when crashes. You could find those options in&nbsp;<a href=\"https://github.com/ACRA/acra\" target=\"_blank\">ACRA</a>&nbsp;website.</p>
<p>Acralytics is also the same, there are a lot of features to play with for example, you could set the server to send us email once there is a bug report sent into our system. More info are at&nbsp;<a href=\"https://github.com/ACRA/acralyzer\" target=\"_blank\">Acralyzer</a>.</p>
<p>See ya again next blog ! =)</p>			") (link nil "http://inthecheesefactory.com/blog/how-to-install-and-use-acra-android/en") (pubDate nil "
				Sun, 01 Mar 2015 16:35:00 +0000			") (guid nil "http://inthecheesefactory.com/blog/how-to-install-and-use-acra-android/en"))))